circuit IntervalChainedMulTester :
  module IntervalChainedMulTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire intervalResult : Interval.0 @[IntervalSpec.scala 385:28]
    wire uintResult : UInt @[IntervalSpec.scala 386:24]
    node _intervalResult_T = mul(asInterval(UInt<3>("h2"), 2, 2, 0), asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 388:25]
    node _intervalResult_T_1 = mul(_intervalResult_T, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 388:31]
    node _intervalResult_T_2 = mul(_intervalResult_T_1, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 388:37]
    node _intervalResult_T_3 = mul(_intervalResult_T_2, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 388:43]
    node _intervalResult_T_4 = mul(_intervalResult_T_3, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 388:49]
    node _intervalResult_T_5 = mul(_intervalResult_T_4, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 388:55]
    intervalResult <= _intervalResult_T_5 @[IntervalSpec.scala 388:18]
    node _uintResult_T = mul(UInt<2>("h2"), UInt<2>("h2")) @[IntervalSpec.scala 389:21]
    node _uintResult_T_1 = mul(_uintResult_T, UInt<2>("h2")) @[IntervalSpec.scala 389:27]
    node _uintResult_T_2 = mul(_uintResult_T_1, UInt<2>("h2")) @[IntervalSpec.scala 389:33]
    node _uintResult_T_3 = mul(_uintResult_T_2, UInt<2>("h2")) @[IntervalSpec.scala 389:39]
    node _uintResult_T_4 = mul(_uintResult_T_3, UInt<2>("h2")) @[IntervalSpec.scala 389:45]
    node _uintResult_T_5 = mul(_uintResult_T_4, UInt<2>("h2")) @[IntervalSpec.scala 389:51]
    uintResult <= _uintResult_T_5 @[IntervalSpec.scala 389:14]
    node _T = eq(intervalResult, asInterval(UInt<9>("h80"), 128, 128, 0)) @[IntervalSpec.scala 391:25]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 391:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[IntervalSpec.scala 391:9]
    when _T_2 : @[IntervalSpec.scala 391:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[IntervalSpec.scala 391:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[IntervalSpec.scala 391:9]
      when _T_3 : @[IntervalSpec.scala 391:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:391 assert(intervalResult === 128.I)\n") : printf @[IntervalSpec.scala 391:9]
    node _T_4 = eq(uintResult, UInt<8>("h80")) @[IntervalSpec.scala 392:21]
    node _T_5 = bits(reset, 0, 0) @[IntervalSpec.scala 392:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[IntervalSpec.scala 392:9]
    when _T_6 : @[IntervalSpec.scala 392:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[IntervalSpec.scala 392:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[IntervalSpec.scala 392:9]
      when _T_7 : @[IntervalSpec.scala 392:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:392 assert(uintResult === 128.U)\n") : printf_1 @[IntervalSpec.scala 392:9]
    node _T_8 = bits(reset, 0, 0) @[IntervalSpec.scala 393:7]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[IntervalSpec.scala 393:7]
    when _T_9 : @[IntervalSpec.scala 393:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[IntervalSpec.scala 393:7]
