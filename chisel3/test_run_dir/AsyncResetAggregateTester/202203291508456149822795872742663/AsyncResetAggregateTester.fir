circuit AsyncResetAggregateTester :
  module AsyncResetAggregateTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    reg cDiv_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 62:40]
    wire cDiv : UInt<1>
    cDiv <= UInt<1>("h0")
    when UInt<1>("h1") : @[Counter.scala 120:16]
      node cDiv_wrap_wrap = eq(cDiv_value, UInt<2>("h3")) @[Counter.scala 74:24]
      node _cDiv_wrap_value_T = add(cDiv_value, UInt<1>("h1")) @[Counter.scala 78:24]
      node _cDiv_wrap_value_T_1 = tail(_cDiv_wrap_value_T, 1) @[Counter.scala 78:24]
      cDiv_value <= _cDiv_wrap_value_T_1 @[Counter.scala 78:15]
      cDiv <= cDiv_wrap_wrap @[Counter.scala 120:23]
    node slowClk = asClock(cDiv) @[AsyncResetSpec.scala 48:22]
    reg count : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 62:40]
    wire done : UInt<1>
    done <= UInt<1>("h0")
    when UInt<1>("h1") : @[Counter.scala 120:16]
      node wrap_wrap = eq(count, UInt<4>("hf")) @[Counter.scala 74:24]
      node _wrap_value_T = add(count, UInt<1>("h1")) @[Counter.scala 78:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 78:24]
      count <= _wrap_value_T_1 @[Counter.scala 78:15]
      done <= wrap_wrap @[Counter.scala 120:23]
    reg asyncResetNext : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AsyncResetSpec.scala 52:31]
    node _asyncResetNext_T = eq(count, UInt<3>("h4")) @[AsyncResetSpec.scala 53:27]
    asyncResetNext <= _asyncResetNext_T @[AsyncResetSpec.scala 53:18]
    node asyncReset = asAsyncReset(asyncResetNext) @[AsyncResetSpec.scala 54:35]
    wire reg_init : { x : UInt<8>, y : UInt<8>}[2] @[AsyncResetSpec.scala 57:20]
    reg_init[0].x <= UInt<1>("h0") @[AsyncResetSpec.scala 58:15]
    reg_init[0].y <= UInt<1>("h0") @[AsyncResetSpec.scala 59:15]
    reg_init[1].x <= UInt<1>("h0") @[AsyncResetSpec.scala 60:15]
    reg_init[1].y <= UInt<1>("h0") @[AsyncResetSpec.scala 61:15]
    reg reg : { x : UInt<8>, y : UInt<8>}[2], slowClk with :
      reset => (asyncReset, reg_init) @[AsyncResetSpec.scala 62:12]
    reg[0].x <= UInt<3>("h5") @[AsyncResetSpec.scala 64:12]
    reg[0].y <= UInt<3>("h6") @[AsyncResetSpec.scala 65:12]
    reg[1].x <= UInt<3>("h7") @[AsyncResetSpec.scala 66:12]
    reg[1].y <= UInt<4>("h8") @[AsyncResetSpec.scala 67:12]
    node _T = eq(count, UInt<2>("h3")) @[AsyncResetSpec.scala 69:14]
    when _T : @[AsyncResetSpec.scala 69:23]
      node _T_1 = eq(reg[0].x, UInt<3>("h5")) @[AsyncResetSpec.scala 70:21]
      node _T_2 = bits(reset, 0, 0) @[AsyncResetSpec.scala 70:11]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[AsyncResetSpec.scala 70:11]
      when _T_3 : @[AsyncResetSpec.scala 70:11]
        assert(clock, _T_1, UInt<1>("h1"), "") : assert @[AsyncResetSpec.scala 70:11]
        node _T_4 = eq(_T_1, UInt<1>("h0")) @[AsyncResetSpec.scala 70:11]
        when _T_4 : @[AsyncResetSpec.scala 70:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:70 assert(reg(0).x === 5.U)\n") : printf @[AsyncResetSpec.scala 70:11]
      node _T_5 = eq(reg[0].y, UInt<3>("h6")) @[AsyncResetSpec.scala 71:21]
      node _T_6 = bits(reset, 0, 0) @[AsyncResetSpec.scala 71:11]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[AsyncResetSpec.scala 71:11]
      when _T_7 : @[AsyncResetSpec.scala 71:11]
        assert(clock, _T_5, UInt<1>("h1"), "") : assert_1 @[AsyncResetSpec.scala 71:11]
        node _T_8 = eq(_T_5, UInt<1>("h0")) @[AsyncResetSpec.scala 71:11]
        when _T_8 : @[AsyncResetSpec.scala 71:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:71 assert(reg(0).y === 6.U)\n") : printf_1 @[AsyncResetSpec.scala 71:11]
      node _T_9 = eq(reg[1].x, UInt<3>("h7")) @[AsyncResetSpec.scala 72:21]
      node _T_10 = bits(reset, 0, 0) @[AsyncResetSpec.scala 72:11]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[AsyncResetSpec.scala 72:11]
      when _T_11 : @[AsyncResetSpec.scala 72:11]
        assert(clock, _T_9, UInt<1>("h1"), "") : assert_2 @[AsyncResetSpec.scala 72:11]
        node _T_12 = eq(_T_9, UInt<1>("h0")) @[AsyncResetSpec.scala 72:11]
        when _T_12 : @[AsyncResetSpec.scala 72:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:72 assert(reg(1).x === 7.U)\n") : printf_2 @[AsyncResetSpec.scala 72:11]
      node _T_13 = eq(reg[1].y, UInt<4>("h8")) @[AsyncResetSpec.scala 73:21]
      node _T_14 = bits(reset, 0, 0) @[AsyncResetSpec.scala 73:11]
      node _T_15 = eq(_T_14, UInt<1>("h0")) @[AsyncResetSpec.scala 73:11]
      when _T_15 : @[AsyncResetSpec.scala 73:11]
        assert(clock, _T_13, UInt<1>("h1"), "") : assert_3 @[AsyncResetSpec.scala 73:11]
        node _T_16 = eq(_T_13, UInt<1>("h0")) @[AsyncResetSpec.scala 73:11]
        when _T_16 : @[AsyncResetSpec.scala 73:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:73 assert(reg(1).y === 8.U)\n") : printf_3 @[AsyncResetSpec.scala 73:11]
    node _T_17 = geq(count, UInt<3>("h5")) @[AsyncResetSpec.scala 75:14]
    node _T_18 = lt(count, UInt<3>("h7")) @[AsyncResetSpec.scala 75:30]
    node _T_19 = and(_T_17, _T_18) @[AsyncResetSpec.scala 75:21]
    when _T_19 : @[AsyncResetSpec.scala 75:37]
      node _T_20 = eq(reg[0].x, UInt<1>("h0")) @[AsyncResetSpec.scala 76:21]
      node _T_21 = bits(reset, 0, 0) @[AsyncResetSpec.scala 76:11]
      node _T_22 = eq(_T_21, UInt<1>("h0")) @[AsyncResetSpec.scala 76:11]
      when _T_22 : @[AsyncResetSpec.scala 76:11]
        assert(clock, _T_20, UInt<1>("h1"), "") : assert_4 @[AsyncResetSpec.scala 76:11]
        node _T_23 = eq(_T_20, UInt<1>("h0")) @[AsyncResetSpec.scala 76:11]
        when _T_23 : @[AsyncResetSpec.scala 76:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:76 assert(reg(0).x === 0.U)\n") : printf_4 @[AsyncResetSpec.scala 76:11]
      node _T_24 = eq(reg[0].y, UInt<1>("h0")) @[AsyncResetSpec.scala 77:21]
      node _T_25 = bits(reset, 0, 0) @[AsyncResetSpec.scala 77:11]
      node _T_26 = eq(_T_25, UInt<1>("h0")) @[AsyncResetSpec.scala 77:11]
      when _T_26 : @[AsyncResetSpec.scala 77:11]
        assert(clock, _T_24, UInt<1>("h1"), "") : assert_5 @[AsyncResetSpec.scala 77:11]
        node _T_27 = eq(_T_24, UInt<1>("h0")) @[AsyncResetSpec.scala 77:11]
        when _T_27 : @[AsyncResetSpec.scala 77:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:77 assert(reg(0).y === 0.U)\n") : printf_5 @[AsyncResetSpec.scala 77:11]
      node _T_28 = eq(reg[1].x, UInt<1>("h0")) @[AsyncResetSpec.scala 78:21]
      node _T_29 = bits(reset, 0, 0) @[AsyncResetSpec.scala 78:11]
      node _T_30 = eq(_T_29, UInt<1>("h0")) @[AsyncResetSpec.scala 78:11]
      when _T_30 : @[AsyncResetSpec.scala 78:11]
        assert(clock, _T_28, UInt<1>("h1"), "") : assert_6 @[AsyncResetSpec.scala 78:11]
        node _T_31 = eq(_T_28, UInt<1>("h0")) @[AsyncResetSpec.scala 78:11]
        when _T_31 : @[AsyncResetSpec.scala 78:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:78 assert(reg(1).x === 0.U)\n") : printf_6 @[AsyncResetSpec.scala 78:11]
      node _T_32 = eq(reg[1].y, UInt<1>("h0")) @[AsyncResetSpec.scala 79:21]
      node _T_33 = bits(reset, 0, 0) @[AsyncResetSpec.scala 79:11]
      node _T_34 = eq(_T_33, UInt<1>("h0")) @[AsyncResetSpec.scala 79:11]
      when _T_34 : @[AsyncResetSpec.scala 79:11]
        assert(clock, _T_32, UInt<1>("h1"), "") : assert_7 @[AsyncResetSpec.scala 79:11]
        node _T_35 = eq(_T_32, UInt<1>("h0")) @[AsyncResetSpec.scala 79:11]
        when _T_35 : @[AsyncResetSpec.scala 79:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:79 assert(reg(1).y === 0.U)\n") : printf_7 @[AsyncResetSpec.scala 79:11]
    else :
      node _T_36 = geq(count, UInt<3>("h7")) @[AsyncResetSpec.scala 80:20]
      when _T_36 : @[AsyncResetSpec.scala 80:28]
        node _T_37 = eq(reg[0].x, UInt<3>("h5")) @[AsyncResetSpec.scala 81:21]
        node _T_38 = bits(reset, 0, 0) @[AsyncResetSpec.scala 81:11]
        node _T_39 = eq(_T_38, UInt<1>("h0")) @[AsyncResetSpec.scala 81:11]
        when _T_39 : @[AsyncResetSpec.scala 81:11]
          assert(clock, _T_37, UInt<1>("h1"), "") : assert_8 @[AsyncResetSpec.scala 81:11]
          node _T_40 = eq(_T_37, UInt<1>("h0")) @[AsyncResetSpec.scala 81:11]
          when _T_40 : @[AsyncResetSpec.scala 81:11]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:81 assert(reg(0).x === 5.U)\n") : printf_8 @[AsyncResetSpec.scala 81:11]
        node _T_41 = eq(reg[0].y, UInt<3>("h6")) @[AsyncResetSpec.scala 82:21]
        node _T_42 = bits(reset, 0, 0) @[AsyncResetSpec.scala 82:11]
        node _T_43 = eq(_T_42, UInt<1>("h0")) @[AsyncResetSpec.scala 82:11]
        when _T_43 : @[AsyncResetSpec.scala 82:11]
          assert(clock, _T_41, UInt<1>("h1"), "") : assert_9 @[AsyncResetSpec.scala 82:11]
          node _T_44 = eq(_T_41, UInt<1>("h0")) @[AsyncResetSpec.scala 82:11]
          when _T_44 : @[AsyncResetSpec.scala 82:11]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:82 assert(reg(0).y === 6.U)\n") : printf_9 @[AsyncResetSpec.scala 82:11]
        node _T_45 = eq(reg[1].x, UInt<3>("h7")) @[AsyncResetSpec.scala 83:21]
        node _T_46 = bits(reset, 0, 0) @[AsyncResetSpec.scala 83:11]
        node _T_47 = eq(_T_46, UInt<1>("h0")) @[AsyncResetSpec.scala 83:11]
        when _T_47 : @[AsyncResetSpec.scala 83:11]
          assert(clock, _T_45, UInt<1>("h1"), "") : assert_10 @[AsyncResetSpec.scala 83:11]
          node _T_48 = eq(_T_45, UInt<1>("h0")) @[AsyncResetSpec.scala 83:11]
          when _T_48 : @[AsyncResetSpec.scala 83:11]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:83 assert(reg(1).x === 7.U)\n") : printf_10 @[AsyncResetSpec.scala 83:11]
        node _T_49 = eq(reg[1].y, UInt<4>("h8")) @[AsyncResetSpec.scala 84:21]
        node _T_50 = bits(reset, 0, 0) @[AsyncResetSpec.scala 84:11]
        node _T_51 = eq(_T_50, UInt<1>("h0")) @[AsyncResetSpec.scala 84:11]
        when _T_51 : @[AsyncResetSpec.scala 84:11]
          assert(clock, _T_49, UInt<1>("h1"), "") : assert_11 @[AsyncResetSpec.scala 84:11]
          node _T_52 = eq(_T_49, UInt<1>("h0")) @[AsyncResetSpec.scala 84:11]
          when _T_52 : @[AsyncResetSpec.scala 84:11]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at AsyncResetSpec.scala:84 assert(reg(1).y === 8.U)\n") : printf_11 @[AsyncResetSpec.scala 84:11]
    when done : @[AsyncResetSpec.scala 87:14]
      node _T_53 = bits(reset, 0, 0) @[AsyncResetSpec.scala 88:9]
      node _T_54 = eq(_T_53, UInt<1>("h0")) @[AsyncResetSpec.scala 88:9]
      when _T_54 : @[AsyncResetSpec.scala 88:9]
        stop(clock, UInt<1>("h1"), 0) : stop @[AsyncResetSpec.scala 88:9]
