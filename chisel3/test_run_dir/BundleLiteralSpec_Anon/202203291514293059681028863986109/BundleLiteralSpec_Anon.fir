circuit BundleLiteralSpec_Anon :
  module BundleLiteralSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    node _T = eq(UInt<6>("h2a"), UInt<6>("h2a")) @[BundleLiteralSpec.scala 59:43]
    node _T_1 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 59:23]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[BundleLiteralSpec.scala 59:23]
    when _T_2 : @[BundleLiteralSpec.scala 59:23]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[BundleLiteralSpec.scala 59:23]
      node _T_3 = eq(_T, UInt<1>("h0")) @[BundleLiteralSpec.scala 59:23]
      when _T_3 : @[BundleLiteralSpec.scala 59:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:59 chisel3.assert(outsideBundleLit.a === 42.U)\n") : printf @[BundleLiteralSpec.scala 59:23]
    node _T_4 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 60:43]
    node _T_5 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 60:23]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[BundleLiteralSpec.scala 60:23]
    when _T_6 : @[BundleLiteralSpec.scala 60:23]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[BundleLiteralSpec.scala 60:23]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[BundleLiteralSpec.scala 60:23]
      when _T_7 : @[BundleLiteralSpec.scala 60:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:60 chisel3.assert(outsideBundleLit.b === true.B)\n") : printf_1 @[BundleLiteralSpec.scala 60:23]
    node _T_8 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 61:43]
    node _T_9 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 61:23]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[BundleLiteralSpec.scala 61:23]
    when _T_10 : @[BundleLiteralSpec.scala 61:23]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[BundleLiteralSpec.scala 61:23]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[BundleLiteralSpec.scala 61:23]
      when _T_11 : @[BundleLiteralSpec.scala 61:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:61 chisel3.assert(outsideBundleLit.c === MyEnum.sB)\n") : printf_2 @[BundleLiteralSpec.scala 61:23]
    node _T_12 = asUInt(UInt<1>("h1")) @[BundleLiteralSpec.scala 63:81]
    node hi = cat(UInt<6>("h2a"), UInt<1>("h1")) @[BundleLiteralSpec.scala 63:81]
    node _T_13 = cat(hi, _T_12) @[BundleLiteralSpec.scala 63:81]
    node _T_14 = eq(UInt<8>("hab"), _T_13) @[BundleLiteralSpec.scala 63:54]
    node _T_15 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 63:23]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[BundleLiteralSpec.scala 63:23]
    when _T_16 : @[BundleLiteralSpec.scala 63:23]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_3 @[BundleLiteralSpec.scala 63:23]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[BundleLiteralSpec.scala 63:23]
      when _T_17 : @[BundleLiteralSpec.scala 63:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:63 chisel3.assert(outsideBundleLit.litValue().U === outsideBundleLit.asUInt())\n") : printf_3 @[BundleLiteralSpec.scala 63:23]
    node _T_18 = eq(UInt<6>("h2a"), UInt<6>("h2a")) @[BundleLiteralSpec.scala 65:36]
    node _T_19 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 65:23]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[BundleLiteralSpec.scala 65:23]
    when _T_20 : @[BundleLiteralSpec.scala 65:23]
      assert(clock, _T_18, UInt<1>("h1"), "") : assert_4 @[BundleLiteralSpec.scala 65:23]
      node _T_21 = eq(_T_18, UInt<1>("h0")) @[BundleLiteralSpec.scala 65:23]
      when _T_21 : @[BundleLiteralSpec.scala 65:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:65 chisel3.assert(bundleLit.a === 42.U)\n") : printf_4 @[BundleLiteralSpec.scala 65:23]
    node _T_22 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 66:36]
    node _T_23 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 66:23]
    node _T_24 = eq(_T_23, UInt<1>("h0")) @[BundleLiteralSpec.scala 66:23]
    when _T_24 : @[BundleLiteralSpec.scala 66:23]
      assert(clock, _T_22, UInt<1>("h1"), "") : assert_5 @[BundleLiteralSpec.scala 66:23]
      node _T_25 = eq(_T_22, UInt<1>("h0")) @[BundleLiteralSpec.scala 66:23]
      when _T_25 : @[BundleLiteralSpec.scala 66:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:66 chisel3.assert(bundleLit.b === true.B)\n") : printf_5 @[BundleLiteralSpec.scala 66:23]
    node _T_26 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 67:36]
    node _T_27 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 67:23]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[BundleLiteralSpec.scala 67:23]
    when _T_28 : @[BundleLiteralSpec.scala 67:23]
      assert(clock, _T_26, UInt<1>("h1"), "") : assert_6 @[BundleLiteralSpec.scala 67:23]
      node _T_29 = eq(_T_26, UInt<1>("h0")) @[BundleLiteralSpec.scala 67:23]
      when _T_29 : @[BundleLiteralSpec.scala 67:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:67 chisel3.assert(bundleLit.c === MyEnum.sB)\n") : printf_6 @[BundleLiteralSpec.scala 67:23]
    node _T_30 = eq(UInt<6>("h2a"), UInt<6>("h2a")) @[BundleLiteralSpec.scala 69:36]
    node _T_31 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 69:23]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[BundleLiteralSpec.scala 69:23]
    when _T_32 : @[BundleLiteralSpec.scala 69:23]
      assert(clock, _T_30, UInt<1>("h1"), "") : assert_7 @[BundleLiteralSpec.scala 69:23]
      node _T_33 = eq(_T_30, UInt<1>("h0")) @[BundleLiteralSpec.scala 69:23]
      when _T_33 : @[BundleLiteralSpec.scala 69:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:69 chisel3.assert(bundleLit.a === outsideBundleLit.a)\n") : printf_7 @[BundleLiteralSpec.scala 69:23]
    node _T_34 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 70:36]
    node _T_35 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 70:23]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[BundleLiteralSpec.scala 70:23]
    when _T_36 : @[BundleLiteralSpec.scala 70:23]
      assert(clock, _T_34, UInt<1>("h1"), "") : assert_8 @[BundleLiteralSpec.scala 70:23]
      node _T_37 = eq(_T_34, UInt<1>("h0")) @[BundleLiteralSpec.scala 70:23]
      when _T_37 : @[BundleLiteralSpec.scala 70:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:70 chisel3.assert(bundleLit.b === outsideBundleLit.b)\n") : printf_8 @[BundleLiteralSpec.scala 70:23]
    node _T_38 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 71:36]
    node _T_39 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 71:23]
    node _T_40 = eq(_T_39, UInt<1>("h0")) @[BundleLiteralSpec.scala 71:23]
    when _T_40 : @[BundleLiteralSpec.scala 71:23]
      assert(clock, _T_38, UInt<1>("h1"), "") : assert_9 @[BundleLiteralSpec.scala 71:23]
      node _T_41 = eq(_T_38, UInt<1>("h0")) @[BundleLiteralSpec.scala 71:23]
      when _T_41 : @[BundleLiteralSpec.scala 71:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:71 chisel3.assert(bundleLit.c === outsideBundleLit.c)\n") : printf_9 @[BundleLiteralSpec.scala 71:23]
    wire bundleWire : { a : UInt<8>, b : UInt<1>, c : UInt<1>} @[BundleLiteralSpec.scala 73:30]
    bundleWire.c <= UInt<1>("h1") @[BundleLiteralSpec.scala 74:20]
    bundleWire.b <= UInt<1>("h1") @[BundleLiteralSpec.scala 74:20]
    bundleWire.a <= UInt<6>("h2a") @[BundleLiteralSpec.scala 74:20]
    node _T_42 = eq(bundleWire.a, UInt<6>("h2a")) @[BundleLiteralSpec.scala 76:37]
    node _T_43 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 76:23]
    node _T_44 = eq(_T_43, UInt<1>("h0")) @[BundleLiteralSpec.scala 76:23]
    when _T_44 : @[BundleLiteralSpec.scala 76:23]
      assert(clock, _T_42, UInt<1>("h1"), "") : assert_10 @[BundleLiteralSpec.scala 76:23]
      node _T_45 = eq(_T_42, UInt<1>("h0")) @[BundleLiteralSpec.scala 76:23]
      when _T_45 : @[BundleLiteralSpec.scala 76:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:76 chisel3.assert(bundleWire.a === 42.U)\n") : printf_10 @[BundleLiteralSpec.scala 76:23]
    node _T_46 = eq(bundleWire.b, UInt<1>("h1")) @[BundleLiteralSpec.scala 77:37]
    node _T_47 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 77:23]
    node _T_48 = eq(_T_47, UInt<1>("h0")) @[BundleLiteralSpec.scala 77:23]
    when _T_48 : @[BundleLiteralSpec.scala 77:23]
      assert(clock, _T_46, UInt<1>("h1"), "") : assert_11 @[BundleLiteralSpec.scala 77:23]
      node _T_49 = eq(_T_46, UInt<1>("h0")) @[BundleLiteralSpec.scala 77:23]
      when _T_49 : @[BundleLiteralSpec.scala 77:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:77 chisel3.assert(bundleWire.b === true.B)\n") : printf_11 @[BundleLiteralSpec.scala 77:23]
    node _T_50 = eq(bundleWire.c, UInt<1>("h1")) @[BundleLiteralSpec.scala 78:37]
    node _T_51 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 78:23]
    node _T_52 = eq(_T_51, UInt<1>("h0")) @[BundleLiteralSpec.scala 78:23]
    when _T_52 : @[BundleLiteralSpec.scala 78:23]
      assert(clock, _T_50, UInt<1>("h1"), "") : assert_12 @[BundleLiteralSpec.scala 78:23]
      node _T_53 = eq(_T_50, UInt<1>("h0")) @[BundleLiteralSpec.scala 78:23]
      when _T_53 : @[BundleLiteralSpec.scala 78:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:78 chisel3.assert(bundleWire.c === MyEnum.sB)\n") : printf_12 @[BundleLiteralSpec.scala 78:23]
    node _T_54 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 80:13]
    node _T_55 = eq(_T_54, UInt<1>("h0")) @[BundleLiteralSpec.scala 80:13]
    when _T_55 : @[BundleLiteralSpec.scala 80:13]
      stop(clock, UInt<1>("h1"), 0) : stop @[BundleLiteralSpec.scala 80:13]
