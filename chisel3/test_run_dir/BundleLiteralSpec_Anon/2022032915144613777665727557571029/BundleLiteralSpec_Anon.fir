circuit BundleLiteralSpec_Anon :
  module BundleLiteralSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    node _T = eq(UInt<4>("ha"), UInt<4>("ha")) @[BundleLiteralSpec.scala 95:42]
    node _T_1 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 95:21]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[BundleLiteralSpec.scala 95:21]
    when _T_2 : @[BundleLiteralSpec.scala 95:21]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[BundleLiteralSpec.scala 95:21]
      node _T_3 = eq(_T, UInt<1>("h0")) @[BundleLiteralSpec.scala 95:21]
      when _T_3 : @[BundleLiteralSpec.scala 95:21]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:95 chisel3.assert(bundleWithVecs.a(0) === 0xa.U)\n") : printf @[BundleLiteralSpec.scala 95:21]
    node _T_4 = eq(UInt<4>("hb"), UInt<4>("hb")) @[BundleLiteralSpec.scala 96:42]
    node _T_5 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 96:21]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[BundleLiteralSpec.scala 96:21]
    when _T_6 : @[BundleLiteralSpec.scala 96:21]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[BundleLiteralSpec.scala 96:21]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[BundleLiteralSpec.scala 96:21]
      when _T_7 : @[BundleLiteralSpec.scala 96:21]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:96 chisel3.assert(bundleWithVecs.a(1) === 0xb.U)\n") : printf_1 @[BundleLiteralSpec.scala 96:21]
    node _T_8 = eq(asInterval(UInt<6>("h6"), 6, 6, 2), asInterval(UInt<6>("h6"), 6, 6, 2)) @[BundleLiteralSpec.scala 97:42]
    node _T_9 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 97:21]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[BundleLiteralSpec.scala 97:21]
    when _T_10 : @[BundleLiteralSpec.scala 97:21]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[BundleLiteralSpec.scala 97:21]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[BundleLiteralSpec.scala 97:21]
      when _T_11 : @[BundleLiteralSpec.scala 97:21]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:97 chisel3.assert(bundleWithVecs.b(0) === (1.5).I(range))\n") : printf_2 @[BundleLiteralSpec.scala 97:21]
    node _T_12 = eq(asInterval(UInt<6>("h1"), 1, 1, 2), asInterval(UInt<6>("h1"), 1, 1, 2)) @[BundleLiteralSpec.scala 98:42]
    node _T_13 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 98:21]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[BundleLiteralSpec.scala 98:21]
    when _T_14 : @[BundleLiteralSpec.scala 98:21]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[BundleLiteralSpec.scala 98:21]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[BundleLiteralSpec.scala 98:21]
      when _T_15 : @[BundleLiteralSpec.scala 98:21]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:98 chisel3.assert(bundleWithVecs.b(1) === (0.25).I(range))\n") : printf_3 @[BundleLiteralSpec.scala 98:21]
    node _T_16 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 99:11]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[BundleLiteralSpec.scala 99:11]
    when _T_17 : @[BundleLiteralSpec.scala 99:11]
      stop(clock, UInt<1>("h1"), 0) : stop @[BundleLiteralSpec.scala 99:11]
