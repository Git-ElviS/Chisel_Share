circuit BundleLiteralSpec_Anon :
  module BundleLiteralSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    node _T = eq(UInt<6>("h2a"), UInt<6>("h2a")) @[BundleLiteralSpec.scala 136:46]
    node _T_1 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 136:23]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[BundleLiteralSpec.scala 136:23]
    when _T_2 : @[BundleLiteralSpec.scala 136:23]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[BundleLiteralSpec.scala 136:23]
      node _T_3 = eq(_T, UInt<1>("h0")) @[BundleLiteralSpec.scala 136:23]
      when _T_3 : @[BundleLiteralSpec.scala 136:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:136 chisel3.assert(explicitBundleLit.a.a === 42.U)\n") : printf @[BundleLiteralSpec.scala 136:23]
    node _T_4 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 137:46]
    node _T_5 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 137:23]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[BundleLiteralSpec.scala 137:23]
    when _T_6 : @[BundleLiteralSpec.scala 137:23]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[BundleLiteralSpec.scala 137:23]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[BundleLiteralSpec.scala 137:23]
      when _T_7 : @[BundleLiteralSpec.scala 137:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:137 chisel3.assert(explicitBundleLit.a.b === true.B)\n") : printf_1 @[BundleLiteralSpec.scala 137:23]
    node _T_8 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 138:46]
    node _T_9 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 138:23]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[BundleLiteralSpec.scala 138:23]
    when _T_10 : @[BundleLiteralSpec.scala 138:23]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[BundleLiteralSpec.scala 138:23]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[BundleLiteralSpec.scala 138:23]
      when _T_11 : @[BundleLiteralSpec.scala 138:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:138 chisel3.assert(explicitBundleLit.a.c === MyEnum.sB)\n") : printf_2 @[BundleLiteralSpec.scala 138:23]
    node _T_12 = asUInt(UInt<1>("h1")) @[BundleLiteralSpec.scala 140:87]
    node hi = cat(UInt<6>("h2a"), UInt<1>("h1")) @[BundleLiteralSpec.scala 140:87]
    node _T_13 = cat(hi, _T_12) @[BundleLiteralSpec.scala 140:87]
    node _T_14 = eq(UInt<8>("hab"), _T_13) @[BundleLiteralSpec.scala 140:57]
    node _T_15 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 140:23]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[BundleLiteralSpec.scala 140:23]
    when _T_16 : @[BundleLiteralSpec.scala 140:23]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_3 @[BundleLiteralSpec.scala 140:23]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[BundleLiteralSpec.scala 140:23]
      when _T_17 : @[BundleLiteralSpec.scala 140:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:140 chisel3.assert(explicitBundleLit.a.litValue().U === explicitBundleLit.a.asUInt())\n") : printf_3 @[BundleLiteralSpec.scala 140:23]
    node _T_18 = eq(UInt<6>("h2a"), UInt<6>("h2a")) @[BundleLiteralSpec.scala 151:46]
    node _T_19 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 151:23]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[BundleLiteralSpec.scala 151:23]
    when _T_20 : @[BundleLiteralSpec.scala 151:23]
      assert(clock, _T_18, UInt<1>("h1"), "") : assert_4 @[BundleLiteralSpec.scala 151:23]
      node _T_21 = eq(_T_18, UInt<1>("h0")) @[BundleLiteralSpec.scala 151:23]
      when _T_21 : @[BundleLiteralSpec.scala 151:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:151 chisel3.assert(expandedBundleLit.a.a === 42.U)\n") : printf_4 @[BundleLiteralSpec.scala 151:23]
    node _T_22 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 152:46]
    node _T_23 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 152:23]
    node _T_24 = eq(_T_23, UInt<1>("h0")) @[BundleLiteralSpec.scala 152:23]
    when _T_24 : @[BundleLiteralSpec.scala 152:23]
      assert(clock, _T_22, UInt<1>("h1"), "") : assert_5 @[BundleLiteralSpec.scala 152:23]
      node _T_25 = eq(_T_22, UInt<1>("h0")) @[BundleLiteralSpec.scala 152:23]
      when _T_25 : @[BundleLiteralSpec.scala 152:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:152 chisel3.assert(expandedBundleLit.a.b === true.B)\n") : printf_5 @[BundleLiteralSpec.scala 152:23]
    node _T_26 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 153:44]
    node _T_27 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 153:23]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[BundleLiteralSpec.scala 153:23]
    when _T_28 : @[BundleLiteralSpec.scala 153:23]
      assert(clock, _T_26, UInt<1>("h1"), "") : assert_6 @[BundleLiteralSpec.scala 153:23]
      node _T_29 = eq(_T_26, UInt<1>("h0")) @[BundleLiteralSpec.scala 153:23]
      when _T_29 : @[BundleLiteralSpec.scala 153:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:153 chisel3.assert(expandedBundleLit.f === MyEnum.sB)\n") : printf_6 @[BundleLiteralSpec.scala 153:23]
    node _T_30 = eq(UInt<1>("h0"), UInt<1>("h0")) @[BundleLiteralSpec.scala 154:46]
    node _T_31 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 154:23]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[BundleLiteralSpec.scala 154:23]
    when _T_32 : @[BundleLiteralSpec.scala 154:23]
      assert(clock, _T_30, UInt<1>("h1"), "") : assert_7 @[BundleLiteralSpec.scala 154:23]
      node _T_33 = eq(_T_30, UInt<1>("h0")) @[BundleLiteralSpec.scala 154:23]
      when _T_33 : @[BundleLiteralSpec.scala 154:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:154 chisel3.assert(expandedBundleLit.b.c === false.B)\n") : printf_7 @[BundleLiteralSpec.scala 154:23]
    node _T_34 = eq(UInt<8>("hff"), UInt<8>("hff")) @[BundleLiteralSpec.scala 155:46]
    node _T_35 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 155:23]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[BundleLiteralSpec.scala 155:23]
    when _T_36 : @[BundleLiteralSpec.scala 155:23]
      assert(clock, _T_34, UInt<1>("h1"), "") : assert_8 @[BundleLiteralSpec.scala 155:23]
      node _T_37 = eq(_T_34, UInt<1>("h0")) @[BundleLiteralSpec.scala 155:23]
      when _T_37 : @[BundleLiteralSpec.scala 155:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:155 chisel3.assert(expandedBundleLit.b.d === 255.U)\n") : printf_8 @[BundleLiteralSpec.scala 155:23]
    node _T_38 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 156:46]
    node _T_39 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 156:23]
    node _T_40 = eq(_T_39, UInt<1>("h0")) @[BundleLiteralSpec.scala 156:23]
    when _T_40 : @[BundleLiteralSpec.scala 156:23]
      assert(clock, _T_38, UInt<1>("h1"), "") : assert_9 @[BundleLiteralSpec.scala 156:23]
      node _T_41 = eq(_T_38, UInt<1>("h0")) @[BundleLiteralSpec.scala 156:23]
      when _T_41 : @[BundleLiteralSpec.scala 156:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:156 chisel3.assert(expandedBundleLit.b.e === MyEnum.sB)\n") : printf_9 @[BundleLiteralSpec.scala 156:23]
    node _T_42 = asUInt(UInt<1>("h1")) @[BundleLiteralSpec.scala 160:87]
    node hi_1 = cat(UInt<1>("h0"), UInt<8>("hff")) @[BundleLiteralSpec.scala 160:87]
    node _T_43 = cat(hi_1, _T_42) @[BundleLiteralSpec.scala 160:87]
    node _T_44 = eq(UInt<9>("h1ff"), _T_43) @[BundleLiteralSpec.scala 160:57]
    node _T_45 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 160:23]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[BundleLiteralSpec.scala 160:23]
    when _T_46 : @[BundleLiteralSpec.scala 160:23]
      assert(clock, _T_44, UInt<1>("h1"), "") : assert_10 @[BundleLiteralSpec.scala 160:23]
      node _T_47 = eq(_T_44, UInt<1>("h0")) @[BundleLiteralSpec.scala 160:23]
      when _T_47 : @[BundleLiteralSpec.scala 160:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:160 chisel3.assert(expandedBundleLit.b.litValue().U === expandedBundleLit.b.asUInt())\n") : printf_10 @[BundleLiteralSpec.scala 160:23]
    node _T_48 = eq(UInt<1>("h0"), UInt<1>("h0")) @[BundleLiteralSpec.scala 166:43]
    node _T_49 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 166:23]
    node _T_50 = eq(_T_49, UInt<1>("h0")) @[BundleLiteralSpec.scala 166:23]
    when _T_50 : @[BundleLiteralSpec.scala 166:23]
      assert(clock, _T_48, UInt<1>("h1"), "") : assert_11 @[BundleLiteralSpec.scala 166:23]
      node _T_51 = eq(_T_48, UInt<1>("h0")) @[BundleLiteralSpec.scala 166:23]
      when _T_51 : @[BundleLiteralSpec.scala 166:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:166 chisel3.assert(childBundleLit.b.c === false.B)\n") : printf_11 @[BundleLiteralSpec.scala 166:23]
    node _T_52 = eq(UInt<8>("hff"), UInt<8>("hff")) @[BundleLiteralSpec.scala 167:43]
    node _T_53 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 167:23]
    node _T_54 = eq(_T_53, UInt<1>("h0")) @[BundleLiteralSpec.scala 167:23]
    when _T_54 : @[BundleLiteralSpec.scala 167:23]
      assert(clock, _T_52, UInt<1>("h1"), "") : assert_12 @[BundleLiteralSpec.scala 167:23]
      node _T_55 = eq(_T_52, UInt<1>("h0")) @[BundleLiteralSpec.scala 167:23]
      when _T_55 : @[BundleLiteralSpec.scala 167:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:167 chisel3.assert(childBundleLit.b.d === 255.U)\n") : printf_12 @[BundleLiteralSpec.scala 167:23]
    node _T_56 = eq(UInt<1>("h1"), UInt<1>("h1")) @[BundleLiteralSpec.scala 168:43]
    node _T_57 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 168:23]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[BundleLiteralSpec.scala 168:23]
    when _T_58 : @[BundleLiteralSpec.scala 168:23]
      assert(clock, _T_56, UInt<1>("h1"), "") : assert_13 @[BundleLiteralSpec.scala 168:23]
      node _T_59 = eq(_T_56, UInt<1>("h0")) @[BundleLiteralSpec.scala 168:23]
      when _T_59 : @[BundleLiteralSpec.scala 168:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:168 chisel3.assert(childBundleLit.b.e === MyEnum.sB)\n") : printf_13 @[BundleLiteralSpec.scala 168:23]
    node _T_60 = asUInt(UInt<1>("h1")) @[BundleLiteralSpec.scala 171:81]
    node hi_2 = cat(UInt<1>("h0"), UInt<8>("hff")) @[BundleLiteralSpec.scala 171:81]
    node _T_61 = cat(hi_2, _T_60) @[BundleLiteralSpec.scala 171:81]
    node _T_62 = eq(UInt<9>("h1ff"), _T_61) @[BundleLiteralSpec.scala 171:54]
    node _T_63 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 171:23]
    node _T_64 = eq(_T_63, UInt<1>("h0")) @[BundleLiteralSpec.scala 171:23]
    when _T_64 : @[BundleLiteralSpec.scala 171:23]
      assert(clock, _T_62, UInt<1>("h1"), "") : assert_14 @[BundleLiteralSpec.scala 171:23]
      node _T_65 = eq(_T_62, UInt<1>("h0")) @[BundleLiteralSpec.scala 171:23]
      when _T_65 : @[BundleLiteralSpec.scala 171:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleLiteralSpec.scala:171 chisel3.assert(childBundleLit.b.litValue().U === childBundleLit.b.asUInt())\n") : printf_14 @[BundleLiteralSpec.scala 171:23]
    node _T_66 = bits(reset, 0, 0) @[BundleLiteralSpec.scala 173:13]
    node _T_67 = eq(_T_66, UInt<1>("h0")) @[BundleLiteralSpec.scala 173:13]
    when _T_67 : @[BundleLiteralSpec.scala 173:13]
      stop(clock, UInt<1>("h1"), 0) : stop @[BundleLiteralSpec.scala 173:13]
