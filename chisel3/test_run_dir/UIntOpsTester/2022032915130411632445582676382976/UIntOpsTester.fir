circuit UIntOpsTester :
  module UIntOps :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<32>, flip b : UInt<32>, addout : UInt<32>, subout : UInt<32>, addampout : UInt<33>, subampout : UInt<33>, timesout : UInt<32>, divout : UInt<32>, modout : UInt<32>, lshiftout : UInt<32>, rshiftout : UInt<32>, lrotateout : UInt<32>, rrotateout : UInt<32>, lessout : UInt<1>, greatout : UInt<1>, eqout : UInt<1>, noteqout : UInt<1>, lesseqout : UInt<1>, greateqout : UInt<1>}

    node _io_addout_T = add(io.a, io.b) @[UIntOps.scala 41:18]
    node _io_addout_T_1 = tail(_io_addout_T, 1) @[UIntOps.scala 41:18]
    io.addout <= _io_addout_T_1 @[UIntOps.scala 41:13]
    node _io_subout_T = sub(io.a, io.b) @[UIntOps.scala 42:18]
    node _io_subout_T_1 = tail(_io_subout_T, 1) @[UIntOps.scala 42:18]
    io.subout <= _io_subout_T_1 @[UIntOps.scala 42:13]
    node _io_addampout_T = add(io.a, io.b) @[UIntOps.scala 43:21]
    io.addampout <= _io_addampout_T @[UIntOps.scala 43:16]
    node _io_subampout_T = sub(io.a, io.b) @[UIntOps.scala 44:21]
    node _io_subampout_T_1 = asUInt(_io_subampout_T) @[UIntOps.scala 44:21]
    io.subampout <= _io_subampout_T_1 @[UIntOps.scala 44:16]
    node _io_timesout_T = mul(io.a, io.b) @[UIntOps.scala 45:21]
    node _io_timesout_T_1 = bits(_io_timesout_T, 31, 0) @[UIntOps.scala 45:25]
    io.timesout <= _io_timesout_T_1 @[UIntOps.scala 45:15]
    node _io_divout_T = eq(io.b, UInt<1>("h0")) @[UIntOps.scala 46:26]
    node _io_divout_T_1 = mux(_io_divout_T, UInt<1>("h1"), io.b) @[UIntOps.scala 46:23]
    node _io_divout_T_2 = div(io.a, _io_divout_T_1) @[UIntOps.scala 46:18]
    io.divout <= _io_divout_T_2 @[UIntOps.scala 46:13]
    node _io_modout_T = rem(io.a, io.b) @[UIntOps.scala 47:18]
    io.modout <= _io_modout_T @[UIntOps.scala 47:13]
    node _io_lshiftout_T = bits(io.b, 3, 0) @[UIntOps.scala 48:26]
    node _io_lshiftout_T_1 = dshl(io.a, _io_lshiftout_T) @[UIntOps.scala 48:22]
    node _io_lshiftout_T_2 = bits(_io_lshiftout_T_1, 31, 0) @[UIntOps.scala 48:33]
    io.lshiftout <= _io_lshiftout_T_2 @[UIntOps.scala 48:16]
    node _io_rshiftout_T = dshr(io.a, io.b) @[UIntOps.scala 49:21]
    io.rshiftout <= _io_rshiftout_T @[UIntOps.scala 49:16]
    node _io_lrotateout_T = tail(io.a, 5) @[UIntOps.scala 50:32]
    node _io_lrotateout_T_1 = head(io.a, 5) @[UIntOps.scala 50:32]
    node _io_lrotateout_T_2 = cat(_io_lrotateout_T, _io_lrotateout_T_1) @[UIntOps.scala 50:32]
    io.lrotateout <= _io_lrotateout_T_2 @[UIntOps.scala 50:17]
    node _io_rrotateout_T = bits(io.a, 4, 0) @[UIntOps.scala 51:33]
    node _io_rrotateout_T_1 = shr(io.a, 5) @[UIntOps.scala 51:33]
    node _io_rrotateout_T_2 = cat(_io_rrotateout_T, _io_rrotateout_T_1) @[UIntOps.scala 51:33]
    io.rrotateout <= _io_rrotateout_T_2 @[UIntOps.scala 51:17]
    node _io_lessout_T = lt(io.a, io.b) @[UIntOps.scala 52:19]
    io.lessout <= _io_lessout_T @[UIntOps.scala 52:14]
    node _io_greatout_T = gt(io.a, io.b) @[UIntOps.scala 53:20]
    io.greatout <= _io_greatout_T @[UIntOps.scala 53:15]
    node _io_eqout_T = eq(io.a, io.b) @[UIntOps.scala 54:17]
    io.eqout <= _io_eqout_T @[UIntOps.scala 54:12]
    node _io_noteqout_T = neq(io.a, io.b) @[UIntOps.scala 55:21]
    io.noteqout <= _io_noteqout_T @[UIntOps.scala 55:15]
    node _io_lesseqout_T = leq(io.a, io.b) @[UIntOps.scala 56:21]
    io.lesseqout <= _io_lesseqout_T @[UIntOps.scala 56:16]
    node _io_greateqout_T = geq(io.a, io.b) @[UIntOps.scala 57:22]
    io.greateqout <= _io_greateqout_T @[UIntOps.scala 57:17]

  module UIntOpsTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst dut of UIntOps @[UIntOps.scala 64:19]
    dut.clock <= clock
    dut.reset <= reset
    dut.io.a <= UInt<32>("h7b") @[UIntOps.scala 65:12]
    dut.io.b <= UInt<32>("h7") @[UIntOps.scala 66:12]
    node _T = eq(dut.io.addout, UInt<32>("h82")) @[UIntOps.scala 68:24]
    node _T_1 = bits(reset, 0, 0) @[UIntOps.scala 68:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[UIntOps.scala 68:9]
    when _T_2 : @[UIntOps.scala 68:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[UIntOps.scala 68:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[UIntOps.scala 68:9]
      when _T_3 : @[UIntOps.scala 68:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:68 assert(dut.io.addout === (a + b).U(32.W))\n") : printf @[UIntOps.scala 68:9]
    node _T_4 = asUInt(asSInt(UInt<32>("h74"))) @[UIntOps.scala 69:44]
    node _T_5 = eq(dut.io.subout, _T_4) @[UIntOps.scala 69:24]
    node _T_6 = bits(reset, 0, 0) @[UIntOps.scala 69:9]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[UIntOps.scala 69:9]
    when _T_7 : @[UIntOps.scala 69:9]
      assert(clock, _T_5, UInt<1>("h1"), "") : assert_1 @[UIntOps.scala 69:9]
      node _T_8 = eq(_T_5, UInt<1>("h0")) @[UIntOps.scala 69:9]
      when _T_8 : @[UIntOps.scala 69:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:69 assert(dut.io.subout === (a - b).S(32.W).asUInt)\n") : printf_1 @[UIntOps.scala 69:9]
    node _T_9 = eq(dut.io.addampout, UInt<33>("h82")) @[UIntOps.scala 70:27]
    node _T_10 = bits(reset, 0, 0) @[UIntOps.scala 70:9]
    node _T_11 = eq(_T_10, UInt<1>("h0")) @[UIntOps.scala 70:9]
    when _T_11 : @[UIntOps.scala 70:9]
      assert(clock, _T_9, UInt<1>("h1"), "") : assert_2 @[UIntOps.scala 70:9]
      node _T_12 = eq(_T_9, UInt<1>("h0")) @[UIntOps.scala 70:9]
      when _T_12 : @[UIntOps.scala 70:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:70 assert(dut.io.addampout === (a + b).U(33.W))\n") : printf_2 @[UIntOps.scala 70:9]
    node _T_13 = asUInt(asSInt(UInt<33>("h74"))) @[UIntOps.scala 71:47]
    node _T_14 = eq(dut.io.subampout, _T_13) @[UIntOps.scala 71:27]
    node _T_15 = bits(reset, 0, 0) @[UIntOps.scala 71:9]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[UIntOps.scala 71:9]
    when _T_16 : @[UIntOps.scala 71:9]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_3 @[UIntOps.scala 71:9]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[UIntOps.scala 71:9]
      when _T_17 : @[UIntOps.scala 71:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:71 assert(dut.io.subampout === (a - b).S(33.W).asUInt)\n") : printf_3 @[UIntOps.scala 71:9]
    node _T_18 = eq(dut.io.timesout, UInt<32>("h35d")) @[UIntOps.scala 72:26]
    node _T_19 = bits(reset, 0, 0) @[UIntOps.scala 72:9]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[UIntOps.scala 72:9]
    when _T_20 : @[UIntOps.scala 72:9]
      assert(clock, _T_18, UInt<1>("h1"), "") : assert_4 @[UIntOps.scala 72:9]
      node _T_21 = eq(_T_18, UInt<1>("h0")) @[UIntOps.scala 72:9]
      when _T_21 : @[UIntOps.scala 72:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:72 assert(dut.io.timesout === (a * b).U(32.W))\n") : printf_4 @[UIntOps.scala 72:9]
    node _T_22 = eq(dut.io.divout, UInt<32>("h11")) @[UIntOps.scala 73:24]
    node _T_23 = bits(reset, 0, 0) @[UIntOps.scala 73:9]
    node _T_24 = eq(_T_23, UInt<1>("h0")) @[UIntOps.scala 73:9]
    when _T_24 : @[UIntOps.scala 73:9]
      assert(clock, _T_22, UInt<1>("h1"), "") : assert_5 @[UIntOps.scala 73:9]
      node _T_25 = eq(_T_22, UInt<1>("h0")) @[UIntOps.scala 73:9]
      when _T_25 : @[UIntOps.scala 73:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:73 assert(dut.io.divout === (a / (b.max(1))).U(32.W))\n") : printf_5 @[UIntOps.scala 73:9]
    node _T_26 = eq(dut.io.modout, UInt<32>("h4")) @[UIntOps.scala 74:24]
    node _T_27 = bits(reset, 0, 0) @[UIntOps.scala 74:9]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[UIntOps.scala 74:9]
    when _T_28 : @[UIntOps.scala 74:9]
      assert(clock, _T_26, UInt<1>("h1"), "") : assert_6 @[UIntOps.scala 74:9]
      node _T_29 = eq(_T_26, UInt<1>("h0")) @[UIntOps.scala 74:9]
      when _T_29 : @[UIntOps.scala 74:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:74 assert(dut.io.modout === (a %% (b.max(1))).U(32.W))\n") : printf_6 @[UIntOps.scala 74:9]
    node _T_30 = eq(dut.io.lshiftout, UInt<32>("h3d80")) @[UIntOps.scala 75:27]
    node _T_31 = bits(reset, 0, 0) @[UIntOps.scala 75:9]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[UIntOps.scala 75:9]
    when _T_32 : @[UIntOps.scala 75:9]
      assert(clock, _T_30, UInt<1>("h1"), "") : assert_7 @[UIntOps.scala 75:9]
      node _T_33 = eq(_T_30, UInt<1>("h0")) @[UIntOps.scala 75:9]
      when _T_33 : @[UIntOps.scala 75:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:75 assert(dut.io.lshiftout === (a << (b %% 16)).U(32.W))\n") : printf_7 @[UIntOps.scala 75:9]
    node _T_34 = eq(dut.io.rshiftout, UInt<32>("h0")) @[UIntOps.scala 76:27]
    node _T_35 = bits(reset, 0, 0) @[UIntOps.scala 76:9]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[UIntOps.scala 76:9]
    when _T_36 : @[UIntOps.scala 76:9]
      assert(clock, _T_34, UInt<1>("h1"), "") : assert_8 @[UIntOps.scala 76:9]
      node _T_37 = eq(_T_34, UInt<1>("h0")) @[UIntOps.scala 76:9]
      when _T_37 : @[UIntOps.scala 76:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:76 assert(dut.io.rshiftout === (a >> b).U(32.W))\n") : printf_8 @[UIntOps.scala 76:9]
    node _T_38 = eq(dut.io.lrotateout, UInt<32>("hf60")) @[UIntOps.scala 78:23]
    node _T_39 = bits(reset, 0, 0) @[UIntOps.scala 77:9]
    node _T_40 = eq(_T_39, UInt<1>("h0")) @[UIntOps.scala 77:9]
    when _T_40 : @[UIntOps.scala 77:9]
      assert(clock, _T_38, UInt<1>("h1"), "") : assert_9 @[UIntOps.scala 77:9]
      node _T_41 = eq(_T_38, UInt<1>("h0")) @[UIntOps.scala 77:9]
      when _T_41 : @[UIntOps.scala 77:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:77 assert(\n") : printf_9 @[UIntOps.scala 77:9]
    node _T_42 = eq(dut.io.rrotateout, UInt<32>("hd8000003")) @[UIntOps.scala 82:23]
    node _T_43 = bits(reset, 0, 0) @[UIntOps.scala 81:9]
    node _T_44 = eq(_T_43, UInt<1>("h0")) @[UIntOps.scala 81:9]
    when _T_44 : @[UIntOps.scala 81:9]
      assert(clock, _T_42, UInt<1>("h1"), "") : assert_10 @[UIntOps.scala 81:9]
      node _T_45 = eq(_T_42, UInt<1>("h0")) @[UIntOps.scala 81:9]
      when _T_45 : @[UIntOps.scala 81:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:81 assert(\n") : printf_10 @[UIntOps.scala 81:9]
    node _T_46 = eq(dut.io.lessout, UInt<1>("h0")) @[UIntOps.scala 85:25]
    node _T_47 = bits(reset, 0, 0) @[UIntOps.scala 85:9]
    node _T_48 = eq(_T_47, UInt<1>("h0")) @[UIntOps.scala 85:9]
    when _T_48 : @[UIntOps.scala 85:9]
      assert(clock, _T_46, UInt<1>("h1"), "") : assert_11 @[UIntOps.scala 85:9]
      node _T_49 = eq(_T_46, UInt<1>("h0")) @[UIntOps.scala 85:9]
      when _T_49 : @[UIntOps.scala 85:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:85 assert(dut.io.lessout === (a < b).B)\n") : printf_11 @[UIntOps.scala 85:9]
    node _T_50 = eq(dut.io.greatout, UInt<1>("h1")) @[UIntOps.scala 86:26]
    node _T_51 = bits(reset, 0, 0) @[UIntOps.scala 86:9]
    node _T_52 = eq(_T_51, UInt<1>("h0")) @[UIntOps.scala 86:9]
    when _T_52 : @[UIntOps.scala 86:9]
      assert(clock, _T_50, UInt<1>("h1"), "") : assert_12 @[UIntOps.scala 86:9]
      node _T_53 = eq(_T_50, UInt<1>("h0")) @[UIntOps.scala 86:9]
      when _T_53 : @[UIntOps.scala 86:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:86 assert(dut.io.greatout === (a > b).B)\n") : printf_12 @[UIntOps.scala 86:9]
    node _T_54 = eq(dut.io.eqout, UInt<1>("h0")) @[UIntOps.scala 87:23]
    node _T_55 = bits(reset, 0, 0) @[UIntOps.scala 87:9]
    node _T_56 = eq(_T_55, UInt<1>("h0")) @[UIntOps.scala 87:9]
    when _T_56 : @[UIntOps.scala 87:9]
      assert(clock, _T_54, UInt<1>("h1"), "") : assert_13 @[UIntOps.scala 87:9]
      node _T_57 = eq(_T_54, UInt<1>("h0")) @[UIntOps.scala 87:9]
      when _T_57 : @[UIntOps.scala 87:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:87 assert(dut.io.eqout === (a == b).B)\n") : printf_13 @[UIntOps.scala 87:9]
    node _T_58 = eq(dut.io.noteqout, UInt<1>("h1")) @[UIntOps.scala 88:26]
    node _T_59 = bits(reset, 0, 0) @[UIntOps.scala 88:9]
    node _T_60 = eq(_T_59, UInt<1>("h0")) @[UIntOps.scala 88:9]
    when _T_60 : @[UIntOps.scala 88:9]
      assert(clock, _T_58, UInt<1>("h1"), "") : assert_14 @[UIntOps.scala 88:9]
      node _T_61 = eq(_T_58, UInt<1>("h0")) @[UIntOps.scala 88:9]
      when _T_61 : @[UIntOps.scala 88:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:88 assert(dut.io.noteqout === (a != b).B)\n") : printf_14 @[UIntOps.scala 88:9]
    node _T_62 = eq(dut.io.lesseqout, UInt<1>("h0")) @[UIntOps.scala 89:27]
    node _T_63 = bits(reset, 0, 0) @[UIntOps.scala 89:9]
    node _T_64 = eq(_T_63, UInt<1>("h0")) @[UIntOps.scala 89:9]
    when _T_64 : @[UIntOps.scala 89:9]
      assert(clock, _T_62, UInt<1>("h1"), "") : assert_15 @[UIntOps.scala 89:9]
      node _T_65 = eq(_T_62, UInt<1>("h0")) @[UIntOps.scala 89:9]
      when _T_65 : @[UIntOps.scala 89:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:89 assert(dut.io.lesseqout === (a <= b).B)\n") : printf_15 @[UIntOps.scala 89:9]
    node _T_66 = eq(dut.io.greateqout, UInt<1>("h1")) @[UIntOps.scala 90:28]
    node _T_67 = bits(reset, 0, 0) @[UIntOps.scala 90:9]
    node _T_68 = eq(_T_67, UInt<1>("h0")) @[UIntOps.scala 90:9]
    when _T_68 : @[UIntOps.scala 90:9]
      assert(clock, _T_66, UInt<1>("h1"), "") : assert_16 @[UIntOps.scala 90:9]
      node _T_69 = eq(_T_66, UInt<1>("h0")) @[UIntOps.scala 90:9]
      when _T_69 : @[UIntOps.scala 90:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:90 assert(dut.io.greateqout === (a >= b).B)\n") : printf_16 @[UIntOps.scala 90:9]
    node _T_70 = bits(reset, 0, 0) @[UIntOps.scala 92:7]
    node _T_71 = eq(_T_70, UInt<1>("h0")) @[UIntOps.scala 92:7]
    when _T_71 : @[UIntOps.scala 92:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[UIntOps.scala 92:7]
