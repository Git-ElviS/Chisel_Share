circuit Fill2DTester :
  module Fill2DTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire u : UInt<2>[3][4] @[Vec.scala 154:31]
    u[0][0] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[0][1] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[0][2] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[1][0] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[1][1] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[1][2] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[2][0] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[2][1] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[2][2] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[3][0] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[3][1] <= UInt<2>("h3") @[Vec.scala 154:31]
    u[3][2] <= UInt<2>("h3") @[Vec.scala 154:31]
    node _T = eq(u[3][0], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_1 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_2 : @[Vec.scala 123:35]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[Vec.scala 123:35]
      node _T_3 = eq(_T, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_3 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf @[Vec.scala 123:35]
    node _T_4 = eq(u[3][1], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_5 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_6 : @[Vec.scala 123:35]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[Vec.scala 123:35]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_7 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_1 @[Vec.scala 123:35]
    node _T_8 = eq(u[3][2], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_9 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_10 : @[Vec.scala 123:35]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[Vec.scala 123:35]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_11 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_2 @[Vec.scala 123:35]
    node _T_12 = eq(u[2][0], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_13 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_14 : @[Vec.scala 123:35]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[Vec.scala 123:35]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_15 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_3 @[Vec.scala 123:35]
    node _T_16 = eq(u[2][1], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_17 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_18 : @[Vec.scala 123:35]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_4 @[Vec.scala 123:35]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_19 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_4 @[Vec.scala 123:35]
    node _T_20 = eq(u[2][2], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_21 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_22 : @[Vec.scala 123:35]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_5 @[Vec.scala 123:35]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_23 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_5 @[Vec.scala 123:35]
    node _T_24 = eq(u[1][0], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_25 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_26 : @[Vec.scala 123:35]
      assert(clock, _T_24, UInt<1>("h1"), "") : assert_6 @[Vec.scala 123:35]
      node _T_27 = eq(_T_24, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_27 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_6 @[Vec.scala 123:35]
    node _T_28 = eq(u[1][1], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_29 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_30 = eq(_T_29, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_30 : @[Vec.scala 123:35]
      assert(clock, _T_28, UInt<1>("h1"), "") : assert_7 @[Vec.scala 123:35]
      node _T_31 = eq(_T_28, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_31 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_7 @[Vec.scala 123:35]
    node _T_32 = eq(u[1][2], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_33 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_34 : @[Vec.scala 123:35]
      assert(clock, _T_32, UInt<1>("h1"), "") : assert_8 @[Vec.scala 123:35]
      node _T_35 = eq(_T_32, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_35 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_8 @[Vec.scala 123:35]
    node _T_36 = eq(u[0][0], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_37 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_38 = eq(_T_37, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_38 : @[Vec.scala 123:35]
      assert(clock, _T_36, UInt<1>("h1"), "") : assert_9 @[Vec.scala 123:35]
      node _T_39 = eq(_T_36, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_39 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_9 @[Vec.scala 123:35]
    node _T_40 = eq(u[0][1], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_41 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_42 = eq(_T_41, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_42 : @[Vec.scala 123:35]
      assert(clock, _T_40, UInt<1>("h1"), "") : assert_10 @[Vec.scala 123:35]
      node _T_43 = eq(_T_40, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_43 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_10 @[Vec.scala 123:35]
    node _T_44 = eq(u[0][2], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_45 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_46 : @[Vec.scala 123:35]
      assert(clock, _T_44, UInt<1>("h1"), "") : assert_11 @[Vec.scala 123:35]
      node _T_47 = eq(_T_44, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_47 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_11 @[Vec.scala 123:35]
    node _T_48 = bits(reset, 0, 0) @[Vec.scala 158:9]
    node _T_49 = eq(_T_48, UInt<1>("h0")) @[Vec.scala 158:9]
    when _T_49 : @[Vec.scala 158:9]
      stop(clock, UInt<1>("h1"), 0) : stop @[Vec.scala 158:9]
