circuit StrongEnumFSMTester :
  module StrongEnumFSM :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<1>, out : UInt<1>, state : UInt<2>}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[StrongEnum.scala 140:22]
    node _io_out_T = eq(state, UInt<2>("h2")) @[StrongEnum.scala 142:20]
    io.out <= _io_out_T @[StrongEnum.scala 142:10]
    io.state <= state @[StrongEnum.scala 143:12]
    node _T = asUInt(UInt<1>("h0")) @[StrongEnum.scala 145:17]
    node _T_1 = asUInt(state) @[StrongEnum.scala 145:17]
    node _T_2 = eq(_T, _T_1) @[StrongEnum.scala 145:17]
    when _T_2 : @[StrongEnum.scala 145:17]
      when io.in : @[StrongEnum.scala 147:19]
        state <= UInt<1>("h1") @[StrongEnum.scala 148:15]
    else :
      node _T_3 = asUInt(UInt<1>("h1")) @[StrongEnum.scala 145:17]
      node _T_4 = asUInt(state) @[StrongEnum.scala 145:17]
      node _T_5 = eq(_T_3, _T_4) @[StrongEnum.scala 145:17]
      when _T_5 : @[StrongEnum.scala 145:17]
        when io.in : @[StrongEnum.scala 152:19]
          state <= UInt<2>("h2") @[StrongEnum.scala 153:15]
        else :
          state <= UInt<1>("h0") @[StrongEnum.scala 155:15]
      else :
        node _T_6 = asUInt(UInt<2>("h2")) @[StrongEnum.scala 145:17]
        node _T_7 = asUInt(state) @[StrongEnum.scala 145:17]
        node _T_8 = eq(_T_6, _T_7) @[StrongEnum.scala 145:17]
        when _T_8 : @[StrongEnum.scala 145:17]
          node _T_9 = eq(io.in, UInt<1>("h0")) @[StrongEnum.scala 159:12]
          when _T_9 : @[StrongEnum.scala 159:20]
            state <= UInt<1>("h0") @[StrongEnum.scala 160:15]

  module StrongEnumFSMTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst dut of StrongEnumFSM @[StrongEnum.scala 288:19]
    dut.clock <= clock
    dut.reset <= reset
    wire inputs : UInt<1>[10] @[StrongEnum.scala 291:34]
    inputs[0] <= UInt<1>("h0") @[StrongEnum.scala 291:34]
    inputs[1] <= UInt<1>("h1") @[StrongEnum.scala 291:34]
    inputs[2] <= UInt<1>("h0") @[StrongEnum.scala 291:34]
    inputs[3] <= UInt<1>("h1") @[StrongEnum.scala 291:34]
    inputs[4] <= UInt<1>("h1") @[StrongEnum.scala 291:34]
    inputs[5] <= UInt<1>("h1") @[StrongEnum.scala 291:34]
    inputs[6] <= UInt<1>("h0") @[StrongEnum.scala 291:34]
    inputs[7] <= UInt<1>("h1") @[StrongEnum.scala 291:34]
    inputs[8] <= UInt<1>("h1") @[StrongEnum.scala 291:34]
    inputs[9] <= UInt<1>("h0") @[StrongEnum.scala 291:34]
    wire expected : UInt<1>[10] @[StrongEnum.scala 293:12]
    expected[0] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[1] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[2] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[3] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[4] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[5] <= UInt<1>("h1") @[StrongEnum.scala 293:12]
    expected[6] <= UInt<1>("h1") @[StrongEnum.scala 293:12]
    expected[7] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[8] <= UInt<1>("h0") @[StrongEnum.scala 293:12]
    expected[9] <= UInt<1>("h1") @[StrongEnum.scala 293:12]
    wire expected_state : UInt<2>[10] @[StrongEnum.scala 294:31]
    expected_state[0] <= UInt<1>("h0") @[StrongEnum.scala 294:31]
    expected_state[1] <= UInt<1>("h0") @[StrongEnum.scala 294:31]
    expected_state[2] <= UInt<1>("h1") @[StrongEnum.scala 294:31]
    expected_state[3] <= UInt<1>("h0") @[StrongEnum.scala 294:31]
    expected_state[4] <= UInt<1>("h1") @[StrongEnum.scala 294:31]
    expected_state[5] <= UInt<2>("h2") @[StrongEnum.scala 294:31]
    expected_state[6] <= UInt<2>("h2") @[StrongEnum.scala 294:31]
    expected_state[7] <= UInt<1>("h0") @[StrongEnum.scala 294:31]
    expected_state[8] <= UInt<1>("h1") @[StrongEnum.scala 294:31]
    expected_state[9] <= UInt<2>("h2") @[StrongEnum.scala 294:31]
    reg value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 62:40]
    dut.io.in <= inputs[value] @[StrongEnum.scala 299:13]
    node _T = eq(dut.io.out, expected[value]) @[StrongEnum.scala 300:21]
    node _T_1 = bits(reset, 0, 0) @[StrongEnum.scala 300:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[StrongEnum.scala 300:9]
    when _T_2 : @[StrongEnum.scala 300:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[StrongEnum.scala 300:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[StrongEnum.scala 300:9]
      when _T_3 : @[StrongEnum.scala 300:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at StrongEnum.scala:300 assert(dut.io.out === expected(cycle))\n") : printf @[StrongEnum.scala 300:9]
    node _T_4 = eq(dut.io.state, expected_state[value]) @[StrongEnum.scala 301:23]
    node _T_5 = bits(reset, 0, 0) @[StrongEnum.scala 301:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[StrongEnum.scala 301:9]
    when _T_6 : @[StrongEnum.scala 301:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[StrongEnum.scala 301:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[StrongEnum.scala 301:9]
      when _T_7 : @[StrongEnum.scala 301:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at StrongEnum.scala:301 assert(dut.io.state === expected_state(cycle))\n") : printf_1 @[StrongEnum.scala 301:9]
    node wrap = eq(value, UInt<4>("h9")) @[Counter.scala 74:24]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 78:24]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 78:24]
    value <= _value_T_1 @[Counter.scala 78:15]
    when wrap : @[Counter.scala 88:20]
      value <= UInt<1>("h0") @[Counter.scala 88:28]
    when wrap : @[StrongEnum.scala 303:20]
      node _T_8 = bits(reset, 0, 0) @[StrongEnum.scala 304:9]
      node _T_9 = eq(_T_8, UInt<1>("h0")) @[StrongEnum.scala 304:9]
      when _T_9 : @[StrongEnum.scala 304:9]
        stop(clock, UInt<1>("h1"), 0) : stop @[StrongEnum.scala 304:9]
