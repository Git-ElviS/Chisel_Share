circuit BundleWireTester :
  module BundleWire :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { x : UInt<32>, y : UInt<32>}, outs : { x : UInt<32>, y : UInt<32>}[4]}

    wire coords : { x : UInt<32>, y : UInt<32>}[4] @[BundleWire.scala 17:20]
    coords[0] <= io.in @[BundleWire.scala 19:15]
    io.outs[0] <= coords[0] @[BundleWire.scala 20:16]
    coords[1] <= io.in @[BundleWire.scala 19:15]
    io.outs[1] <= coords[1] @[BundleWire.scala 20:16]
    coords[2] <= io.in @[BundleWire.scala 19:15]
    io.outs[2] <= coords[2] @[BundleWire.scala 20:16]
    coords[3] <= io.in @[BundleWire.scala 19:15]
    io.outs[3] <= coords[3] @[BundleWire.scala 20:16]

  module BundleWireTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst dut of BundleWire @[BundleWire.scala 46:19]
    dut.clock <= clock
    dut.reset <= reset
    dut.io.in.x <= UInt<29>("h1f3910da") @[BundleWire.scala 47:15]
    dut.io.in.y <= UInt<30>("h21b2962a") @[BundleWire.scala 48:15]
    node _T = eq(dut.io.outs[0].x, UInt<29>("h1f3910da")) @[BundleWire.scala 50:18]
    node _T_1 = bits(reset, 0, 0) @[BundleWire.scala 50:11]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[BundleWire.scala 50:11]
    when _T_2 : @[BundleWire.scala 50:11]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[BundleWire.scala 50:11]
      node _T_3 = eq(_T, UInt<1>("h0")) @[BundleWire.scala 50:11]
      when _T_3 : @[BundleWire.scala 50:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:50 assert(elt.x === x.asUInt)\n") : printf @[BundleWire.scala 50:11]
    node _T_4 = eq(dut.io.outs[0].y, UInt<30>("h21b2962a")) @[BundleWire.scala 51:18]
    node _T_5 = bits(reset, 0, 0) @[BundleWire.scala 51:11]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[BundleWire.scala 51:11]
    when _T_6 : @[BundleWire.scala 51:11]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[BundleWire.scala 51:11]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[BundleWire.scala 51:11]
      when _T_7 : @[BundleWire.scala 51:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:51 assert(elt.y === y.asUInt)\n") : printf_1 @[BundleWire.scala 51:11]
    node _T_8 = eq(dut.io.outs[1].x, UInt<29>("h1f3910da")) @[BundleWire.scala 50:18]
    node _T_9 = bits(reset, 0, 0) @[BundleWire.scala 50:11]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[BundleWire.scala 50:11]
    when _T_10 : @[BundleWire.scala 50:11]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[BundleWire.scala 50:11]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[BundleWire.scala 50:11]
      when _T_11 : @[BundleWire.scala 50:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:50 assert(elt.x === x.asUInt)\n") : printf_2 @[BundleWire.scala 50:11]
    node _T_12 = eq(dut.io.outs[1].y, UInt<30>("h21b2962a")) @[BundleWire.scala 51:18]
    node _T_13 = bits(reset, 0, 0) @[BundleWire.scala 51:11]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[BundleWire.scala 51:11]
    when _T_14 : @[BundleWire.scala 51:11]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[BundleWire.scala 51:11]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[BundleWire.scala 51:11]
      when _T_15 : @[BundleWire.scala 51:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:51 assert(elt.y === y.asUInt)\n") : printf_3 @[BundleWire.scala 51:11]
    node _T_16 = eq(dut.io.outs[2].x, UInt<29>("h1f3910da")) @[BundleWire.scala 50:18]
    node _T_17 = bits(reset, 0, 0) @[BundleWire.scala 50:11]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[BundleWire.scala 50:11]
    when _T_18 : @[BundleWire.scala 50:11]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_4 @[BundleWire.scala 50:11]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[BundleWire.scala 50:11]
      when _T_19 : @[BundleWire.scala 50:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:50 assert(elt.x === x.asUInt)\n") : printf_4 @[BundleWire.scala 50:11]
    node _T_20 = eq(dut.io.outs[2].y, UInt<30>("h21b2962a")) @[BundleWire.scala 51:18]
    node _T_21 = bits(reset, 0, 0) @[BundleWire.scala 51:11]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[BundleWire.scala 51:11]
    when _T_22 : @[BundleWire.scala 51:11]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_5 @[BundleWire.scala 51:11]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[BundleWire.scala 51:11]
      when _T_23 : @[BundleWire.scala 51:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:51 assert(elt.y === y.asUInt)\n") : printf_5 @[BundleWire.scala 51:11]
    node _T_24 = eq(dut.io.outs[3].x, UInt<29>("h1f3910da")) @[BundleWire.scala 50:18]
    node _T_25 = bits(reset, 0, 0) @[BundleWire.scala 50:11]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[BundleWire.scala 50:11]
    when _T_26 : @[BundleWire.scala 50:11]
      assert(clock, _T_24, UInt<1>("h1"), "") : assert_6 @[BundleWire.scala 50:11]
      node _T_27 = eq(_T_24, UInt<1>("h0")) @[BundleWire.scala 50:11]
      when _T_27 : @[BundleWire.scala 50:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:50 assert(elt.x === x.asUInt)\n") : printf_6 @[BundleWire.scala 50:11]
    node _T_28 = eq(dut.io.outs[3].y, UInt<30>("h21b2962a")) @[BundleWire.scala 51:18]
    node _T_29 = bits(reset, 0, 0) @[BundleWire.scala 51:11]
    node _T_30 = eq(_T_29, UInt<1>("h0")) @[BundleWire.scala 51:11]
    when _T_30 : @[BundleWire.scala 51:11]
      assert(clock, _T_28, UInt<1>("h1"), "") : assert_7 @[BundleWire.scala 51:11]
      node _T_31 = eq(_T_28, UInt<1>("h0")) @[BundleWire.scala 51:11]
      when _T_31 : @[BundleWire.scala 51:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at BundleWire.scala:51 assert(elt.y === y.asUInt)\n") : printf_7 @[BundleWire.scala 51:11]
    node _T_32 = bits(reset, 0, 0) @[BundleWire.scala 53:7]
    node _T_33 = eq(_T_32, UInt<1>("h0")) @[BundleWire.scala 53:7]
    when _T_33 : @[BundleWire.scala 53:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[BundleWire.scala 53:7]
