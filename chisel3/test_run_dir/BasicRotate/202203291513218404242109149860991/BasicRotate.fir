circuit BasicRotate :
  module MaxPeriodFibonacciLFSR :
    input clock : Clock
    input reset : Reset
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[4]}, flip increment : UInt<1>, out : UInt<1>[4]}

    wire _state_WIRE : UInt<1>[4] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    reg state : UInt<1>[4], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      node _T = xor(state[3], state[2]) @[LFSR.scala 15:41]
      state[0] <= _T @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module BasicRotate :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst shiftAmount_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 91:22]
    shiftAmount_prng.clock <= clock
    shiftAmount_prng.reset <= reset
    shiftAmount_prng.io.seed.valid <= UInt<1>("h0") @[PRNG.scala 92:24]
    shiftAmount_prng.io.seed.bits[0] is invalid @[PRNG.scala 93:23]
    shiftAmount_prng.io.seed.bits[1] is invalid @[PRNG.scala 93:23]
    shiftAmount_prng.io.seed.bits[2] is invalid @[PRNG.scala 93:23]
    shiftAmount_prng.io.seed.bits[3] is invalid @[PRNG.scala 93:23]
    shiftAmount_prng.io.increment <= UInt<1>("h1") @[PRNG.scala 94:23]
    node shiftAmount_lo = cat(shiftAmount_prng.io.out[1], shiftAmount_prng.io.out[0]) @[PRNG.scala 95:17]
    node shiftAmount_hi = cat(shiftAmount_prng.io.out[3], shiftAmount_prng.io.out[2]) @[PRNG.scala 95:17]
    node shiftAmount = cat(shiftAmount_hi, shiftAmount_lo) @[PRNG.scala 95:17]
    reg ctr : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[UIntOps.scala 118:20]
    node _rotL_T = bits(shiftAmount, 0, 0) @[UIntOps.scala 120:33]
    node _rotL_T_1 = bits(shiftAmount, 1, 1) @[UIntOps.scala 120:33]
    node _rotL_T_2 = bits(shiftAmount, 2, 2) @[UIntOps.scala 120:33]
    node _rotL_T_3 = bits(shiftAmount, 3, 3) @[UIntOps.scala 120:33]
    node _rotL_T_4 = tail(UInt<3>("h1"), 1) @[UIntOps.scala 120:33]
    node _rotL_T_5 = head(UInt<3>("h1"), 1) @[UIntOps.scala 120:33]
    node _rotL_T_6 = cat(_rotL_T_4, _rotL_T_5) @[UIntOps.scala 120:33]
    node _rotL_T_7 = mux(_rotL_T, _rotL_T_6, UInt<3>("h1")) @[UIntOps.scala 120:33]
    node _rotL_T_8 = tail(_rotL_T_7, 2) @[UIntOps.scala 120:33]
    node _rotL_T_9 = head(_rotL_T_7, 2) @[UIntOps.scala 120:33]
    node _rotL_T_10 = cat(_rotL_T_8, _rotL_T_9) @[UIntOps.scala 120:33]
    node _rotL_T_11 = mux(_rotL_T_1, _rotL_T_10, _rotL_T_7) @[UIntOps.scala 120:33]
    node _rotL_T_12 = tail(_rotL_T_11, 1) @[UIntOps.scala 120:33]
    node _rotL_T_13 = head(_rotL_T_11, 1) @[UIntOps.scala 120:33]
    node _rotL_T_14 = cat(_rotL_T_12, _rotL_T_13) @[UIntOps.scala 120:33]
    node _rotL_T_15 = mux(_rotL_T_2, _rotL_T_14, _rotL_T_11) @[UIntOps.scala 120:33]
    node _rotL_T_16 = tail(_rotL_T_15, 2) @[UIntOps.scala 120:33]
    node _rotL_T_17 = head(_rotL_T_15, 2) @[UIntOps.scala 120:33]
    node _rotL_T_18 = cat(_rotL_T_16, _rotL_T_17) @[UIntOps.scala 120:33]
    node rotL = mux(_rotL_T_3, _rotL_T_18, _rotL_T_15) @[UIntOps.scala 120:33]
    node _rotR_T = bits(shiftAmount, 0, 0) @[UIntOps.scala 121:34]
    node _rotR_T_1 = bits(shiftAmount, 1, 1) @[UIntOps.scala 121:34]
    node _rotR_T_2 = bits(shiftAmount, 2, 2) @[UIntOps.scala 121:34]
    node _rotR_T_3 = bits(shiftAmount, 3, 3) @[UIntOps.scala 121:34]
    node _rotR_T_4 = shr(UInt<3>("h1"), 1) @[UIntOps.scala 121:34]
    node _rotR_T_5 = cat(UInt<1>("h1"), _rotR_T_4) @[UIntOps.scala 121:34]
    node _rotR_T_6 = mux(_rotR_T, _rotR_T_5, UInt<3>("h1")) @[UIntOps.scala 121:34]
    node _rotR_T_7 = bits(_rotR_T_6, 1, 0) @[UIntOps.scala 121:34]
    node _rotR_T_8 = shr(_rotR_T_6, 2) @[UIntOps.scala 121:34]
    node _rotR_T_9 = cat(_rotR_T_7, _rotR_T_8) @[UIntOps.scala 121:34]
    node _rotR_T_10 = mux(_rotR_T_1, _rotR_T_9, _rotR_T_6) @[UIntOps.scala 121:34]
    node _rotR_T_11 = bits(_rotR_T_10, 0, 0) @[UIntOps.scala 121:34]
    node _rotR_T_12 = shr(_rotR_T_10, 1) @[UIntOps.scala 121:34]
    node _rotR_T_13 = cat(_rotR_T_11, _rotR_T_12) @[UIntOps.scala 121:34]
    node _rotR_T_14 = mux(_rotR_T_2, _rotR_T_13, _rotR_T_10) @[UIntOps.scala 121:34]
    node _rotR_T_15 = bits(_rotR_T_14, 1, 0) @[UIntOps.scala 121:34]
    node _rotR_T_16 = shr(_rotR_T_14, 2) @[UIntOps.scala 121:34]
    node _rotR_T_17 = cat(_rotR_T_15, _rotR_T_16) @[UIntOps.scala 121:34]
    node rotR = mux(_rotR_T_3, _rotR_T_17, _rotR_T_14) @[UIntOps.scala 121:34]
    node _T = bits(reset, 0, 0) @[UIntOps.scala 123:9]
    node _T_1 = eq(_T, UInt<1>("h0")) @[UIntOps.scala 123:9]
    when _T_1 : @[UIntOps.scala 123:9]
      printf(clock, UInt<1>("h1"), "Shift amount: %d rotateLeft:%b rotateRight:%b\n", shiftAmount, rotL, rotR) : printf @[UIntOps.scala 123:9]
    node _T_2 = rem(shiftAmount, UInt<2>("h3")) @[UIntOps.scala 125:22]
    node _T_3 = eq(UInt<1>("h0"), _T_2) @[UIntOps.scala 125:29]
    node _T_4 = eq(UInt<2>("h3"), _T_2) @[UIntOps.scala 125:29]
    node _T_5 = or(_T_3, _T_4) @[UIntOps.scala 125:29]
    when _T_5 : @[UIntOps.scala 125:29]
      node _T_6 = eq(rotL, UInt<1>("h1")) @[UIntOps.scala 127:19]
      node _T_7 = bits(reset, 0, 0) @[UIntOps.scala 127:13]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[UIntOps.scala 127:13]
      when _T_8 : @[UIntOps.scala 127:13]
        assert(clock, _T_6, UInt<1>("h1"), "") : assert @[UIntOps.scala 127:13]
        node _T_9 = eq(_T_6, UInt<1>("h0")) @[UIntOps.scala 127:13]
        when _T_9 : @[UIntOps.scala 127:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:127 assert(rotL === \"b001\".U)\n") : printf_1 @[UIntOps.scala 127:13]
      node _T_10 = eq(rotR, UInt<1>("h1")) @[UIntOps.scala 128:19]
      node _T_11 = bits(reset, 0, 0) @[UIntOps.scala 128:13]
      node _T_12 = eq(_T_11, UInt<1>("h0")) @[UIntOps.scala 128:13]
      when _T_12 : @[UIntOps.scala 128:13]
        assert(clock, _T_10, UInt<1>("h1"), "") : assert_1 @[UIntOps.scala 128:13]
        node _T_13 = eq(_T_10, UInt<1>("h0")) @[UIntOps.scala 128:13]
        when _T_13 : @[UIntOps.scala 128:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:128 assert(rotR === \"b001\".U)\n") : printf_2 @[UIntOps.scala 128:13]
    else :
      node _T_14 = eq(UInt<1>("h1"), _T_2) @[UIntOps.scala 125:29]
      when _T_14 : @[UIntOps.scala 125:29]
        node _T_15 = eq(rotL, UInt<2>("h2")) @[UIntOps.scala 131:19]
        node _T_16 = bits(reset, 0, 0) @[UIntOps.scala 131:13]
        node _T_17 = eq(_T_16, UInt<1>("h0")) @[UIntOps.scala 131:13]
        when _T_17 : @[UIntOps.scala 131:13]
          assert(clock, _T_15, UInt<1>("h1"), "") : assert_2 @[UIntOps.scala 131:13]
          node _T_18 = eq(_T_15, UInt<1>("h0")) @[UIntOps.scala 131:13]
          when _T_18 : @[UIntOps.scala 131:13]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:131 assert(rotL === \"b010\".U)\n") : printf_3 @[UIntOps.scala 131:13]
        node _T_19 = eq(rotR, UInt<3>("h4")) @[UIntOps.scala 132:19]
        node _T_20 = bits(reset, 0, 0) @[UIntOps.scala 132:13]
        node _T_21 = eq(_T_20, UInt<1>("h0")) @[UIntOps.scala 132:13]
        when _T_21 : @[UIntOps.scala 132:13]
          assert(clock, _T_19, UInt<1>("h1"), "") : assert_3 @[UIntOps.scala 132:13]
          node _T_22 = eq(_T_19, UInt<1>("h0")) @[UIntOps.scala 132:13]
          when _T_22 : @[UIntOps.scala 132:13]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:132 assert(rotR === \"b100\".U)\n") : printf_4 @[UIntOps.scala 132:13]
      else :
        node _T_23 = eq(UInt<2>("h2"), _T_2) @[UIntOps.scala 125:29]
        when _T_23 : @[UIntOps.scala 125:29]
          node _T_24 = eq(rotL, UInt<3>("h4")) @[UIntOps.scala 135:19]
          node _T_25 = bits(reset, 0, 0) @[UIntOps.scala 135:13]
          node _T_26 = eq(_T_25, UInt<1>("h0")) @[UIntOps.scala 135:13]
          when _T_26 : @[UIntOps.scala 135:13]
            assert(clock, _T_24, UInt<1>("h1"), "") : assert_4 @[UIntOps.scala 135:13]
            node _T_27 = eq(_T_24, UInt<1>("h0")) @[UIntOps.scala 135:13]
            when _T_27 : @[UIntOps.scala 135:13]
              printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:135 assert(rotL === \"b100\".U)\n") : printf_5 @[UIntOps.scala 135:13]
          node _T_28 = eq(rotR, UInt<2>("h2")) @[UIntOps.scala 136:19]
          node _T_29 = bits(reset, 0, 0) @[UIntOps.scala 136:13]
          node _T_30 = eq(_T_29, UInt<1>("h0")) @[UIntOps.scala 136:13]
          when _T_30 : @[UIntOps.scala 136:13]
            assert(clock, _T_28, UInt<1>("h1"), "") : assert_5 @[UIntOps.scala 136:13]
            node _T_31 = eq(_T_28, UInt<1>("h0")) @[UIntOps.scala 136:13]
            when _T_31 : @[UIntOps.scala 136:13]
              printf(clock, UInt<1>("h1"), "Assertion failed\n    at UIntOps.scala:136 assert(rotR === \"b010\".U)\n") : printf_6 @[UIntOps.scala 136:13]
    node _ctr_T = add(ctr, UInt<1>("h1")) @[UIntOps.scala 140:14]
    node _ctr_T_1 = tail(_ctr_T, 1) @[UIntOps.scala 140:14]
    ctr <= _ctr_T_1 @[UIntOps.scala 140:7]
    node _T_32 = eq(ctr, UInt<4>("hf")) @[UIntOps.scala 142:12]
    when _T_32 : @[UIntOps.scala 142:22]
      node _T_33 = bits(reset, 0, 0) @[UIntOps.scala 143:9]
      node _T_34 = eq(_T_33, UInt<1>("h0")) @[UIntOps.scala 143:9]
      when _T_34 : @[UIntOps.scala 143:9]
        stop(clock, UInt<1>("h1"), 0) : stop @[UIntOps.scala 143:9]
