$version Generated by VerilatedVcd $end
$date Tue Mar 29 14:56:49 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 A clock $end
  $var wire  1 B reset $end
  $scope module QueueCloneTester $end
   $var wire  1 % accept $end
   $var wire  1 A clock $end
   $var wire  1 A dut_clock $end
   $var wire 32 ' dut_io_deq_bits [31:0] $end
   $var wire  1 % dut_io_deq_ready $end
   $var wire  1 & dut_io_deq_valid $end
   $var wire  1 # dut_io_enq_ready $end
   $var wire  1 $ dut_io_enq_valid $end
   $var wire  1 B dut_reset $end
   $var wire  1 B reset $end
   $var wire  1 $ start $end
   $scope module dut $end
    $var wire  1 A clock $end
    $var wire 32 ' io_deq_bits [31:0] $end
    $var wire  1 % io_deq_ready $end
    $var wire  1 & io_deq_valid $end
    $var wire  1 # io_enq_ready $end
    $var wire  1 $ io_enq_valid $end
    $var wire  1 A q1_clock $end
    $var wire 32 * q1_io_deq_bits [31:0] $end
    $var wire  1 ( q1_io_deq_ready $end
    $var wire  1 ) q1_io_deq_valid $end
    $var wire 32 C q1_io_enq_bits [31:0] $end
    $var wire  1 # q1_io_enq_ready $end
    $var wire  1 $ q1_io_enq_valid $end
    $var wire  1 B q1_reset $end
    $var wire  1 A q2_io_clock $end
    $var wire 32 ' q2_io_io_deq_bits [31:0] $end
    $var wire  1 % q2_io_io_deq_ready $end
    $var wire  1 & q2_io_io_deq_valid $end
    $var wire 32 * q2_io_io_enq_bits [31:0] $end
    $var wire  1 ( q2_io_io_enq_ready $end
    $var wire  1 ) q2_io_io_enq_valid $end
    $var wire  1 B q2_io_reset $end
    $var wire  1 B reset $end
    $scope module q1 $end
     $var wire  1 A clock $end
     $var wire  1 - deq_ptr_value $end
     $var wire  1 5 do_deq $end
     $var wire  1 4 do_enq $end
     $var wire  1 2 empty $end
     $var wire  1 . enq_ptr_value $end
     $var wire  1 3 full $end
     $var wire 32 * io_deq_bits [31:0] $end
     $var wire  1 ( io_deq_ready $end
     $var wire  1 ) io_deq_valid $end
     $var wire 32 C io_enq_bits [31:0] $end
     $var wire  1 # io_enq_ready $end
     $var wire  1 $ io_enq_valid $end
     $var wire  1 0 maybe_full $end
     $var wire  1 1 ptr_match $end
     $var wire 32 + ram[0] [31:0] $end
     $var wire 32 , ram[1] [31:0] $end
     $var wire  1 . ram_MPORT_addr $end
     $var wire 32 C ram_MPORT_data [31:0] $end
     $var wire  1 / ram_MPORT_en $end
     $var wire  1 D ram_MPORT_mask $end
     $var wire  1 - ram_io_deq_bits_MPORT_addr $end
     $var wire 32 * ram_io_deq_bits_MPORT_data [31:0] $end
     $var wire  1 D ram_io_deq_bits_MPORT_en $end
     $var wire  1 B reset $end
    $upscope $end
    $scope module q2_io $end
     $var wire  1 A clock $end
     $var wire  1 8 deq_ptr_value $end
     $var wire  1 @ do_deq $end
     $var wire  1 ? do_enq $end
     $var wire  1 = empty $end
     $var wire  1 9 enq_ptr_value $end
     $var wire  1 > full $end
     $var wire 32 ' io_deq_bits [31:0] $end
     $var wire  1 % io_deq_ready $end
     $var wire  1 & io_deq_valid $end
     $var wire 32 * io_enq_bits [31:0] $end
     $var wire  1 ( io_enq_ready $end
     $var wire  1 ) io_enq_valid $end
     $var wire  1 ; maybe_full $end
     $var wire  1 < ptr_match $end
     $var wire 32 6 ram[0] [31:0] $end
     $var wire 32 7 ram[1] [31:0] $end
     $var wire  1 9 ram_MPORT_addr $end
     $var wire 32 * ram_MPORT_data [31:0] $end
     $var wire  1 : ram_MPORT_en $end
     $var wire  1 D ram_MPORT_mask $end
     $var wire  1 8 ram_io_deq_bits_MPORT_addr $end
     $var wire 32 ' ram_io_deq_bits_MPORT_data [31:0] $end
     $var wire  1 D ram_io_deq_bits_MPORT_en $end
     $var wire  1 B reset $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
0%
0&
b00000000000000000000000000000000 '
1(
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
0-
0.
0/
00
11
12
03
04
05
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
08
09
0:
0;
1<
1=
0>
0?
0@
0A
1B
b00000000000000000000000000101010 C
1D
#1
1$
1/
14
1A
#2
#3
#4
#5
#6
0A
#7
#8
#9
#10
0B
#11
1)
b00000000000000000000000000101010 *
b00000000000000000000000000101010 +
1.
10
01
02
15
1:
1?
1A
#12
#13
#14
#15
#16
0A
#17
#18
#19
#20
#21
1&
b00000000000000000000000000101010 '
b00000000000000000000000000101010 ,
1-
0.
b00000000000000000000000000101010 6
19
1;
0<
0=
1A
#22
#23
#24
#25
#26
0A
#27
#28
#29
#30
#31
1%
0(
0-
1.
05
b00000000000000000000000000101010 7
09
0:
1<
1>
0?
1@
1A
#32
#33
#34
#35
#36
0A
#37
#38
#39
#40
