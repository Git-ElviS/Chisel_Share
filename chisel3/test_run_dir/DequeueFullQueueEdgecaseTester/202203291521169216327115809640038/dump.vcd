$version Generated by VerilatedVcd $end
$date Tue Mar 29 15:21:34 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 @ clock $end
  $var wire  1 A reset $end
  $scope module DequeueFullQueueEdgecaseTester $end
   $var wire  1 @ clock $end
   $var wire  3 , currQCnt [2:0] $end
   $var wire  1 & flush $end
   $var wire  1 - flushRegister $end
   $var wire  5 + outCnt [4:0] $end
   $var wire  1 @ q_clock $end
   $var wire  3 ) q_io_count [2:0] $end
   $var wire  2 ( q_io_deq_bits [1:0] $end
   $var wire  1 & q_io_deq_ready $end
   $var wire  1 ' q_io_deq_valid $end
   $var wire  2 % q_io_enq_bits [1:0] $end
   $var wire  1 # q_io_enq_ready $end
   $var wire  1 $ q_io_enq_valid $end
   $var wire  1 & q_io_flush $end
   $var wire  1 A q_reset $end
   $var wire  1 A reset $end
   $var wire  5 * value [4:0] $end
   $var wire  1 . wrap $end
   $scope module q $end
    $var wire  1 @ clock $end
    $var wire  3 4 deq_ptr_value [2:0] $end
    $var wire  1 < do_deq $end
    $var wire  1 ; do_enq $end
    $var wire  1 9 empty $end
    $var wire  3 5 enq_ptr_value [2:0] $end
    $var wire  1 : full $end
    $var wire  3 ) io_count [2:0] $end
    $var wire  2 ( io_deq_bits [1:0] $end
    $var wire  1 & io_deq_ready $end
    $var wire  1 ' io_deq_valid $end
    $var wire  2 % io_enq_bits [1:0] $end
    $var wire  1 # io_enq_ready $end
    $var wire  1 $ io_enq_valid $end
    $var wire  1 & io_flush $end
    $var wire  1 7 maybe_full $end
    $var wire  3 ? ptr_diff [2:0] $end
    $var wire  1 8 ptr_match $end
    $var wire  2 / ram[0] [1:0] $end
    $var wire  2 0 ram[1] [1:0] $end
    $var wire  2 1 ram[2] [1:0] $end
    $var wire  2 2 ram[3] [1:0] $end
    $var wire  2 3 ram[4] [1:0] $end
    $var wire  3 5 ram_MPORT_addr [2:0] $end
    $var wire  2 % ram_MPORT_data [1:0] $end
    $var wire  1 6 ram_MPORT_en $end
    $var wire  1 B ram_MPORT_mask $end
    $var wire  3 4 ram_io_deq_bits_MPORT_addr [2:0] $end
    $var wire  2 ( ram_io_deq_bits_MPORT_data [1:0] $end
    $var wire  1 B ram_io_deq_bits_MPORT_en $end
    $var wire  1 A reset $end
    $var wire  1 = wrap $end
    $var wire  1 > wrap_1 $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
1$
b11 %
0&
0'
b00 (
b000 )
b00000 *
b00000 +
b000 ,
0-
0.
b00 /
b00 0
b00 1
b00 2
b00 3
b000 4
b000 5
16
07
18
19
0:
1;
0<
0=
0>
b000 ?
0@
1A
1B
#1
b11 (
b11 /
1@
#2
#3
#4
#5
#6
0@
#7
#8
#9
#10
0A
#11
1'
b001 )
b00001 *
b001 ,
b001 5
17
08
09
b001 ?
1@
#12
#13
#14
#15
#16
0@
#17
#18
#19
#20
#21
b10 %
1&
b010 )
b00010 *
b010 ,
b11 0
b010 5
1<
b010 ?
1@
#22
#23
#24
#25
#26
0@
#27
#28
#29
#30
#31
0$
b11 %
0&
0'
b000 )
b00011 *
b00011 +
b000 ,
1-
b10 1
b000 5
06
07
18
19
0;
0<
b000 ?
1@
#32
#33
#34
#35
#36
0@
#37
#38
#39
#40
#41
1$
0-
16
1;
1@
#42
#43
#44
#45
#46
0@
#47
#48
#49
#50
#51
b01 %
1'
b001 )
b00100 *
b001 ,
b001 5
17
08
09
b001 ?
1@
#52
#53
#54
#55
#56
0@
#57
#58
#59
#60
#61
1&
b010 )
b00101 *
b010 ,
b01 0
b010 5
1<
b010 ?
1@
#62
#63
#64
#65
#66
0@
#67
#68
#69
#70
#71
0$
b00 %
0&
0'
b000 )
b00110 *
b00110 +
b000 ,
1-
b01 1
b000 5
06
07
18
19
0;
0<
b000 ?
1@
#72
#73
#74
#75
#76
0@
#77
#78
#79
#80
#81
1$
0-
16
1;
1@
#82
#83
#84
#85
#86
0@
#87
#88
#89
#90
#91
b01 %
1'
b00 (
b001 )
b00111 *
b001 ,
b00 /
b001 5
17
08
09
b001 ?
1@
#92
#93
#94
#95
#96
0@
#97
#98
#99
#100
#101
b10 %
1&
b010 )
b01000 *
b010 ,
b010 5
1<
b010 ?
1@
#102
#103
#104
#105
#106
0@
#107
#108
#109
#110
#111
0$
b11 %
0&
0'
b000 )
b01001 *
b01001 +
b000 ,
1-
b10 1
b000 5
06
07
18
19
0;
0<
b000 ?
1@
#112
#113
#114
#115
#116
0@
#117
#118
#119
#120
#121
1$
0-
16
1;
1@
#122
#123
#124
#125
#126
0@
#127
#128
#129
#130
#131
b01 %
1'
b11 (
b001 )
b01010 *
b001 ,
b11 /
b001 5
17
08
09
b001 ?
1@
#132
#133
#134
#135
#136
0@
#137
#138
#139
#140
#141
1&
b010 )
b01011 *
b010 ,
b010 5
1<
b010 ?
1@
#142
#143
#144
#145
#146
0@
#147
#148
#149
#150
#151
0$
0&
0'
b000 )
b01100 *
b01100 +
b000 ,
1-
b01 1
b000 5
06
07
18
19
0;
0<
b000 ?
1@
#152
#153
#154
#155
#156
0@
#157
#158
#159
#160
#161
1$
0-
16
1;
1@
#162
#163
#164
#165
#166
0@
#167
#168
#169
#170
#171
1'
b01 (
b001 )
b01101 *
b001 ,
b01 /
b001 5
17
08
09
b001 ?
1@
#172
#173
#174
#175
#176
0@
#177
#178
#179
#180
#181
b00 %
1&
b010 )
b01110 *
b010 ,
b010 5
1<
b010 ?
1@
#182
#183
#184
#185
#186
0@
#187
#188
#189
#190
#191
0$
b11 %
0&
0'
b000 )
b01111 *
b01111 +
b000 ,
1-
b00 1
b000 5
06
07
18
19
0;
0<
b000 ?
1@
#192
#193
#194
#195
#196
0@
#197
#198
#199
#200
#201
1$
0-
16
1;
1@
#202
#203
#204
#205
#206
0@
#207
#208
#209
#210
#211
b10 %
1'
b11 (
b001 )
b10000 *
b001 ,
b11 /
b001 5
17
08
09
b001 ?
1@
#212
#213
#214
#215
#216
0@
#217
#218
#219
#220
#221
b01 %
1&
b010 )
b10001 *
b010 ,
b10 0
b010 5
1<
b010 ?
1@
#222
#223
#224
#225
#226
0@
#227
#228
#229
#230
#231
0$
0&
0'
b000 )
b10010 *
b10010 +
b000 ,
1-
b01 1
b000 5
06
07
18
19
0;
0<
b000 ?
1@
#232
#233
#234
#235
#236
0@
#237
#238
#239
#240
#241
1$
0-
16
1;
1@
#242
#243
#244
#245
#246
0@
#247
#248
#249
#250
#251
b11 %
1'
b01 (
b001 )
b10011 *
b001 ,
b01 /
b001 5
17
08
09
b001 ?
1@
#252
#253
#254
#255
#256
0@
#257
#258
#259
#260
#261
1&
b010 )
b10100 *
b010 ,
1.
b11 0
b010 5
1<
b010 ?
1@
#262
#263
#264
#265
#266
0@
#267
#268
#269
#270
