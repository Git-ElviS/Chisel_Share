circuit IntervalChainedSubTester :
  module IntervalChainedSubTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire intervalResult1 : Interval.0 @[IntervalSpec.scala 397:29]
    wire intervalResult2 : Interval.0 @[IntervalSpec.scala 398:29]
    wire uIntResult : UInt @[IntervalSpec.scala 399:24]
    wire sIntResult : SInt @[IntervalSpec.scala 400:24]
    wire fixedResult : Fixed @[IntervalSpec.scala 401:25]
    node _intervalResult1_T = sub(asInterval(UInt<6>("h11"), 17, 17, 0), asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 403:27]
    node _intervalResult1_T_1 = sub(_intervalResult1_T, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 403:33]
    node _intervalResult1_T_2 = sub(_intervalResult1_T_1, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 403:39]
    node _intervalResult1_T_3 = sub(_intervalResult1_T_2, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 403:45]
    node _intervalResult1_T_4 = sub(_intervalResult1_T_3, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 403:51]
    node _intervalResult1_T_5 = sub(_intervalResult1_T_4, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 403:57]
    intervalResult1 <= _intervalResult1_T_5 @[IntervalSpec.scala 403:19]
    node _intervalResult2_T = sub(asInterval(UInt<6>("h11"), 17, 17, 0), asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 404:27]
    node _intervalResult2_T_1 = sub(_intervalResult2_T, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 404:34]
    node _intervalResult2_T_2 = sub(_intervalResult2_T_1, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 404:41]
    node _intervalResult2_T_3 = sub(_intervalResult2_T_2, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 404:48]
    node _intervalResult2_T_4 = sub(_intervalResult2_T_3, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 404:55]
    node _intervalResult2_T_5 = sub(_intervalResult2_T_4, asInterval(UInt<3>("h2"), 2, 2, 0)) @[IntervalSpec.scala 404:62]
    intervalResult2 <= _intervalResult2_T_5 @[IntervalSpec.scala 404:19]
    node _uIntResult_T = sub(UInt<5>("h11"), UInt<2>("h2")) @[IntervalSpec.scala 405:22]
    node _uIntResult_T_1 = asUInt(_uIntResult_T) @[IntervalSpec.scala 405:22]
    node _uIntResult_T_2 = sub(_uIntResult_T_1, UInt<2>("h2")) @[IntervalSpec.scala 405:29]
    node _uIntResult_T_3 = asUInt(_uIntResult_T_2) @[IntervalSpec.scala 405:29]
    node _uIntResult_T_4 = sub(_uIntResult_T_3, UInt<2>("h2")) @[IntervalSpec.scala 405:36]
    node _uIntResult_T_5 = asUInt(_uIntResult_T_4) @[IntervalSpec.scala 405:36]
    node _uIntResult_T_6 = sub(_uIntResult_T_5, UInt<2>("h2")) @[IntervalSpec.scala 405:43]
    node _uIntResult_T_7 = asUInt(_uIntResult_T_6) @[IntervalSpec.scala 405:43]
    node _uIntResult_T_8 = sub(_uIntResult_T_7, UInt<2>("h2")) @[IntervalSpec.scala 405:50]
    node _uIntResult_T_9 = asUInt(_uIntResult_T_8) @[IntervalSpec.scala 405:50]
    node _uIntResult_T_10 = sub(_uIntResult_T_9, UInt<2>("h2")) @[IntervalSpec.scala 405:57]
    node _uIntResult_T_11 = asUInt(_uIntResult_T_10) @[IntervalSpec.scala 405:57]
    uIntResult <= _uIntResult_T_11 @[IntervalSpec.scala 405:14]
    node _fixedResult_T = sub(asFixedPoint(UInt<6>("h11"), 0), asFixedPoint(UInt<3>("h2"), 0)) @[IntervalSpec.scala 406:31]
    node _fixedResult_T_1 = sub(_fixedResult_T, asFixedPoint(UInt<3>("h2"), 0)) @[IntervalSpec.scala 406:46]
    node _fixedResult_T_2 = sub(_fixedResult_T_1, asFixedPoint(UInt<3>("h2"), 0)) @[IntervalSpec.scala 406:61]
    node _fixedResult_T_3 = sub(_fixedResult_T_2, asFixedPoint(UInt<3>("h2"), 0)) @[IntervalSpec.scala 406:76]
    node _fixedResult_T_4 = sub(_fixedResult_T_3, asFixedPoint(UInt<3>("h2"), 0)) @[IntervalSpec.scala 407:14]
    node _fixedResult_T_5 = sub(_fixedResult_T_4, asFixedPoint(UInt<3>("h2"), 0)) @[IntervalSpec.scala 407:29]
    fixedResult <= _fixedResult_T_5 @[IntervalSpec.scala 406:15]
    node _sIntResult_T = sub(asSInt(UInt<6>("h11")), asSInt(UInt<3>("h2"))) @[IntervalSpec.scala 408:22]
    node _sIntResult_T_1 = sub(_sIntResult_T, asSInt(UInt<3>("h2"))) @[IntervalSpec.scala 408:29]
    node _sIntResult_T_2 = sub(_sIntResult_T_1, asSInt(UInt<3>("h2"))) @[IntervalSpec.scala 408:36]
    node _sIntResult_T_3 = sub(_sIntResult_T_2, asSInt(UInt<3>("h2"))) @[IntervalSpec.scala 408:43]
    node _sIntResult_T_4 = sub(_sIntResult_T_3, asSInt(UInt<3>("h2"))) @[IntervalSpec.scala 408:50]
    node _sIntResult_T_5 = sub(_sIntResult_T_4, asSInt(UInt<3>("h2"))) @[IntervalSpec.scala 408:57]
    sIntResult <= _sIntResult_T_5 @[IntervalSpec.scala 408:14]
    node _T = eq(uIntResult, UInt<3>("h5")) @[IntervalSpec.scala 410:21]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 410:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[IntervalSpec.scala 410:9]
    when _T_2 : @[IntervalSpec.scala 410:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[IntervalSpec.scala 410:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[IntervalSpec.scala 410:9]
      when _T_3 : @[IntervalSpec.scala 410:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:410 assert(uIntResult === 5.U)\n") : printf @[IntervalSpec.scala 410:9]
    node _T_4 = eq(sIntResult, asSInt(UInt<4>("h5"))) @[IntervalSpec.scala 411:21]
    node _T_5 = bits(reset, 0, 0) @[IntervalSpec.scala 411:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[IntervalSpec.scala 411:9]
    when _T_6 : @[IntervalSpec.scala 411:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[IntervalSpec.scala 411:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[IntervalSpec.scala 411:9]
      when _T_7 : @[IntervalSpec.scala 411:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:411 assert(sIntResult === 5.S)\n") : printf_1 @[IntervalSpec.scala 411:9]
    node _T_8 = asUInt(fixedResult) @[IntervalSpec.scala 412:22]
    node _T_9 = eq(_T_8, UInt<3>("h5")) @[IntervalSpec.scala 412:29]
    node _T_10 = bits(reset, 0, 0) @[IntervalSpec.scala 412:9]
    node _T_11 = eq(_T_10, UInt<1>("h0")) @[IntervalSpec.scala 412:9]
    when _T_11 : @[IntervalSpec.scala 412:9]
      assert(clock, _T_9, UInt<1>("h1"), "") : assert_2 @[IntervalSpec.scala 412:9]
      node _T_12 = eq(_T_9, UInt<1>("h0")) @[IntervalSpec.scala 412:9]
      when _T_12 : @[IntervalSpec.scala 412:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:412 assert(fixedResult.asUInt === 5.U)\n") : printf_2 @[IntervalSpec.scala 412:9]
    node _T_13 = eq(intervalResult1, asInterval(UInt<4>("h5"), 5, 5, 0)) @[IntervalSpec.scala 413:26]
    node _T_14 = bits(reset, 0, 0) @[IntervalSpec.scala 413:9]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[IntervalSpec.scala 413:9]
    when _T_15 : @[IntervalSpec.scala 413:9]
      assert(clock, _T_13, UInt<1>("h1"), "") : assert_3 @[IntervalSpec.scala 413:9]
      node _T_16 = eq(_T_13, UInt<1>("h0")) @[IntervalSpec.scala 413:9]
      when _T_16 : @[IntervalSpec.scala 413:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:413 assert(intervalResult1 === 5.I)\n") : printf_3 @[IntervalSpec.scala 413:9]
    node _T_17 = eq(intervalResult2, asInterval(UInt<4>("h5"), 5, 5, 0)) @[IntervalSpec.scala 414:26]
    node _T_18 = bits(reset, 0, 0) @[IntervalSpec.scala 414:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[IntervalSpec.scala 414:9]
    when _T_19 : @[IntervalSpec.scala 414:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert_4 @[IntervalSpec.scala 414:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[IntervalSpec.scala 414:9]
      when _T_20 : @[IntervalSpec.scala 414:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:414 assert(intervalResult2 === 5.I)\n") : printf_4 @[IntervalSpec.scala 414:9]
    node _T_21 = neq(asInterval(UInt<7>("h48"), -56, -56, 4), asInterval(UInt<7>("h38"), 56, 56, 4)) @[IntervalSpec.scala 419:27]
    node _T_22 = bits(reset, 0, 0) @[IntervalSpec.scala 419:9]
    node _T_23 = eq(_T_22, UInt<1>("h0")) @[IntervalSpec.scala 419:9]
    when _T_23 : @[IntervalSpec.scala 419:9]
      assert(clock, _T_21, UInt<1>("h1"), "") : assert_5 @[IntervalSpec.scala 419:9]
      node _T_24 = eq(_T_21, UInt<1>("h0")) @[IntervalSpec.scala 419:9]
      when _T_24 : @[IntervalSpec.scala 419:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:419 assert(negativeInterval =/= positiveInterval)\n") : printf_5 @[IntervalSpec.scala 419:9]
    node _T_25 = sub(asInterval(UInt<1>("h0"), 0, 0, 0), asInterval(UInt<7>("h48"), -56, -56, 4)) @[IntervalSpec.scala 420:10]
    node _T_26 = eq(_T_25, asInterval(UInt<7>("h38"), 56, 56, 4)) @[IntervalSpec.scala 420:28]
    node _T_27 = bits(reset, 0, 0) @[IntervalSpec.scala 420:9]
    node _T_28 = eq(_T_27, UInt<1>("h0")) @[IntervalSpec.scala 420:9]
    when _T_28 : @[IntervalSpec.scala 420:9]
      assert(clock, _T_26, UInt<1>("h1"), "") : assert_6 @[IntervalSpec.scala 420:9]
      node _T_29 = eq(_T_26, UInt<1>("h0")) @[IntervalSpec.scala 420:9]
      when _T_29 : @[IntervalSpec.scala 420:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:420 assert(-negativeInterval === positiveInterval)\n") : printf_6 @[IntervalSpec.scala 420:9]
    node _T_30 = sub(asInterval(UInt<1>("h0"), 0, 0, 0), asInterval(UInt<7>("h38"), 56, 56, 4)) @[IntervalSpec.scala 421:31]
    node _T_31 = eq(asInterval(UInt<7>("h48"), -56, -56, 4), _T_30) @[IntervalSpec.scala 421:27]
    node _T_32 = bits(reset, 0, 0) @[IntervalSpec.scala 421:9]
    node _T_33 = eq(_T_32, UInt<1>("h0")) @[IntervalSpec.scala 421:9]
    when _T_33 : @[IntervalSpec.scala 421:9]
      assert(clock, _T_31, UInt<1>("h1"), "") : assert_7 @[IntervalSpec.scala 421:9]
      node _T_34 = eq(_T_31, UInt<1>("h0")) @[IntervalSpec.scala 421:9]
      when _T_34 : @[IntervalSpec.scala 421:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:421 assert(negativeInterval === -positiveInterval)\n") : printf_7 @[IntervalSpec.scala 421:9]
    node _T_35 = bits(reset, 0, 0) @[IntervalSpec.scala 423:7]
    node _T_36 = eq(_T_35, UInt<1>("h0")) @[IntervalSpec.scala 423:7]
    when _T_36 : @[IntervalSpec.scala 423:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[IntervalSpec.scala 423:7]
