circuit MuxTester :
  module MuxTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    node _T = mux(UInt<1>("h0"), UInt<1>("h1"), UInt<2>("h2")) @[MuxSpec.scala 11:13]
    node _T_1 = eq(_T, UInt<2>("h2")) @[MuxSpec.scala 11:29]
    node _T_2 = bits(reset, 0, 0) @[MuxSpec.scala 11:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[MuxSpec.scala 11:9]
    when _T_3 : @[MuxSpec.scala 11:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[MuxSpec.scala 11:9]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[MuxSpec.scala 11:9]
      when _T_4 : @[MuxSpec.scala 11:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MuxSpec.scala:11 assert(Mux(0.B, 1.U, 2.U) === 2.U)\n") : printf @[MuxSpec.scala 11:9]
    node _T_5 = mux(UInt<1>("h1"), UInt<1>("h1"), UInt<2>("h2")) @[MuxSpec.scala 12:13]
    node _T_6 = eq(_T_5, UInt<1>("h1")) @[MuxSpec.scala 12:29]
    node _T_7 = bits(reset, 0, 0) @[MuxSpec.scala 12:9]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[MuxSpec.scala 12:9]
    when _T_8 : @[MuxSpec.scala 12:9]
      assert(clock, _T_6, UInt<1>("h1"), "") : assert_1 @[MuxSpec.scala 12:9]
      node _T_9 = eq(_T_6, UInt<1>("h0")) @[MuxSpec.scala 12:9]
      when _T_9 : @[MuxSpec.scala 12:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MuxSpec.scala:12 assert(Mux(1.B, 1.U, 2.U) === 1.U)\n") : printf_1 @[MuxSpec.scala 12:9]
    wire dontCareMux1 : UInt @[MuxSpec.scala 13:26]
    wire _dontCareMux1_WIRE : UInt<3> @[MuxSpec.scala 14:22]
    _dontCareMux1_WIRE is invalid @[MuxSpec.scala 14:22]
    node _dontCareMux1_T = mux(UInt<1>("h0"), _dontCareMux1_WIRE, UInt<3>("h4")) @[MuxSpec.scala 14:22]
    dontCareMux1 <= _dontCareMux1_T @[MuxSpec.scala 14:16]
    node _T_10 = eq(dontCareMux1, UInt<3>("h4")) @[MuxSpec.scala 15:23]
    node _T_11 = bits(reset, 0, 0) @[MuxSpec.scala 15:9]
    node _T_12 = eq(_T_11, UInt<1>("h0")) @[MuxSpec.scala 15:9]
    when _T_12 : @[MuxSpec.scala 15:9]
      assert(clock, _T_10, UInt<1>("h1"), "") : assert_2 @[MuxSpec.scala 15:9]
      node _T_13 = eq(_T_10, UInt<1>("h0")) @[MuxSpec.scala 15:9]
      when _T_13 : @[MuxSpec.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MuxSpec.scala:15 assert(dontCareMux1 === 4.U)\n") : printf_2 @[MuxSpec.scala 15:9]
    wire dontCareMux2 : UInt @[MuxSpec.scala 17:26]
    wire _dontCareMux2_WIRE : UInt<2> @[MuxSpec.scala 18:22]
    _dontCareMux2_WIRE is invalid @[MuxSpec.scala 18:22]
    node _dontCareMux2_T = mux(UInt<1>("h1"), UInt<2>("h3"), _dontCareMux2_WIRE) @[MuxSpec.scala 18:22]
    dontCareMux2 <= _dontCareMux2_T @[MuxSpec.scala 18:16]
    node _T_14 = eq(dontCareMux2, UInt<2>("h3")) @[MuxSpec.scala 19:23]
    node _T_15 = bits(reset, 0, 0) @[MuxSpec.scala 19:9]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[MuxSpec.scala 19:9]
    when _T_16 : @[MuxSpec.scala 19:9]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_3 @[MuxSpec.scala 19:9]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[MuxSpec.scala 19:9]
      when _T_17 : @[MuxSpec.scala 19:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MuxSpec.scala:19 assert(dontCareMux2 === 3.U)\n") : printf_3 @[MuxSpec.scala 19:9]
    wire _WIRE : UInt<2> @[MuxSpec.scala 21:6]
    _WIRE is invalid @[MuxSpec.scala 21:6]
    node _T_18 = mux(UInt<1>("h0"), UInt<2>("h3"), _WIRE) @[MuxSpec.scala 21:6]
    node _T_19 = bits(reset, 0, 0) @[MuxSpec.scala 22:7]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[MuxSpec.scala 22:7]
    when _T_20 : @[MuxSpec.scala 22:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[MuxSpec.scala 22:7]
