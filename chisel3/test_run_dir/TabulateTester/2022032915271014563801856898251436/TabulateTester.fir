circuit TabulateTester :
  module TabulateTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire v : UInt<3>[4] @[Vec.scala 99:18]
    v[0] <= UInt<1>("h0") @[Vec.scala 99:18]
    v[1] <= UInt<2>("h2") @[Vec.scala 99:18]
    v[2] <= UInt<3>("h4") @[Vec.scala 99:18]
    v[3] <= UInt<3>("h6") @[Vec.scala 99:18]
    wire x : UInt<3>[4] @[Vec.scala 100:18]
    x[0] <= UInt<1>("h0") @[Vec.scala 100:18]
    x[1] <= UInt<2>("h2") @[Vec.scala 100:18]
    x[2] <= UInt<3>("h4") @[Vec.scala 100:18]
    x[3] <= UInt<3>("h6") @[Vec.scala 100:18]
    wire u : UInt<3>[4] @[Vec.scala 101:30]
    u[0] <= UInt<1>("h0") @[Vec.scala 101:30]
    u[1] <= UInt<2>("h2") @[Vec.scala 101:30]
    u[2] <= UInt<3>("h4") @[Vec.scala 101:30]
    u[3] <= UInt<3>("h6") @[Vec.scala 101:30]
    node lo = cat(v[1], v[0]) @[Vec.scala 103:18]
    node hi = cat(v[3], v[2]) @[Vec.scala 103:18]
    node _T = cat(hi, lo) @[Vec.scala 103:18]
    node lo_1 = cat(x[1], x[0]) @[Vec.scala 103:33]
    node hi_1 = cat(x[3], x[2]) @[Vec.scala 103:33]
    node _T_1 = cat(hi_1, lo_1) @[Vec.scala 103:33]
    node _T_2 = eq(_T, _T_1) @[Vec.scala 103:21]
    node _T_3 = bits(reset, 0, 0) @[Vec.scala 103:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[Vec.scala 103:9]
    when _T_4 : @[Vec.scala 103:9]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[Vec.scala 103:9]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[Vec.scala 103:9]
      when _T_5 : @[Vec.scala 103:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:103 assert(v.asUInt() === x.asUInt())\n") : printf @[Vec.scala 103:9]
    node lo_2 = cat(v[1], v[0]) @[Vec.scala 104:18]
    node hi_2 = cat(v[3], v[2]) @[Vec.scala 104:18]
    node _T_6 = cat(hi_2, lo_2) @[Vec.scala 104:18]
    node lo_3 = cat(u[1], u[0]) @[Vec.scala 104:33]
    node hi_3 = cat(u[3], u[2]) @[Vec.scala 104:33]
    node _T_7 = cat(hi_3, lo_3) @[Vec.scala 104:33]
    node _T_8 = eq(_T_6, _T_7) @[Vec.scala 104:21]
    node _T_9 = bits(reset, 0, 0) @[Vec.scala 104:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Vec.scala 104:9]
    when _T_10 : @[Vec.scala 104:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[Vec.scala 104:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[Vec.scala 104:9]
      when _T_11 : @[Vec.scala 104:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:104 assert(v.asUInt() === u.asUInt())\n") : printf_1 @[Vec.scala 104:9]
    node lo_4 = cat(x[1], x[0]) @[Vec.scala 105:18]
    node hi_4 = cat(x[3], x[2]) @[Vec.scala 105:18]
    node _T_12 = cat(hi_4, lo_4) @[Vec.scala 105:18]
    node lo_5 = cat(u[1], u[0]) @[Vec.scala 105:33]
    node hi_5 = cat(u[3], u[2]) @[Vec.scala 105:33]
    node _T_13 = cat(hi_5, lo_5) @[Vec.scala 105:33]
    node _T_14 = eq(_T_12, _T_13) @[Vec.scala 105:21]
    node _T_15 = bits(reset, 0, 0) @[Vec.scala 105:9]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[Vec.scala 105:9]
    when _T_16 : @[Vec.scala 105:9]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_2 @[Vec.scala 105:9]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[Vec.scala 105:9]
      when _T_17 : @[Vec.scala 105:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:105 assert(x.asUInt() === u.asUInt())\n") : printf_2 @[Vec.scala 105:9]
    node _T_18 = bits(reset, 0, 0) @[Vec.scala 107:7]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[Vec.scala 107:7]
    when _T_19 : @[Vec.scala 107:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[Vec.scala 107:7]
