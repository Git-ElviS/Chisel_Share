circuit AdderTreeTester :
  module AdderTree :
    input clock : Clock
    input reset : Reset
    output io : { flip numIn : UInt<2>[20], numOut : UInt<2>}

    node _io_numOut_T = add(io.numIn[0], io.numIn[1]) @[AdderTree.scala 13:55]
    node _io_numOut_T_1 = tail(_io_numOut_T, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_2 = add(io.numIn[2], io.numIn[3]) @[AdderTree.scala 13:55]
    node _io_numOut_T_3 = tail(_io_numOut_T_2, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_4 = add(io.numIn[4], io.numIn[5]) @[AdderTree.scala 13:55]
    node _io_numOut_T_5 = tail(_io_numOut_T_4, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_6 = add(io.numIn[6], io.numIn[7]) @[AdderTree.scala 13:55]
    node _io_numOut_T_7 = tail(_io_numOut_T_6, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_8 = add(io.numIn[8], io.numIn[9]) @[AdderTree.scala 13:55]
    node _io_numOut_T_9 = tail(_io_numOut_T_8, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_10 = add(io.numIn[10], io.numIn[11]) @[AdderTree.scala 13:55]
    node _io_numOut_T_11 = tail(_io_numOut_T_10, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_12 = add(io.numIn[12], io.numIn[13]) @[AdderTree.scala 13:55]
    node _io_numOut_T_13 = tail(_io_numOut_T_12, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_14 = add(io.numIn[14], io.numIn[15]) @[AdderTree.scala 13:55]
    node _io_numOut_T_15 = tail(_io_numOut_T_14, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_16 = add(io.numIn[16], io.numIn[17]) @[AdderTree.scala 13:55]
    node _io_numOut_T_17 = tail(_io_numOut_T_16, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_18 = add(io.numIn[18], io.numIn[19]) @[AdderTree.scala 13:55]
    node _io_numOut_T_19 = tail(_io_numOut_T_18, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_20 = add(_io_numOut_T_1, _io_numOut_T_3) @[AdderTree.scala 13:55]
    node _io_numOut_T_21 = tail(_io_numOut_T_20, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_22 = add(_io_numOut_T_5, _io_numOut_T_7) @[AdderTree.scala 13:55]
    node _io_numOut_T_23 = tail(_io_numOut_T_22, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_24 = add(_io_numOut_T_9, _io_numOut_T_11) @[AdderTree.scala 13:55]
    node _io_numOut_T_25 = tail(_io_numOut_T_24, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_26 = add(_io_numOut_T_13, _io_numOut_T_15) @[AdderTree.scala 13:55]
    node _io_numOut_T_27 = tail(_io_numOut_T_26, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_28 = add(_io_numOut_T_17, _io_numOut_T_19) @[AdderTree.scala 13:55]
    node _io_numOut_T_29 = tail(_io_numOut_T_28, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_30 = add(_io_numOut_T_21, _io_numOut_T_23) @[AdderTree.scala 13:55]
    node _io_numOut_T_31 = tail(_io_numOut_T_30, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_32 = add(_io_numOut_T_25, _io_numOut_T_27) @[AdderTree.scala 13:55]
    node _io_numOut_T_33 = tail(_io_numOut_T_32, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_34 = add(_io_numOut_T_31, _io_numOut_T_33) @[AdderTree.scala 13:55]
    node _io_numOut_T_35 = tail(_io_numOut_T_34, 1) @[AdderTree.scala 13:55]
    node _io_numOut_T_36 = add(_io_numOut_T_35, _io_numOut_T_29) @[AdderTree.scala 13:55]
    node _io_numOut_T_37 = tail(_io_numOut_T_36, 1) @[AdderTree.scala 13:55]
    io.numOut <= _io_numOut_T_37 @[AdderTree.scala 13:13]

  module AdderTreeTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst dut of AdderTree @[AdderTree.scala 18:19]
    dut.clock <= clock
    dut.reset <= reset
    wire _WIRE : UInt<2>[20] @[AdderTree.scala 19:26]
    _WIRE[0] <= UInt<2>("h0") @[AdderTree.scala 19:26]
    _WIRE[1] <= UInt<2>("h2") @[AdderTree.scala 19:26]
    _WIRE[2] <= UInt<2>("h2") @[AdderTree.scala 19:26]
    _WIRE[3] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[4] <= UInt<2>("h0") @[AdderTree.scala 19:26]
    _WIRE[5] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[6] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[7] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[8] <= UInt<2>("h1") @[AdderTree.scala 19:26]
    _WIRE[9] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[10] <= UInt<2>("h0") @[AdderTree.scala 19:26]
    _WIRE[11] <= UInt<2>("h2") @[AdderTree.scala 19:26]
    _WIRE[12] <= UInt<2>("h1") @[AdderTree.scala 19:26]
    _WIRE[13] <= UInt<2>("h0") @[AdderTree.scala 19:26]
    _WIRE[14] <= UInt<2>("h0") @[AdderTree.scala 19:26]
    _WIRE[15] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[16] <= UInt<2>("h1") @[AdderTree.scala 19:26]
    _WIRE[17] <= UInt<2>("h1") @[AdderTree.scala 19:26]
    _WIRE[18] <= UInt<2>("h3") @[AdderTree.scala 19:26]
    _WIRE[19] <= UInt<2>("h1") @[AdderTree.scala 19:26]
    dut.io.numIn[0] <= _WIRE[0] @[AdderTree.scala 19:16]
    dut.io.numIn[1] <= _WIRE[1] @[AdderTree.scala 19:16]
    dut.io.numIn[2] <= _WIRE[2] @[AdderTree.scala 19:16]
    dut.io.numIn[3] <= _WIRE[3] @[AdderTree.scala 19:16]
    dut.io.numIn[4] <= _WIRE[4] @[AdderTree.scala 19:16]
    dut.io.numIn[5] <= _WIRE[5] @[AdderTree.scala 19:16]
    dut.io.numIn[6] <= _WIRE[6] @[AdderTree.scala 19:16]
    dut.io.numIn[7] <= _WIRE[7] @[AdderTree.scala 19:16]
    dut.io.numIn[8] <= _WIRE[8] @[AdderTree.scala 19:16]
    dut.io.numIn[9] <= _WIRE[9] @[AdderTree.scala 19:16]
    dut.io.numIn[10] <= _WIRE[10] @[AdderTree.scala 19:16]
    dut.io.numIn[11] <= _WIRE[11] @[AdderTree.scala 19:16]
    dut.io.numIn[12] <= _WIRE[12] @[AdderTree.scala 19:16]
    dut.io.numIn[13] <= _WIRE[13] @[AdderTree.scala 19:16]
    dut.io.numIn[14] <= _WIRE[14] @[AdderTree.scala 19:16]
    dut.io.numIn[15] <= _WIRE[15] @[AdderTree.scala 19:16]
    dut.io.numIn[16] <= _WIRE[16] @[AdderTree.scala 19:16]
    dut.io.numIn[17] <= _WIRE[17] @[AdderTree.scala 19:16]
    dut.io.numIn[18] <= _WIRE[18] @[AdderTree.scala 19:16]
    dut.io.numIn[19] <= _WIRE[19] @[AdderTree.scala 19:16]
    node sumCorrect = eq(dut.io.numOut, UInt<2>("h0")) @[AdderTree.scala 20:34]
    node _T = bits(reset, 0, 0) @[AdderTree.scala 21:9]
    node _T_1 = eq(_T, UInt<1>("h0")) @[AdderTree.scala 21:9]
    when _T_1 : @[AdderTree.scala 21:9]
      assert(clock, sumCorrect, UInt<1>("h1"), "") : assert @[AdderTree.scala 21:9]
      node _T_2 = eq(sumCorrect, UInt<1>("h0")) @[AdderTree.scala 21:9]
      when _T_2 : @[AdderTree.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at AdderTree.scala:21 assert(sumCorrect)\n") : printf @[AdderTree.scala 21:9]
    node _T_3 = bits(reset, 0, 0) @[AdderTree.scala 22:7]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[AdderTree.scala 22:7]
    when _T_4 : @[AdderTree.scala 22:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[AdderTree.scala 22:7]
