circuit MulLookupTester :
  module MulLookup :
    input clock : Clock
    input reset : Reset
    output io : { flip x : UInt<3>, flip y : UInt<3>, z : UInt<6>}

    wire tbl : UInt<6>[64] @[MulLookup.scala 14:20]
    tbl[0] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[1] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[2] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[3] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[4] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[5] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[6] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[7] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[8] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[9] <= UInt<6>("h1") @[MulLookup.scala 14:20]
    tbl[10] <= UInt<6>("h2") @[MulLookup.scala 14:20]
    tbl[11] <= UInt<6>("h3") @[MulLookup.scala 14:20]
    tbl[12] <= UInt<6>("h4") @[MulLookup.scala 14:20]
    tbl[13] <= UInt<6>("h5") @[MulLookup.scala 14:20]
    tbl[14] <= UInt<6>("h6") @[MulLookup.scala 14:20]
    tbl[15] <= UInt<6>("h7") @[MulLookup.scala 14:20]
    tbl[16] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[17] <= UInt<6>("h2") @[MulLookup.scala 14:20]
    tbl[18] <= UInt<6>("h4") @[MulLookup.scala 14:20]
    tbl[19] <= UInt<6>("h6") @[MulLookup.scala 14:20]
    tbl[20] <= UInt<6>("h8") @[MulLookup.scala 14:20]
    tbl[21] <= UInt<6>("ha") @[MulLookup.scala 14:20]
    tbl[22] <= UInt<6>("hc") @[MulLookup.scala 14:20]
    tbl[23] <= UInt<6>("he") @[MulLookup.scala 14:20]
    tbl[24] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[25] <= UInt<6>("h3") @[MulLookup.scala 14:20]
    tbl[26] <= UInt<6>("h6") @[MulLookup.scala 14:20]
    tbl[27] <= UInt<6>("h9") @[MulLookup.scala 14:20]
    tbl[28] <= UInt<6>("hc") @[MulLookup.scala 14:20]
    tbl[29] <= UInt<6>("hf") @[MulLookup.scala 14:20]
    tbl[30] <= UInt<6>("h12") @[MulLookup.scala 14:20]
    tbl[31] <= UInt<6>("h15") @[MulLookup.scala 14:20]
    tbl[32] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[33] <= UInt<6>("h4") @[MulLookup.scala 14:20]
    tbl[34] <= UInt<6>("h8") @[MulLookup.scala 14:20]
    tbl[35] <= UInt<6>("hc") @[MulLookup.scala 14:20]
    tbl[36] <= UInt<6>("h10") @[MulLookup.scala 14:20]
    tbl[37] <= UInt<6>("h14") @[MulLookup.scala 14:20]
    tbl[38] <= UInt<6>("h18") @[MulLookup.scala 14:20]
    tbl[39] <= UInt<6>("h1c") @[MulLookup.scala 14:20]
    tbl[40] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[41] <= UInt<6>("h5") @[MulLookup.scala 14:20]
    tbl[42] <= UInt<6>("ha") @[MulLookup.scala 14:20]
    tbl[43] <= UInt<6>("hf") @[MulLookup.scala 14:20]
    tbl[44] <= UInt<6>("h14") @[MulLookup.scala 14:20]
    tbl[45] <= UInt<6>("h19") @[MulLookup.scala 14:20]
    tbl[46] <= UInt<6>("h1e") @[MulLookup.scala 14:20]
    tbl[47] <= UInt<6>("h23") @[MulLookup.scala 14:20]
    tbl[48] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[49] <= UInt<6>("h6") @[MulLookup.scala 14:20]
    tbl[50] <= UInt<6>("hc") @[MulLookup.scala 14:20]
    tbl[51] <= UInt<6>("h12") @[MulLookup.scala 14:20]
    tbl[52] <= UInt<6>("h18") @[MulLookup.scala 14:20]
    tbl[53] <= UInt<6>("h1e") @[MulLookup.scala 14:20]
    tbl[54] <= UInt<6>("h24") @[MulLookup.scala 14:20]
    tbl[55] <= UInt<6>("h2a") @[MulLookup.scala 14:20]
    tbl[56] <= UInt<6>("h0") @[MulLookup.scala 14:20]
    tbl[57] <= UInt<6>("h7") @[MulLookup.scala 14:20]
    tbl[58] <= UInt<6>("he") @[MulLookup.scala 14:20]
    tbl[59] <= UInt<6>("h15") @[MulLookup.scala 14:20]
    tbl[60] <= UInt<6>("h1c") @[MulLookup.scala 14:20]
    tbl[61] <= UInt<6>("h23") @[MulLookup.scala 14:20]
    tbl[62] <= UInt<6>("h2a") @[MulLookup.scala 14:20]
    tbl[63] <= UInt<6>("h31") @[MulLookup.scala 14:20]
    node _io_z_T = shl(io.x, 3) @[MulLookup.scala 20:22]
    node _io_z_T_1 = or(_io_z_T, io.y) @[MulLookup.scala 20:28]
    io.z <= tbl[_io_z_T_1] @[MulLookup.scala 20:8]

  module MulLookupTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst dut of MulLookup @[MulLookup.scala 24:19]
    dut.clock <= clock
    dut.reset <= reset
    dut.io.x <= UInt<2>("h2") @[MulLookup.scala 25:12]
    dut.io.y <= UInt<2>("h2") @[MulLookup.scala 26:12]
    node _T = eq(dut.io.z, UInt<3>("h4")) @[MulLookup.scala 27:19]
    node _T_1 = bits(reset, 0, 0) @[MulLookup.scala 27:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[MulLookup.scala 27:9]
    when _T_2 : @[MulLookup.scala 27:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[MulLookup.scala 27:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[MulLookup.scala 27:9]
      when _T_3 : @[MulLookup.scala 27:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MulLookup.scala:27 assert(dut.io.z === (x * y).asUInt)\n") : printf @[MulLookup.scala 27:9]
    node _T_4 = bits(reset, 0, 0) @[MulLookup.scala 28:7]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[MulLookup.scala 28:7]
    when _T_5 : @[MulLookup.scala 28:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[MulLookup.scala 28:7]
