circuit IntegerMathTester :
  module IntegerMathTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    node _T = eq(UInt<4>("h3"), UInt<4>("h3")) @[IntegerMathSpec.scala 19:21]
    node _T_1 = bits(reset, 0, 0) @[IntegerMathSpec.scala 19:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[IntegerMathSpec.scala 19:9]
    when _T_2 : @[IntegerMathSpec.scala 19:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[IntegerMathSpec.scala 19:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[IntegerMathSpec.scala 19:9]
      when _T_3 : @[IntegerMathSpec.scala 19:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntegerMathSpec.scala:19 assert(uint.abs() === uint)\n") : printf @[IntegerMathSpec.scala 19:9]
    node _T_4 = lt(asSInt(UInt<3>("h5")), asSInt(UInt<1>("h0"))) @[IntegerMathSpec.scala 20:18]
    node _T_5 = sub(asSInt(UInt<1>("h0")), asSInt(UInt<3>("h5"))) @[IntegerMathSpec.scala 20:18]
    node _T_6 = tail(_T_5, 1) @[IntegerMathSpec.scala 20:18]
    node _T_7 = asSInt(_T_6) @[IntegerMathSpec.scala 20:18]
    node _T_8 = mux(_T_4, _T_7, asSInt(UInt<3>("h5"))) @[IntegerMathSpec.scala 20:18]
    node _T_9 = eq(_T_8, asSInt(UInt<3>("h3"))) @[IntegerMathSpec.scala 20:21]
    node _T_10 = bits(reset, 0, 0) @[IntegerMathSpec.scala 20:9]
    node _T_11 = eq(_T_10, UInt<1>("h0")) @[IntegerMathSpec.scala 20:9]
    when _T_11 : @[IntegerMathSpec.scala 20:9]
      assert(clock, _T_9, UInt<1>("h1"), "") : assert_1 @[IntegerMathSpec.scala 20:9]
      node _T_12 = eq(_T_9, UInt<1>("h0")) @[IntegerMathSpec.scala 20:9]
      when _T_12 : @[IntegerMathSpec.scala 20:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntegerMathSpec.scala:20 assert(sint.abs() === sintpos)\n") : printf_1 @[IntegerMathSpec.scala 20:9]
    node _T_13 = lt(asSInt(UInt<3>("h3")), asSInt(UInt<1>("h0"))) @[IntegerMathSpec.scala 21:21]
    node _T_14 = sub(asSInt(UInt<1>("h0")), asSInt(UInt<3>("h3"))) @[IntegerMathSpec.scala 21:21]
    node _T_15 = tail(_T_14, 1) @[IntegerMathSpec.scala 21:21]
    node _T_16 = asSInt(_T_15) @[IntegerMathSpec.scala 21:21]
    node _T_17 = mux(_T_13, _T_16, asSInt(UInt<3>("h3"))) @[IntegerMathSpec.scala 21:21]
    node _T_18 = eq(_T_17, asSInt(UInt<3>("h3"))) @[IntegerMathSpec.scala 21:24]
    node _T_19 = bits(reset, 0, 0) @[IntegerMathSpec.scala 21:9]
    node _T_20 = eq(_T_19, UInt<1>("h0")) @[IntegerMathSpec.scala 21:9]
    when _T_20 : @[IntegerMathSpec.scala 21:9]
      assert(clock, _T_18, UInt<1>("h1"), "") : assert_2 @[IntegerMathSpec.scala 21:9]
      node _T_21 = eq(_T_18, UInt<1>("h0")) @[IntegerMathSpec.scala 21:9]
      when _T_21 : @[IntegerMathSpec.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntegerMathSpec.scala:21 assert(sintpos.abs() === sintpos)\n") : printf_2 @[IntegerMathSpec.scala 21:9]
    node _T_22 = lt(asSInt(UInt<3>("h5")), asSInt(UInt<1>("h0"))) @[IntegerMathSpec.scala 23:18]
    node _T_23 = sub(asSInt(UInt<1>("h0")), asSInt(UInt<3>("h5"))) @[IntegerMathSpec.scala 23:18]
    node _T_24 = tail(_T_23, 1) @[IntegerMathSpec.scala 23:18]
    node _T_25 = asSInt(_T_24) @[IntegerMathSpec.scala 23:18]
    node _T_26 = mux(_T_22, _T_25, asSInt(UInt<3>("h5"))) @[IntegerMathSpec.scala 23:18]
    node _T_27 = neq(_T_26, asSInt(UInt<4>("h4"))) @[IntegerMathSpec.scala 23:21]
    node _T_28 = bits(reset, 0, 0) @[IntegerMathSpec.scala 23:9]
    node _T_29 = eq(_T_28, UInt<1>("h0")) @[IntegerMathSpec.scala 23:9]
    when _T_29 : @[IntegerMathSpec.scala 23:9]
      assert(clock, _T_27, UInt<1>("h1"), "") : assert_3 @[IntegerMathSpec.scala 23:9]
      node _T_30 = eq(_T_27, UInt<1>("h0")) @[IntegerMathSpec.scala 23:9]
      when _T_30 : @[IntegerMathSpec.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntegerMathSpec.scala:23 assert(sint.abs() =/= wrongSIntPos)\n") : printf_3 @[IntegerMathSpec.scala 23:9]
    node _T_31 = bits(reset, 0, 0) @[IntegerMathSpec.scala 25:7]
    node _T_32 = eq(_T_31, UInt<1>("h0")) @[IntegerMathSpec.scala 25:7]
    when _T_32 : @[IntegerMathSpec.scala 25:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[IntegerMathSpec.scala 25:7]
