circuit QueueFactoryTester :
  module MaxPeriodFibonacciLFSR :
    input clock : Clock
    input reset : Reset
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}

    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[4] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[5] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[6] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[7] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[8] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[9] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[10] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[11] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[12] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[13] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[14] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[15] <= UInt<1>("h0") @[PRNG.scala 46:28]
    reg state : UInt<1>[16], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      node _T = xor(state[15], state[13]) @[LFSR.scala 15:41]
      node _T_1 = xor(_T, state[12]) @[LFSR.scala 15:41]
      node _T_2 = xor(_T_1, state[10]) @[LFSR.scala 15:41]
      state[0] <= _T_2 @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
      state[4] <= state[3] @[PRNG.scala 70:11]
      state[5] <= state[4] @[PRNG.scala 70:11]
      state[6] <= state[5] @[PRNG.scala 70:11]
      state[7] <= state[6] @[PRNG.scala 70:11]
      state[8] <= state[7] @[PRNG.scala 70:11]
      state[9] <= state[8] @[PRNG.scala 70:11]
      state[10] <= state[9] @[PRNG.scala 70:11]
      state[11] <= state[10] @[PRNG.scala 70:11]
      state[12] <= state[11] @[PRNG.scala 70:11]
      state[13] <= state[12] @[PRNG.scala 70:11]
      state[14] <= state[13] @[PRNG.scala 70:11]
      state[15] <= state[14] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 74:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 74:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 74:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 74:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 74:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 74:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 74:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 74:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 74:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 74:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 74:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module QueueFactoryTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>} @[QueueSpec.scala 185:17]
    wire deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>} @[Decoupled.scala 355:21]
    deq.valid <= enq.valid @[Decoupled.scala 356:17]
    deq.bits <= enq.bits @[Decoupled.scala 357:16]
    enq.ready <= deq.ready @[Decoupled.scala 358:17]
    wire elems : UInt<4>[20] @[QueueSpec.scala 188:22]
    elems[0] <= UInt<3>("h7") @[QueueSpec.scala 188:22]
    elems[1] <= UInt<4>("hf") @[QueueSpec.scala 188:22]
    elems[2] <= UInt<3>("h7") @[QueueSpec.scala 188:22]
    elems[3] <= UInt<3>("h5") @[QueueSpec.scala 188:22]
    elems[4] <= UInt<3>("h6") @[QueueSpec.scala 188:22]
    elems[5] <= UInt<4>("h9") @[QueueSpec.scala 188:22]
    elems[6] <= UInt<3>("h7") @[QueueSpec.scala 188:22]
    elems[7] <= UInt<1>("h0") @[QueueSpec.scala 188:22]
    elems[8] <= UInt<4>("hb") @[QueueSpec.scala 188:22]
    elems[9] <= UInt<2>("h3") @[QueueSpec.scala 188:22]
    elems[10] <= UInt<2>("h2") @[QueueSpec.scala 188:22]
    elems[11] <= UInt<3>("h6") @[QueueSpec.scala 188:22]
    elems[12] <= UInt<3>("h4") @[QueueSpec.scala 188:22]
    elems[13] <= UInt<3>("h7") @[QueueSpec.scala 188:22]
    elems[14] <= UInt<4>("he") @[QueueSpec.scala 188:22]
    elems[15] <= UInt<4>("hc") @[QueueSpec.scala 188:22]
    elems[16] <= UInt<4>("h9") @[QueueSpec.scala 188:22]
    elems[17] <= UInt<3>("h5") @[QueueSpec.scala 188:22]
    elems[18] <= UInt<3>("h6") @[QueueSpec.scala 188:22]
    elems[19] <= UInt<2>("h2") @[QueueSpec.scala 188:22]
    reg value : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Counter.scala 62:40]
    reg value_1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Counter.scala 62:40]
    node _enq_valid_T = lt(value, UInt<5>("h14")) @[QueueSpec.scala 194:29]
    enq.valid <= _enq_valid_T @[QueueSpec.scala 194:13]
    inst deq_ready_prng of MaxPeriodFibonacciLFSR @[PRNG.scala 91:22]
    deq_ready_prng.clock <= clock
    deq_ready_prng.reset <= reset
    deq_ready_prng.io.seed.valid <= UInt<1>("h0") @[PRNG.scala 92:24]
    deq_ready_prng.io.seed.bits[0] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[1] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[2] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[3] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[4] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[5] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[6] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[7] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[8] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[9] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[10] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[11] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[12] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[13] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[14] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.seed.bits[15] is invalid @[PRNG.scala 93:23]
    deq_ready_prng.io.increment <= UInt<1>("h1") @[PRNG.scala 94:23]
    node deq_ready_lo_lo_lo = cat(deq_ready_prng.io.out[1], deq_ready_prng.io.out[0]) @[PRNG.scala 95:17]
    node deq_ready_lo_lo_hi = cat(deq_ready_prng.io.out[3], deq_ready_prng.io.out[2]) @[PRNG.scala 95:17]
    node deq_ready_lo_lo = cat(deq_ready_lo_lo_hi, deq_ready_lo_lo_lo) @[PRNG.scala 95:17]
    node deq_ready_lo_hi_lo = cat(deq_ready_prng.io.out[5], deq_ready_prng.io.out[4]) @[PRNG.scala 95:17]
    node deq_ready_lo_hi_hi = cat(deq_ready_prng.io.out[7], deq_ready_prng.io.out[6]) @[PRNG.scala 95:17]
    node deq_ready_lo_hi = cat(deq_ready_lo_hi_hi, deq_ready_lo_hi_lo) @[PRNG.scala 95:17]
    node deq_ready_lo = cat(deq_ready_lo_hi, deq_ready_lo_lo) @[PRNG.scala 95:17]
    node deq_ready_hi_lo_lo = cat(deq_ready_prng.io.out[9], deq_ready_prng.io.out[8]) @[PRNG.scala 95:17]
    node deq_ready_hi_lo_hi = cat(deq_ready_prng.io.out[11], deq_ready_prng.io.out[10]) @[PRNG.scala 95:17]
    node deq_ready_hi_lo = cat(deq_ready_hi_lo_hi, deq_ready_hi_lo_lo) @[PRNG.scala 95:17]
    node deq_ready_hi_hi_lo = cat(deq_ready_prng.io.out[13], deq_ready_prng.io.out[12]) @[PRNG.scala 95:17]
    node deq_ready_hi_hi_hi = cat(deq_ready_prng.io.out[15], deq_ready_prng.io.out[14]) @[PRNG.scala 95:17]
    node deq_ready_hi_hi = cat(deq_ready_hi_hi_hi, deq_ready_hi_hi_lo) @[PRNG.scala 95:17]
    node deq_ready_hi = cat(deq_ready_hi_hi, deq_ready_hi_lo) @[PRNG.scala 95:17]
    node _deq_ready_T = cat(deq_ready_hi, deq_ready_lo) @[PRNG.scala 95:17]
    node _deq_ready_T_1 = bits(_deq_ready_T, 5, 5) @[QueueSpec.scala 195:24]
    deq.ready <= _deq_ready_T_1 @[QueueSpec.scala 195:13]
    enq.bits <= elems[value] @[QueueSpec.scala 197:12]
    node _T = and(enq.ready, enq.valid) @[Decoupled.scala 50:35]
    when _T : @[QueueSpec.scala 198:18]
      node wrap = eq(value, UInt<5>("h14")) @[Counter.scala 74:24]
      node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 78:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 78:24]
      value <= _value_T_1 @[Counter.scala 78:15]
      when wrap : @[Counter.scala 88:20]
        value <= UInt<1>("h0") @[Counter.scala 88:28]
    node _T_1 = and(deq.ready, deq.valid) @[Decoupled.scala 50:35]
    when _T_1 : @[QueueSpec.scala 201:18]
      node _T_2 = eq(elems[value_1], deq.bits) @[QueueSpec.scala 203:32]
      node _T_3 = bits(reset, 0, 0) @[QueueSpec.scala 203:11]
      node _T_4 = eq(_T_3, UInt<1>("h0")) @[QueueSpec.scala 203:11]
      when _T_4 : @[QueueSpec.scala 203:11]
        assert(clock, _T_2, UInt<1>("h1"), "") : assert @[QueueSpec.scala 203:11]
        node _T_5 = eq(_T_2, UInt<1>("h0")) @[QueueSpec.scala 203:11]
        when _T_5 : @[QueueSpec.scala 203:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at QueueSpec.scala:203 assert(elems(outCnt.value) === deq.bits)\n") : printf @[QueueSpec.scala 203:11]
      node wrap_1 = eq(value_1, UInt<5>("h14")) @[Counter.scala 74:24]
      node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 78:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 78:24]
      value_1 <= _value_T_3 @[Counter.scala 78:15]
      when wrap_1 : @[Counter.scala 88:20]
        value_1 <= UInt<1>("h0") @[Counter.scala 88:28]
    node _T_6 = eq(value_1, UInt<5>("h14")) @[QueueSpec.scala 206:21]
    when _T_6 : @[QueueSpec.scala 206:44]
      node _T_7 = bits(reset, 0, 0) @[QueueSpec.scala 207:9]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[QueueSpec.scala 207:9]
      when _T_8 : @[QueueSpec.scala 207:9]
        stop(clock, UInt<1>("h1"), 0) : stop @[QueueSpec.scala 207:9]
