circuit PRNGUpdateSeedTest :
  module CyclePRNG :
    input clock : Clock
    input reset : Reset
    output io : { flip seed : { valid : UInt<1>, bits : UInt<1>[16]}, flip increment : UInt<1>, out : UInt<1>[16]}

    wire _state_WIRE : UInt<1>[16] @[PRNG.scala 46:28]
    _state_WIRE[0] <= UInt<1>("h1") @[PRNG.scala 46:28]
    _state_WIRE[1] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[2] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[3] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[4] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[5] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[6] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[7] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[8] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[9] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[10] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[11] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[12] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[13] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[14] <= UInt<1>("h0") @[PRNG.scala 46:28]
    _state_WIRE[15] <= UInt<1>("h0") @[PRNG.scala 46:28]
    reg state : UInt<1>[16], clock with :
      reset => (reset, _state_WIRE) @[PRNG.scala 55:49]
    when io.increment : @[PRNG.scala 69:22]
      state[0] <= state[15] @[PRNG.scala 70:11]
      state[1] <= state[0] @[PRNG.scala 70:11]
      state[2] <= state[1] @[PRNG.scala 70:11]
      state[3] <= state[2] @[PRNG.scala 70:11]
      state[4] <= state[3] @[PRNG.scala 70:11]
      state[5] <= state[4] @[PRNG.scala 70:11]
      state[6] <= state[5] @[PRNG.scala 70:11]
      state[7] <= state[6] @[PRNG.scala 70:11]
      state[8] <= state[7] @[PRNG.scala 70:11]
      state[9] <= state[8] @[PRNG.scala 70:11]
      state[10] <= state[9] @[PRNG.scala 70:11]
      state[11] <= state[10] @[PRNG.scala 70:11]
      state[12] <= state[11] @[PRNG.scala 70:11]
      state[13] <= state[12] @[PRNG.scala 70:11]
      state[14] <= state[13] @[PRNG.scala 70:11]
      state[15] <= state[14] @[PRNG.scala 70:11]
    when io.seed.valid : @[PRNG.scala 73:22]
      state[0] <= io.seed.bits[0] @[PRNG.scala 74:11]
      state[1] <= io.seed.bits[1] @[PRNG.scala 74:11]
      state[2] <= io.seed.bits[2] @[PRNG.scala 74:11]
      state[3] <= io.seed.bits[3] @[PRNG.scala 74:11]
      state[4] <= io.seed.bits[4] @[PRNG.scala 74:11]
      state[5] <= io.seed.bits[5] @[PRNG.scala 74:11]
      state[6] <= io.seed.bits[6] @[PRNG.scala 74:11]
      state[7] <= io.seed.bits[7] @[PRNG.scala 74:11]
      state[8] <= io.seed.bits[8] @[PRNG.scala 74:11]
      state[9] <= io.seed.bits[9] @[PRNG.scala 74:11]
      state[10] <= io.seed.bits[10] @[PRNG.scala 74:11]
      state[11] <= io.seed.bits[11] @[PRNG.scala 74:11]
      state[12] <= io.seed.bits[12] @[PRNG.scala 74:11]
      state[13] <= io.seed.bits[13] @[PRNG.scala 74:11]
      state[14] <= io.seed.bits[14] @[PRNG.scala 74:11]
      state[15] <= io.seed.bits[15] @[PRNG.scala 74:11]
    io.out <= state @[PRNG.scala 78:10]

  module PRNGUpdateSeedTest :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst a of CyclePRNG @[PRNGSpec.scala 47:28]
    a.clock <= clock
    a.reset <= reset
    reg count : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Counter.scala 62:40]
    wire done : UInt<1>
    done <= UInt<1>("h0")
    when UInt<1>("h1") : @[Counter.scala 120:16]
      node wrap_wrap = eq(count, UInt<2>("h3")) @[Counter.scala 74:24]
      node _wrap_value_T = add(count, UInt<1>("h1")) @[Counter.scala 78:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 78:24]
      count <= _wrap_value_T_1 @[Counter.scala 78:15]
      done <= wrap_wrap @[Counter.scala 120:23]
    a.io.increment <= UInt<1>("h1") @[PRNGSpec.scala 51:18]
    node _a_io_seed_valid_T = eq(count, UInt<2>("h2")) @[PRNGSpec.scala 52:28]
    a.io.seed.valid <= _a_io_seed_valid_T @[PRNGSpec.scala 52:19]
    a.io.seed.bits[0] <= UInt<1>("h1") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[1] <= UInt<1>("h1") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[2] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[3] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[4] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[5] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[6] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[7] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[8] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[9] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[10] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[11] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[12] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[13] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[14] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    a.io.seed.bits[15] <= UInt<1>("h0") @[PRNGSpec.scala 53:18]
    node _T = eq(count, UInt<2>("h3")) @[PRNGSpec.scala 55:14]
    when _T : @[PRNGSpec.scala 55:23]
      node lo_lo_lo = cat(a.io.out[1], a.io.out[0]) @[PRNGSpec.scala 56:21]
      node lo_lo_hi = cat(a.io.out[3], a.io.out[2]) @[PRNGSpec.scala 56:21]
      node lo_lo = cat(lo_lo_hi, lo_lo_lo) @[PRNGSpec.scala 56:21]
      node lo_hi_lo = cat(a.io.out[5], a.io.out[4]) @[PRNGSpec.scala 56:21]
      node lo_hi_hi = cat(a.io.out[7], a.io.out[6]) @[PRNGSpec.scala 56:21]
      node lo_hi = cat(lo_hi_hi, lo_hi_lo) @[PRNGSpec.scala 56:21]
      node lo = cat(lo_hi, lo_lo) @[PRNGSpec.scala 56:21]
      node hi_lo_lo = cat(a.io.out[9], a.io.out[8]) @[PRNGSpec.scala 56:21]
      node hi_lo_hi = cat(a.io.out[11], a.io.out[10]) @[PRNGSpec.scala 56:21]
      node hi_lo = cat(hi_lo_hi, hi_lo_lo) @[PRNGSpec.scala 56:21]
      node hi_hi_lo = cat(a.io.out[13], a.io.out[12]) @[PRNGSpec.scala 56:21]
      node hi_hi_hi = cat(a.io.out[15], a.io.out[14]) @[PRNGSpec.scala 56:21]
      node hi_hi = cat(hi_hi_hi, hi_hi_lo) @[PRNGSpec.scala 56:21]
      node hi = cat(hi_hi, hi_lo) @[PRNGSpec.scala 56:21]
      node _T_1 = cat(hi, lo) @[PRNGSpec.scala 56:21]
      node _T_2 = eq(_T_1, UInt<2>("h3")) @[PRNGSpec.scala 56:28]
      node _T_3 = bits(reset, 0, 0) @[PRNGSpec.scala 56:11]
      node _T_4 = eq(_T_3, UInt<1>("h0")) @[PRNGSpec.scala 56:11]
      when _T_4 : @[PRNGSpec.scala 56:11]
        assert(clock, _T_2, UInt<1>("h1"), "") : assert @[PRNGSpec.scala 56:11]
        node _T_5 = eq(_T_2, UInt<1>("h0")) @[PRNGSpec.scala 56:11]
        when _T_5 : @[PRNGSpec.scala 56:11]
          printf(clock, UInt<1>("h1"), "Assertion failed: Output didn't match!\n    at PRNGSpec.scala:56 assert(a.io.out.asUInt === expected.U, \"Output didn't match!\")\n") : printf @[PRNGSpec.scala 56:11]
    when done : @[PRNGSpec.scala 59:14]
      node _T_6 = bits(reset, 0, 0) @[PRNGSpec.scala 60:9]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[PRNGSpec.scala 60:9]
      when _T_7 : @[PRNGSpec.scala 60:9]
        stop(clock, UInt<1>("h1"), 0) : stop @[PRNGSpec.scala 60:9]
