circuit UInt2VecOfBool :
  module UInt2VecOfBool :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    reg cycle : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 62:40]
    wire done : UInt<1>
    done <= UInt<1>("h0")
    when UInt<1>("h1") : @[Counter.scala 120:16]
      node wrap_wrap = eq(cycle, UInt<1>("h1")) @[Counter.scala 74:24]
      node _wrap_value_T = add(cycle, UInt<1>("h1")) @[Counter.scala 78:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 78:24]
      cycle <= _wrap_value_T_1 @[Counter.scala 78:15]
      done <= wrap_wrap @[Counter.scala 120:23]
    when done : @[CookbookSpec.scala 19:14]
      node _T = bits(reset, 0, 0) @[CookbookSpec.scala 19:20]
      node _T_1 = eq(_T, UInt<1>("h0")) @[CookbookSpec.scala 19:20]
      when _T_1 : @[CookbookSpec.scala 19:20]
        stop(clock, UInt<1>("h1"), 0) : stop @[CookbookSpec.scala 19:20]
    wire vec : UInt<1>[4] @[UInt2VecOfBool.scala 15:20]
    vec[0] <= UInt<1>("h0") @[UInt2VecOfBool.scala 15:20]
    vec[1] <= UInt<1>("h0") @[UInt2VecOfBool.scala 15:20]
    vec[2] <= UInt<1>("h1") @[UInt2VecOfBool.scala 15:20]
    vec[3] <= UInt<1>("h1") @[UInt2VecOfBool.scala 15:20]
    node _T_2 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 16:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[UInt2VecOfBool.scala 16:9]
    when _T_3 : @[UInt2VecOfBool.scala 16:9]
      printf(clock, UInt<1>("h1"), "Vec(%d, %d, %d, %d)", vec[0], vec[1], vec[2], vec[3]) : printf @[UInt2VecOfBool.scala 16:9]
    node _T_4 = eq(vec[0], UInt<1>("h0")) @[UInt2VecOfBool.scala 19:17]
    node _T_5 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 19:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[UInt2VecOfBool.scala 19:9]
    when _T_6 : @[UInt2VecOfBool.scala 19:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert @[UInt2VecOfBool.scala 19:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[UInt2VecOfBool.scala 19:9]
      when _T_7 : @[UInt2VecOfBool.scala 19:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UInt2VecOfBool.scala:19 assert(vec(0) === false.B)\n") : printf_1 @[UInt2VecOfBool.scala 19:9]
    node _T_8 = eq(vec[1], UInt<1>("h0")) @[UInt2VecOfBool.scala 20:17]
    node _T_9 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 20:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[UInt2VecOfBool.scala 20:9]
    when _T_10 : @[UInt2VecOfBool.scala 20:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[UInt2VecOfBool.scala 20:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[UInt2VecOfBool.scala 20:9]
      when _T_11 : @[UInt2VecOfBool.scala 20:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UInt2VecOfBool.scala:20 assert(vec(1) === false.B)\n") : printf_2 @[UInt2VecOfBool.scala 20:9]
    node _T_12 = eq(vec[2], UInt<1>("h1")) @[UInt2VecOfBool.scala 21:17]
    node _T_13 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 21:9]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[UInt2VecOfBool.scala 21:9]
    when _T_14 : @[UInt2VecOfBool.scala 21:9]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_2 @[UInt2VecOfBool.scala 21:9]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[UInt2VecOfBool.scala 21:9]
      when _T_15 : @[UInt2VecOfBool.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UInt2VecOfBool.scala:21 assert(vec(2) === true.B)\n") : printf_3 @[UInt2VecOfBool.scala 21:9]
    node _T_16 = eq(vec[3], UInt<1>("h1")) @[UInt2VecOfBool.scala 22:17]
    node _T_17 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 22:9]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[UInt2VecOfBool.scala 22:9]
    when _T_18 : @[UInt2VecOfBool.scala 22:9]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_3 @[UInt2VecOfBool.scala 22:9]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[UInt2VecOfBool.scala 22:9]
      when _T_19 : @[UInt2VecOfBool.scala 22:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at UInt2VecOfBool.scala:22 assert(vec(3) === true.B)\n") : printf_4 @[UInt2VecOfBool.scala 22:9]
