circuit MixedVecAssignTester :
  module MixedVecAssignTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire v : { 7 : UInt<4>, 6 : UInt<4>, 5 : UInt<4>, 4 : UInt<4>, 3 : UInt<4>, 2 : UInt<4>, 1 : UInt<4>, 0 : UInt<4>} @[MixedVec.scala 28:26]
    v.0 <= UInt<4>("hb") @[MixedVec.scala 31:9]
    v.1 <= UInt<4>("he") @[MixedVec.scala 31:9]
    v.2 <= UInt<4>("hd") @[MixedVec.scala 31:9]
    v.3 <= UInt<4>("h4") @[MixedVec.scala 31:9]
    v.4 <= UInt<4>("hb") @[MixedVec.scala 31:9]
    v.5 <= UInt<4>("h8") @[MixedVec.scala 31:9]
    v.6 <= UInt<4>("h3") @[MixedVec.scala 31:9]
    v.7 <= UInt<4>("h2") @[MixedVec.scala 31:9]
    node _T = eq(v.0, UInt<4>("hb")) @[MixedVecSpec.scala 14:14]
    node _T_1 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_2 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[MixedVecSpec.scala 14:11]
      node _T_3 = eq(_T, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_3 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf @[MixedVecSpec.scala 14:11]
    node _T_4 = eq(v.1, UInt<4>("he")) @[MixedVecSpec.scala 14:14]
    node _T_5 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_6 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[MixedVecSpec.scala 14:11]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_7 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_1 @[MixedVecSpec.scala 14:11]
    node _T_8 = eq(v.2, UInt<4>("hd")) @[MixedVecSpec.scala 14:14]
    node _T_9 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_10 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[MixedVecSpec.scala 14:11]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_11 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_2 @[MixedVecSpec.scala 14:11]
    node _T_12 = eq(v.3, UInt<3>("h4")) @[MixedVecSpec.scala 14:14]
    node _T_13 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_14 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[MixedVecSpec.scala 14:11]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_15 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_3 @[MixedVecSpec.scala 14:11]
    node _T_16 = eq(v.4, UInt<4>("hb")) @[MixedVecSpec.scala 14:14]
    node _T_17 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_18 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_4 @[MixedVecSpec.scala 14:11]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_19 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_4 @[MixedVecSpec.scala 14:11]
    node _T_20 = eq(v.5, UInt<4>("h8")) @[MixedVecSpec.scala 14:14]
    node _T_21 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_22 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_5 @[MixedVecSpec.scala 14:11]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_23 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_5 @[MixedVecSpec.scala 14:11]
    node _T_24 = eq(v.6, UInt<2>("h3")) @[MixedVecSpec.scala 14:14]
    node _T_25 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_26 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_24, UInt<1>("h1"), "") : assert_6 @[MixedVecSpec.scala 14:11]
      node _T_27 = eq(_T_24, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_27 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_6 @[MixedVecSpec.scala 14:11]
    node _T_28 = eq(v.7, UInt<2>("h2")) @[MixedVecSpec.scala 14:14]
    node _T_29 = bits(reset, 0, 0) @[MixedVecSpec.scala 14:11]
    node _T_30 = eq(_T_29, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
    when _T_30 : @[MixedVecSpec.scala 14:11]
      assert(clock, _T_28, UInt<1>("h1"), "") : assert_7 @[MixedVecSpec.scala 14:11]
      node _T_31 = eq(_T_28, UInt<1>("h0")) @[MixedVecSpec.scala 14:11]
      when _T_31 : @[MixedVecSpec.scala 14:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:14 assert(a === b.asUInt)\n") : printf_7 @[MixedVecSpec.scala 14:11]
    node _T_32 = bits(reset, 0, 0) @[MixedVecSpec.scala 16:7]
    node _T_33 = eq(_T_32, UInt<1>("h0")) @[MixedVecSpec.scala 16:7]
    when _T_33 : @[MixedVecSpec.scala 16:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[MixedVecSpec.scala 16:7]
