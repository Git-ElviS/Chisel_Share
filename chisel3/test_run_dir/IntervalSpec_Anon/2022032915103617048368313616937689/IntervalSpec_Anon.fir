circuit IntervalSpec_Anon :
  module IntervalSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire s1 : SInt<5> @[IntervalSpec.scala 945:22]
    s1 <= asSInt(UInt<4>("h7")) @[IntervalSpec.scala 946:12]
    wire s2 : SInt<5> @[IntervalSpec.scala 947:22]
    s2 <= asSInt(UInt<4>("h7")) @[IntervalSpec.scala 948:12]
    node i1 = asInterval(s1, -16, 15, 0) @[IntervalSpec.scala 949:31]
    node i2 = asInterval(s1, -32, 30, 1) @[IntervalSpec.scala 950:31]
    node _T = asSInt(i1) @[IntervalSpec.scala 951:30]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 951:15]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[IntervalSpec.scala 951:15]
    when _T_2 : @[IntervalSpec.scala 951:15]
      printf(clock, UInt<1>("h1"), "i1 %d\n", _T) : printf @[IntervalSpec.scala 951:15]
    node _T_3 = asSInt(i2) @[IntervalSpec.scala 952:30]
    node _T_4 = bits(reset, 0, 0) @[IntervalSpec.scala 952:15]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[IntervalSpec.scala 952:15]
    when _T_5 : @[IntervalSpec.scala 952:15]
      printf(clock, UInt<1>("h1"), "i2 %d\n", _T_3) : printf_1 @[IntervalSpec.scala 952:15]
    node _T_6 = eq(i1, asInterval(UInt<4>("h7"), 7, 7, 0)) @[IntervalSpec.scala 953:27]
    node _T_7 = bits(reset, 0, 0) @[IntervalSpec.scala 953:23]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[IntervalSpec.scala 953:23]
    when _T_8 : @[IntervalSpec.scala 953:23]
      assert(clock, _T_6, UInt<1>("h1"), "") : assert @[IntervalSpec.scala 953:23]
      node _T_9 = eq(_T_6, UInt<1>("h0")) @[IntervalSpec.scala 953:23]
      when _T_9 : @[IntervalSpec.scala 953:23]
        printf(clock, UInt<1>("h1"), "Assertion failed: i1 is wrong\n    at IntervalSpec.scala:953 chisel3.assert(i1 === 7.I, \"i1 is wrong\")\n") : printf_2 @[IntervalSpec.scala 953:23]
    node _T_10 = eq(i2, asInterval(UInt<4>("h7"), 7, 7, 1)) @[IntervalSpec.scala 954:27]
    node _T_11 = bits(reset, 0, 0) @[IntervalSpec.scala 954:23]
    node _T_12 = eq(_T_11, UInt<1>("h0")) @[IntervalSpec.scala 954:23]
    when _T_12 : @[IntervalSpec.scala 954:23]
      assert(clock, _T_10, UInt<1>("h1"), "") : assert_1 @[IntervalSpec.scala 954:23]
      node _T_13 = eq(_T_10, UInt<1>("h0")) @[IntervalSpec.scala 954:23]
      when _T_13 : @[IntervalSpec.scala 954:23]
        printf(clock, UInt<1>("h1"), "Assertion failed: i2 is wrong\n    at IntervalSpec.scala:954 chisel3.assert(i2 === (3.5).I(binaryPoint = 1.BP), \"i2 is wrong\")\n") : printf_3 @[IntervalSpec.scala 954:23]
    node _T_14 = bits(reset, 0, 0) @[IntervalSpec.scala 955:13]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[IntervalSpec.scala 955:13]
    when _T_15 : @[IntervalSpec.scala 955:13]
      stop(clock, UInt<1>("h1"), 0) : stop @[IntervalSpec.scala 955:13]
