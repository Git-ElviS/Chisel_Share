circuit ParameterizedOneHotTester :
  module ParameterizedOneHot :
    input clock : Clock
    input reset : Reset
    output io : { flip selectors : UInt<1>[4], out : SInt<8>}

    wire _io_out_WIRE : SInt<5> @[Mux.scala 27:73]
    node _io_out_T = asUInt(asSInt(UInt<3>("h5"))) @[Mux.scala 27:73]
    node _io_out_T_1 = asSInt(_io_out_T) @[Mux.scala 27:73]
    _io_out_WIRE <= _io_out_T_1 @[Mux.scala 27:73]
    wire _io_out_WIRE_1 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_2 = asUInt(asSInt(UInt<4>("hb"))) @[Mux.scala 27:73]
    node _io_out_T_3 = asSInt(_io_out_T_2) @[Mux.scala 27:73]
    _io_out_WIRE_1 <= _io_out_T_3 @[Mux.scala 27:73]
    wire _io_out_WIRE_2 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_4 = asUInt(asSInt(UInt<4>("h9"))) @[Mux.scala 27:73]
    node _io_out_T_5 = asSInt(_io_out_T_4) @[Mux.scala 27:73]
    _io_out_WIRE_2 <= _io_out_T_5 @[Mux.scala 27:73]
    wire _io_out_WIRE_3 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_6 = asUInt(asSInt(UInt<5>("h15"))) @[Mux.scala 27:73]
    node _io_out_T_7 = asSInt(_io_out_T_6) @[Mux.scala 27:73]
    _io_out_WIRE_3 <= _io_out_T_7 @[Mux.scala 27:73]
    node _io_out_T_8 = mux(io.selectors[0], _io_out_WIRE, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_9 = mux(io.selectors[1], _io_out_WIRE_1, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_10 = mux(io.selectors[2], _io_out_WIRE_2, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_11 = mux(io.selectors[3], _io_out_WIRE_3, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_12 = or(_io_out_T_8, _io_out_T_9) @[Mux.scala 27:73]
    node _io_out_T_13 = asSInt(_io_out_T_12) @[Mux.scala 27:73]
    node _io_out_T_14 = or(_io_out_T_13, _io_out_T_10) @[Mux.scala 27:73]
    node _io_out_T_15 = asSInt(_io_out_T_14) @[Mux.scala 27:73]
    node _io_out_T_16 = or(_io_out_T_15, _io_out_T_11) @[Mux.scala 27:73]
    node _io_out_T_17 = asSInt(_io_out_T_16) @[Mux.scala 27:73]
    wire _io_out_WIRE_4 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_18 = asUInt(_io_out_T_17) @[Mux.scala 27:73]
    node _io_out_T_19 = asSInt(_io_out_T_18) @[Mux.scala 27:73]
    _io_out_WIRE_4 <= _io_out_T_19 @[Mux.scala 27:73]
    io.out <= _io_out_WIRE_4 @[OneHotMuxSpec.scala 200:10]

  module ParameterizedOneHot_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip selectors : UInt<1>[4], out : SInt<8>}

    wire _io_out_WIRE : SInt<5> @[Mux.scala 27:73]
    node _io_out_T = asUInt(asSInt(UInt<3>("h5"))) @[Mux.scala 27:73]
    node _io_out_T_1 = asSInt(_io_out_T) @[Mux.scala 27:73]
    _io_out_WIRE <= _io_out_T_1 @[Mux.scala 27:73]
    wire _io_out_WIRE_1 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_2 = asUInt(asSInt(UInt<4>("hb"))) @[Mux.scala 27:73]
    node _io_out_T_3 = asSInt(_io_out_T_2) @[Mux.scala 27:73]
    _io_out_WIRE_1 <= _io_out_T_3 @[Mux.scala 27:73]
    wire _io_out_WIRE_2 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_4 = asUInt(asSInt(UInt<4>("h9"))) @[Mux.scala 27:73]
    node _io_out_T_5 = asSInt(_io_out_T_4) @[Mux.scala 27:73]
    _io_out_WIRE_2 <= _io_out_T_5 @[Mux.scala 27:73]
    wire _io_out_WIRE_3 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_6 = asUInt(asSInt(UInt<5>("h15"))) @[Mux.scala 27:73]
    node _io_out_T_7 = asSInt(_io_out_T_6) @[Mux.scala 27:73]
    _io_out_WIRE_3 <= _io_out_T_7 @[Mux.scala 27:73]
    node _io_out_T_8 = mux(io.selectors[0], _io_out_WIRE, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_9 = mux(io.selectors[1], _io_out_WIRE_1, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_10 = mux(io.selectors[2], _io_out_WIRE_2, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_11 = mux(io.selectors[3], _io_out_WIRE_3, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_12 = or(_io_out_T_8, _io_out_T_9) @[Mux.scala 27:73]
    node _io_out_T_13 = asSInt(_io_out_T_12) @[Mux.scala 27:73]
    node _io_out_T_14 = or(_io_out_T_13, _io_out_T_10) @[Mux.scala 27:73]
    node _io_out_T_15 = asSInt(_io_out_T_14) @[Mux.scala 27:73]
    node _io_out_T_16 = or(_io_out_T_15, _io_out_T_11) @[Mux.scala 27:73]
    node _io_out_T_17 = asSInt(_io_out_T_16) @[Mux.scala 27:73]
    wire _io_out_WIRE_4 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_18 = asUInt(_io_out_T_17) @[Mux.scala 27:73]
    node _io_out_T_19 = asSInt(_io_out_T_18) @[Mux.scala 27:73]
    _io_out_WIRE_4 <= _io_out_T_19 @[Mux.scala 27:73]
    io.out <= _io_out_WIRE_4 @[OneHotMuxSpec.scala 200:10]

  module ParameterizedOneHot_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip selectors : UInt<1>[4], out : SInt<8>}

    wire _io_out_WIRE : SInt<5> @[Mux.scala 27:73]
    node _io_out_T = asUInt(asSInt(UInt<3>("h5"))) @[Mux.scala 27:73]
    node _io_out_T_1 = asSInt(_io_out_T) @[Mux.scala 27:73]
    _io_out_WIRE <= _io_out_T_1 @[Mux.scala 27:73]
    wire _io_out_WIRE_1 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_2 = asUInt(asSInt(UInt<4>("hb"))) @[Mux.scala 27:73]
    node _io_out_T_3 = asSInt(_io_out_T_2) @[Mux.scala 27:73]
    _io_out_WIRE_1 <= _io_out_T_3 @[Mux.scala 27:73]
    wire _io_out_WIRE_2 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_4 = asUInt(asSInt(UInt<4>("h9"))) @[Mux.scala 27:73]
    node _io_out_T_5 = asSInt(_io_out_T_4) @[Mux.scala 27:73]
    _io_out_WIRE_2 <= _io_out_T_5 @[Mux.scala 27:73]
    wire _io_out_WIRE_3 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_6 = asUInt(asSInt(UInt<5>("h15"))) @[Mux.scala 27:73]
    node _io_out_T_7 = asSInt(_io_out_T_6) @[Mux.scala 27:73]
    _io_out_WIRE_3 <= _io_out_T_7 @[Mux.scala 27:73]
    node _io_out_T_8 = mux(io.selectors[0], _io_out_WIRE, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_9 = mux(io.selectors[1], _io_out_WIRE_1, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_10 = mux(io.selectors[2], _io_out_WIRE_2, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_11 = mux(io.selectors[3], _io_out_WIRE_3, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_12 = or(_io_out_T_8, _io_out_T_9) @[Mux.scala 27:73]
    node _io_out_T_13 = asSInt(_io_out_T_12) @[Mux.scala 27:73]
    node _io_out_T_14 = or(_io_out_T_13, _io_out_T_10) @[Mux.scala 27:73]
    node _io_out_T_15 = asSInt(_io_out_T_14) @[Mux.scala 27:73]
    node _io_out_T_16 = or(_io_out_T_15, _io_out_T_11) @[Mux.scala 27:73]
    node _io_out_T_17 = asSInt(_io_out_T_16) @[Mux.scala 27:73]
    wire _io_out_WIRE_4 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_18 = asUInt(_io_out_T_17) @[Mux.scala 27:73]
    node _io_out_T_19 = asSInt(_io_out_T_18) @[Mux.scala 27:73]
    _io_out_WIRE_4 <= _io_out_T_19 @[Mux.scala 27:73]
    io.out <= _io_out_WIRE_4 @[OneHotMuxSpec.scala 200:10]

  module ParameterizedOneHot_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip selectors : UInt<1>[4], out : SInt<8>}

    wire _io_out_WIRE : SInt<5> @[Mux.scala 27:73]
    node _io_out_T = asUInt(asSInt(UInt<3>("h5"))) @[Mux.scala 27:73]
    node _io_out_T_1 = asSInt(_io_out_T) @[Mux.scala 27:73]
    _io_out_WIRE <= _io_out_T_1 @[Mux.scala 27:73]
    wire _io_out_WIRE_1 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_2 = asUInt(asSInt(UInt<4>("hb"))) @[Mux.scala 27:73]
    node _io_out_T_3 = asSInt(_io_out_T_2) @[Mux.scala 27:73]
    _io_out_WIRE_1 <= _io_out_T_3 @[Mux.scala 27:73]
    wire _io_out_WIRE_2 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_4 = asUInt(asSInt(UInt<4>("h9"))) @[Mux.scala 27:73]
    node _io_out_T_5 = asSInt(_io_out_T_4) @[Mux.scala 27:73]
    _io_out_WIRE_2 <= _io_out_T_5 @[Mux.scala 27:73]
    wire _io_out_WIRE_3 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_6 = asUInt(asSInt(UInt<5>("h15"))) @[Mux.scala 27:73]
    node _io_out_T_7 = asSInt(_io_out_T_6) @[Mux.scala 27:73]
    _io_out_WIRE_3 <= _io_out_T_7 @[Mux.scala 27:73]
    node _io_out_T_8 = mux(io.selectors[0], _io_out_WIRE, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_9 = mux(io.selectors[1], _io_out_WIRE_1, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_10 = mux(io.selectors[2], _io_out_WIRE_2, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_11 = mux(io.selectors[3], _io_out_WIRE_3, asSInt(UInt<1>("h0"))) @[Mux.scala 27:73]
    node _io_out_T_12 = or(_io_out_T_8, _io_out_T_9) @[Mux.scala 27:73]
    node _io_out_T_13 = asSInt(_io_out_T_12) @[Mux.scala 27:73]
    node _io_out_T_14 = or(_io_out_T_13, _io_out_T_10) @[Mux.scala 27:73]
    node _io_out_T_15 = asSInt(_io_out_T_14) @[Mux.scala 27:73]
    node _io_out_T_16 = or(_io_out_T_15, _io_out_T_11) @[Mux.scala 27:73]
    node _io_out_T_17 = asSInt(_io_out_T_16) @[Mux.scala 27:73]
    wire _io_out_WIRE_4 : SInt<5> @[Mux.scala 27:73]
    node _io_out_T_18 = asUInt(_io_out_T_17) @[Mux.scala 27:73]
    node _io_out_T_19 = asSInt(_io_out_T_18) @[Mux.scala 27:73]
    _io_out_WIRE_4 <= _io_out_T_19 @[Mux.scala 27:73]
    io.out <= _io_out_WIRE_4 @[OneHotMuxSpec.scala 200:10]

  module ParameterizedOneHotTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    inst dut of ParameterizedOneHot @[OneHotMuxSpec.scala 125:21]
    dut.clock <= clock
    dut.reset <= reset
    dut.io.selectors[0] <= UInt<1>("h1") @[OneHotMuxSpec.scala 126:22]
    dut.io.selectors[1] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut.io.selectors[2] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut.io.selectors[3] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    node _T = asUInt(dut.io.out) @[OneHotMuxSpec.scala 128:29]
    node _T_1 = asUInt(asSInt(UInt<8>("hfd"))) @[OneHotMuxSpec.scala 128:51]
    node _T_2 = eq(_T, _T_1) @[OneHotMuxSpec.scala 128:32]
    node _T_3 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 128:11]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
    when _T_4 : @[OneHotMuxSpec.scala 128:11]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[OneHotMuxSpec.scala 128:11]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
      when _T_5 : @[OneHotMuxSpec.scala 128:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at OneHotMuxSpec.scala:128 assert(dut.io.out.asUInt() === v.S(8.W).asUInt())\n") : printf @[OneHotMuxSpec.scala 128:11]
    inst dut_1 of ParameterizedOneHot_1 @[OneHotMuxSpec.scala 125:21]
    dut_1.clock <= clock
    dut_1.reset <= reset
    dut_1.io.selectors[0] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_1.io.selectors[1] <= UInt<1>("h1") @[OneHotMuxSpec.scala 126:22]
    dut_1.io.selectors[2] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_1.io.selectors[3] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    node _T_6 = asUInt(dut_1.io.out) @[OneHotMuxSpec.scala 128:29]
    node _T_7 = asUInt(asSInt(UInt<8>("hfb"))) @[OneHotMuxSpec.scala 128:51]
    node _T_8 = eq(_T_6, _T_7) @[OneHotMuxSpec.scala 128:32]
    node _T_9 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 128:11]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
    when _T_10 : @[OneHotMuxSpec.scala 128:11]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[OneHotMuxSpec.scala 128:11]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
      when _T_11 : @[OneHotMuxSpec.scala 128:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at OneHotMuxSpec.scala:128 assert(dut.io.out.asUInt() === v.S(8.W).asUInt())\n") : printf_1 @[OneHotMuxSpec.scala 128:11]
    inst dut_2 of ParameterizedOneHot_2 @[OneHotMuxSpec.scala 125:21]
    dut_2.clock <= clock
    dut_2.reset <= reset
    dut_2.io.selectors[0] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_2.io.selectors[1] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_2.io.selectors[2] <= UInt<1>("h1") @[OneHotMuxSpec.scala 126:22]
    dut_2.io.selectors[3] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    node _T_12 = asUInt(dut_2.io.out) @[OneHotMuxSpec.scala 128:29]
    node _T_13 = asUInt(asSInt(UInt<8>("hf9"))) @[OneHotMuxSpec.scala 128:51]
    node _T_14 = eq(_T_12, _T_13) @[OneHotMuxSpec.scala 128:32]
    node _T_15 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 128:11]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
    when _T_16 : @[OneHotMuxSpec.scala 128:11]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_2 @[OneHotMuxSpec.scala 128:11]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
      when _T_17 : @[OneHotMuxSpec.scala 128:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at OneHotMuxSpec.scala:128 assert(dut.io.out.asUInt() === v.S(8.W).asUInt())\n") : printf_2 @[OneHotMuxSpec.scala 128:11]
    inst dut_3 of ParameterizedOneHot_3 @[OneHotMuxSpec.scala 125:21]
    dut_3.clock <= clock
    dut_3.reset <= reset
    dut_3.io.selectors[0] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_3.io.selectors[1] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_3.io.selectors[2] <= UInt<1>("h0") @[OneHotMuxSpec.scala 126:22]
    dut_3.io.selectors[3] <= UInt<1>("h1") @[OneHotMuxSpec.scala 126:22]
    node _T_18 = asUInt(dut_3.io.out) @[OneHotMuxSpec.scala 128:29]
    node _T_19 = asUInt(asSInt(UInt<8>("hf5"))) @[OneHotMuxSpec.scala 128:51]
    node _T_20 = eq(_T_18, _T_19) @[OneHotMuxSpec.scala 128:32]
    node _T_21 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 128:11]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
    when _T_22 : @[OneHotMuxSpec.scala 128:11]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_3 @[OneHotMuxSpec.scala 128:11]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[OneHotMuxSpec.scala 128:11]
      when _T_23 : @[OneHotMuxSpec.scala 128:11]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at OneHotMuxSpec.scala:128 assert(dut.io.out.asUInt() === v.S(8.W).asUInt())\n") : printf_3 @[OneHotMuxSpec.scala 128:11]
    node _T_24 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 131:7]
    node _T_25 = eq(_T_24, UInt<1>("h0")) @[OneHotMuxSpec.scala 131:7]
    when _T_25 : @[OneHotMuxSpec.scala 131:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[OneHotMuxSpec.scala 131:7]
