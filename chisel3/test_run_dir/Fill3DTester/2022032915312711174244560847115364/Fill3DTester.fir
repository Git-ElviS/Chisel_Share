circuit Fill3DTester :
  module Fill3DTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire u : UInt<3>[4][4][3] @[Vec.scala 162:34]
    u[0][0][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][0][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][0][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][0][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][1][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][1][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][1][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][1][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][2][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][2][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][2][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][2][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][3][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][3][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][3][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[0][3][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][0][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][0][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][0][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][0][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][1][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][1][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][1][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][1][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][2][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][2][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][2][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][2][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][3][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][3][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][3][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[1][3][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][0][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][0][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][0][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][0][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][1][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][1][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][1][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][1][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][2][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][2][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][2][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][2][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][3][0] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][3][1] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][3][2] <= UInt<3>("h6") @[Vec.scala 162:34]
    u[2][3][3] <= UInt<3>("h6") @[Vec.scala 162:34]
    node _T = eq(u[2][3][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_1 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_2 : @[Vec.scala 123:35]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[Vec.scala 123:35]
      node _T_3 = eq(_T, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_3 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf @[Vec.scala 123:35]
    node _T_4 = eq(u[2][3][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_5 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_6 : @[Vec.scala 123:35]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[Vec.scala 123:35]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_7 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_1 @[Vec.scala 123:35]
    node _T_8 = eq(u[2][3][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_9 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_10 : @[Vec.scala 123:35]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[Vec.scala 123:35]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_11 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_2 @[Vec.scala 123:35]
    node _T_12 = eq(u[2][3][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_13 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_14 : @[Vec.scala 123:35]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[Vec.scala 123:35]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_15 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_3 @[Vec.scala 123:35]
    node _T_16 = eq(u[2][2][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_17 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_18 : @[Vec.scala 123:35]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_4 @[Vec.scala 123:35]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_19 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_4 @[Vec.scala 123:35]
    node _T_20 = eq(u[2][2][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_21 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_22 : @[Vec.scala 123:35]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_5 @[Vec.scala 123:35]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_23 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_5 @[Vec.scala 123:35]
    node _T_24 = eq(u[2][2][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_25 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_26 : @[Vec.scala 123:35]
      assert(clock, _T_24, UInt<1>("h1"), "") : assert_6 @[Vec.scala 123:35]
      node _T_27 = eq(_T_24, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_27 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_6 @[Vec.scala 123:35]
    node _T_28 = eq(u[2][2][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_29 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_30 = eq(_T_29, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_30 : @[Vec.scala 123:35]
      assert(clock, _T_28, UInt<1>("h1"), "") : assert_7 @[Vec.scala 123:35]
      node _T_31 = eq(_T_28, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_31 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_7 @[Vec.scala 123:35]
    node _T_32 = eq(u[2][1][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_33 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_34 : @[Vec.scala 123:35]
      assert(clock, _T_32, UInt<1>("h1"), "") : assert_8 @[Vec.scala 123:35]
      node _T_35 = eq(_T_32, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_35 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_8 @[Vec.scala 123:35]
    node _T_36 = eq(u[2][1][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_37 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_38 = eq(_T_37, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_38 : @[Vec.scala 123:35]
      assert(clock, _T_36, UInt<1>("h1"), "") : assert_9 @[Vec.scala 123:35]
      node _T_39 = eq(_T_36, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_39 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_9 @[Vec.scala 123:35]
    node _T_40 = eq(u[2][1][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_41 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_42 = eq(_T_41, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_42 : @[Vec.scala 123:35]
      assert(clock, _T_40, UInt<1>("h1"), "") : assert_10 @[Vec.scala 123:35]
      node _T_43 = eq(_T_40, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_43 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_10 @[Vec.scala 123:35]
    node _T_44 = eq(u[2][1][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_45 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_46 : @[Vec.scala 123:35]
      assert(clock, _T_44, UInt<1>("h1"), "") : assert_11 @[Vec.scala 123:35]
      node _T_47 = eq(_T_44, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_47 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_11 @[Vec.scala 123:35]
    node _T_48 = eq(u[2][0][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_49 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_50 = eq(_T_49, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_50 : @[Vec.scala 123:35]
      assert(clock, _T_48, UInt<1>("h1"), "") : assert_12 @[Vec.scala 123:35]
      node _T_51 = eq(_T_48, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_51 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_12 @[Vec.scala 123:35]
    node _T_52 = eq(u[2][0][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_53 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_54 = eq(_T_53, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_54 : @[Vec.scala 123:35]
      assert(clock, _T_52, UInt<1>("h1"), "") : assert_13 @[Vec.scala 123:35]
      node _T_55 = eq(_T_52, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_55 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_13 @[Vec.scala 123:35]
    node _T_56 = eq(u[2][0][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_57 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_58 : @[Vec.scala 123:35]
      assert(clock, _T_56, UInt<1>("h1"), "") : assert_14 @[Vec.scala 123:35]
      node _T_59 = eq(_T_56, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_59 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_14 @[Vec.scala 123:35]
    node _T_60 = eq(u[2][0][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_61 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_62 = eq(_T_61, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_62 : @[Vec.scala 123:35]
      assert(clock, _T_60, UInt<1>("h1"), "") : assert_15 @[Vec.scala 123:35]
      node _T_63 = eq(_T_60, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_63 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_15 @[Vec.scala 123:35]
    node _T_64 = eq(u[1][3][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_65 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_66 = eq(_T_65, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_66 : @[Vec.scala 123:35]
      assert(clock, _T_64, UInt<1>("h1"), "") : assert_16 @[Vec.scala 123:35]
      node _T_67 = eq(_T_64, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_67 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_16 @[Vec.scala 123:35]
    node _T_68 = eq(u[1][3][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_69 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_70 = eq(_T_69, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_70 : @[Vec.scala 123:35]
      assert(clock, _T_68, UInt<1>("h1"), "") : assert_17 @[Vec.scala 123:35]
      node _T_71 = eq(_T_68, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_71 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_17 @[Vec.scala 123:35]
    node _T_72 = eq(u[1][3][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_73 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_74 = eq(_T_73, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_74 : @[Vec.scala 123:35]
      assert(clock, _T_72, UInt<1>("h1"), "") : assert_18 @[Vec.scala 123:35]
      node _T_75 = eq(_T_72, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_75 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_18 @[Vec.scala 123:35]
    node _T_76 = eq(u[1][3][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_77 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_78 = eq(_T_77, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_78 : @[Vec.scala 123:35]
      assert(clock, _T_76, UInt<1>("h1"), "") : assert_19 @[Vec.scala 123:35]
      node _T_79 = eq(_T_76, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_79 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_19 @[Vec.scala 123:35]
    node _T_80 = eq(u[1][2][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_81 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_82 = eq(_T_81, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_82 : @[Vec.scala 123:35]
      assert(clock, _T_80, UInt<1>("h1"), "") : assert_20 @[Vec.scala 123:35]
      node _T_83 = eq(_T_80, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_83 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_20 @[Vec.scala 123:35]
    node _T_84 = eq(u[1][2][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_85 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_86 = eq(_T_85, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_86 : @[Vec.scala 123:35]
      assert(clock, _T_84, UInt<1>("h1"), "") : assert_21 @[Vec.scala 123:35]
      node _T_87 = eq(_T_84, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_87 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_21 @[Vec.scala 123:35]
    node _T_88 = eq(u[1][2][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_89 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_90 = eq(_T_89, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_90 : @[Vec.scala 123:35]
      assert(clock, _T_88, UInt<1>("h1"), "") : assert_22 @[Vec.scala 123:35]
      node _T_91 = eq(_T_88, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_91 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_22 @[Vec.scala 123:35]
    node _T_92 = eq(u[1][2][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_93 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_94 = eq(_T_93, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_94 : @[Vec.scala 123:35]
      assert(clock, _T_92, UInt<1>("h1"), "") : assert_23 @[Vec.scala 123:35]
      node _T_95 = eq(_T_92, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_95 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_23 @[Vec.scala 123:35]
    node _T_96 = eq(u[1][1][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_97 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_98 = eq(_T_97, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_98 : @[Vec.scala 123:35]
      assert(clock, _T_96, UInt<1>("h1"), "") : assert_24 @[Vec.scala 123:35]
      node _T_99 = eq(_T_96, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_99 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_24 @[Vec.scala 123:35]
    node _T_100 = eq(u[1][1][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_101 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_102 = eq(_T_101, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_102 : @[Vec.scala 123:35]
      assert(clock, _T_100, UInt<1>("h1"), "") : assert_25 @[Vec.scala 123:35]
      node _T_103 = eq(_T_100, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_103 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_25 @[Vec.scala 123:35]
    node _T_104 = eq(u[1][1][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_105 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_106 = eq(_T_105, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_106 : @[Vec.scala 123:35]
      assert(clock, _T_104, UInt<1>("h1"), "") : assert_26 @[Vec.scala 123:35]
      node _T_107 = eq(_T_104, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_107 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_26 @[Vec.scala 123:35]
    node _T_108 = eq(u[1][1][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_109 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_110 = eq(_T_109, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_110 : @[Vec.scala 123:35]
      assert(clock, _T_108, UInt<1>("h1"), "") : assert_27 @[Vec.scala 123:35]
      node _T_111 = eq(_T_108, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_111 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_27 @[Vec.scala 123:35]
    node _T_112 = eq(u[1][0][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_113 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_114 = eq(_T_113, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_114 : @[Vec.scala 123:35]
      assert(clock, _T_112, UInt<1>("h1"), "") : assert_28 @[Vec.scala 123:35]
      node _T_115 = eq(_T_112, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_115 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_28 @[Vec.scala 123:35]
    node _T_116 = eq(u[1][0][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_117 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_118 = eq(_T_117, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_118 : @[Vec.scala 123:35]
      assert(clock, _T_116, UInt<1>("h1"), "") : assert_29 @[Vec.scala 123:35]
      node _T_119 = eq(_T_116, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_119 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_29 @[Vec.scala 123:35]
    node _T_120 = eq(u[1][0][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_121 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_122 = eq(_T_121, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_122 : @[Vec.scala 123:35]
      assert(clock, _T_120, UInt<1>("h1"), "") : assert_30 @[Vec.scala 123:35]
      node _T_123 = eq(_T_120, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_123 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_30 @[Vec.scala 123:35]
    node _T_124 = eq(u[1][0][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_125 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_126 = eq(_T_125, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_126 : @[Vec.scala 123:35]
      assert(clock, _T_124, UInt<1>("h1"), "") : assert_31 @[Vec.scala 123:35]
      node _T_127 = eq(_T_124, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_127 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_31 @[Vec.scala 123:35]
    node _T_128 = eq(u[0][3][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_129 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_130 = eq(_T_129, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_130 : @[Vec.scala 123:35]
      assert(clock, _T_128, UInt<1>("h1"), "") : assert_32 @[Vec.scala 123:35]
      node _T_131 = eq(_T_128, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_131 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_32 @[Vec.scala 123:35]
    node _T_132 = eq(u[0][3][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_133 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_134 = eq(_T_133, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_134 : @[Vec.scala 123:35]
      assert(clock, _T_132, UInt<1>("h1"), "") : assert_33 @[Vec.scala 123:35]
      node _T_135 = eq(_T_132, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_135 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_33 @[Vec.scala 123:35]
    node _T_136 = eq(u[0][3][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_137 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_138 = eq(_T_137, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_138 : @[Vec.scala 123:35]
      assert(clock, _T_136, UInt<1>("h1"), "") : assert_34 @[Vec.scala 123:35]
      node _T_139 = eq(_T_136, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_139 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_34 @[Vec.scala 123:35]
    node _T_140 = eq(u[0][3][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_141 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_142 = eq(_T_141, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_142 : @[Vec.scala 123:35]
      assert(clock, _T_140, UInt<1>("h1"), "") : assert_35 @[Vec.scala 123:35]
      node _T_143 = eq(_T_140, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_143 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_35 @[Vec.scala 123:35]
    node _T_144 = eq(u[0][2][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_145 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_146 = eq(_T_145, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_146 : @[Vec.scala 123:35]
      assert(clock, _T_144, UInt<1>("h1"), "") : assert_36 @[Vec.scala 123:35]
      node _T_147 = eq(_T_144, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_147 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_36 @[Vec.scala 123:35]
    node _T_148 = eq(u[0][2][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_149 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_150 = eq(_T_149, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_150 : @[Vec.scala 123:35]
      assert(clock, _T_148, UInt<1>("h1"), "") : assert_37 @[Vec.scala 123:35]
      node _T_151 = eq(_T_148, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_151 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_37 @[Vec.scala 123:35]
    node _T_152 = eq(u[0][2][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_153 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_154 = eq(_T_153, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_154 : @[Vec.scala 123:35]
      assert(clock, _T_152, UInt<1>("h1"), "") : assert_38 @[Vec.scala 123:35]
      node _T_155 = eq(_T_152, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_155 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_38 @[Vec.scala 123:35]
    node _T_156 = eq(u[0][2][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_157 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_158 = eq(_T_157, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_158 : @[Vec.scala 123:35]
      assert(clock, _T_156, UInt<1>("h1"), "") : assert_39 @[Vec.scala 123:35]
      node _T_159 = eq(_T_156, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_159 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_39 @[Vec.scala 123:35]
    node _T_160 = eq(u[0][1][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_161 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_162 = eq(_T_161, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_162 : @[Vec.scala 123:35]
      assert(clock, _T_160, UInt<1>("h1"), "") : assert_40 @[Vec.scala 123:35]
      node _T_163 = eq(_T_160, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_163 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_40 @[Vec.scala 123:35]
    node _T_164 = eq(u[0][1][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_165 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_166 = eq(_T_165, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_166 : @[Vec.scala 123:35]
      assert(clock, _T_164, UInt<1>("h1"), "") : assert_41 @[Vec.scala 123:35]
      node _T_167 = eq(_T_164, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_167 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_41 @[Vec.scala 123:35]
    node _T_168 = eq(u[0][1][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_169 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_170 = eq(_T_169, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_170 : @[Vec.scala 123:35]
      assert(clock, _T_168, UInt<1>("h1"), "") : assert_42 @[Vec.scala 123:35]
      node _T_171 = eq(_T_168, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_171 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_42 @[Vec.scala 123:35]
    node _T_172 = eq(u[0][1][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_173 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_174 = eq(_T_173, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_174 : @[Vec.scala 123:35]
      assert(clock, _T_172, UInt<1>("h1"), "") : assert_43 @[Vec.scala 123:35]
      node _T_175 = eq(_T_172, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_175 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_43 @[Vec.scala 123:35]
    node _T_176 = eq(u[0][0][0], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_177 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_178 = eq(_T_177, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_178 : @[Vec.scala 123:35]
      assert(clock, _T_176, UInt<1>("h1"), "") : assert_44 @[Vec.scala 123:35]
      node _T_179 = eq(_T_176, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_179 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_44 @[Vec.scala 123:35]
    node _T_180 = eq(u[0][0][1], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_181 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_182 = eq(_T_181, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_182 : @[Vec.scala 123:35]
      assert(clock, _T_180, UInt<1>("h1"), "") : assert_45 @[Vec.scala 123:35]
      node _T_183 = eq(_T_180, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_183 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_45 @[Vec.scala 123:35]
    node _T_184 = eq(u[0][0][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_185 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_186 = eq(_T_185, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_186 : @[Vec.scala 123:35]
      assert(clock, _T_184, UInt<1>("h1"), "") : assert_46 @[Vec.scala 123:35]
      node _T_187 = eq(_T_184, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_187 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_46 @[Vec.scala 123:35]
    node _T_188 = eq(u[0][0][3], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_189 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_190 = eq(_T_189, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_190 : @[Vec.scala 123:35]
      assert(clock, _T_188, UInt<1>("h1"), "") : assert_47 @[Vec.scala 123:35]
      node _T_191 = eq(_T_188, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_191 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_47 @[Vec.scala 123:35]
    node _T_192 = bits(reset, 0, 0) @[Vec.scala 166:9]
    node _T_193 = eq(_T_192, UInt<1>("h0")) @[Vec.scala 166:9]
    when _T_193 : @[Vec.scala 166:9]
      stop(clock, UInt<1>("h1"), 0) : stop @[Vec.scala 166:9]
