circuit Fill3DTester :
  module Fill3DTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire u : UInt<6>[2][2][1] @[Vec.scala 162:34]
    u[0][0][0] <= UInt<6>("h2e") @[Vec.scala 162:34]
    u[0][0][1] <= UInt<6>("h2e") @[Vec.scala 162:34]
    u[0][1][0] <= UInt<6>("h2e") @[Vec.scala 162:34]
    u[0][1][1] <= UInt<6>("h2e") @[Vec.scala 162:34]
    node _T = eq(u[0][1][0], UInt<6>("h2e")) @[Vec.scala 123:41]
    node _T_1 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_2 : @[Vec.scala 123:35]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[Vec.scala 123:35]
      node _T_3 = eq(_T, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_3 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf @[Vec.scala 123:35]
    node _T_4 = eq(u[0][1][1], UInt<6>("h2e")) @[Vec.scala 123:41]
    node _T_5 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_6 : @[Vec.scala 123:35]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[Vec.scala 123:35]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_7 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_1 @[Vec.scala 123:35]
    node _T_8 = eq(u[0][0][0], UInt<6>("h2e")) @[Vec.scala 123:41]
    node _T_9 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_10 : @[Vec.scala 123:35]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[Vec.scala 123:35]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_11 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_2 @[Vec.scala 123:35]
    node _T_12 = eq(u[0][0][1], UInt<6>("h2e")) @[Vec.scala 123:41]
    node _T_13 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_14 : @[Vec.scala 123:35]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[Vec.scala 123:35]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_15 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_3 @[Vec.scala 123:35]
    node _T_16 = bits(reset, 0, 0) @[Vec.scala 166:9]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[Vec.scala 166:9]
    when _T_17 : @[Vec.scala 166:9]
      stop(clock, UInt<1>("h1"), 0) : stop @[Vec.scala 166:9]
