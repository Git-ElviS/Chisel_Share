circuit MultiClockMemTest :
  module MultiClockMemTest :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    reg cDiv : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[MultiClockSpec.scala 74:21]
    node _cDiv_T = eq(cDiv, UInt<1>("h0")) @[MultiClockSpec.scala 75:11]
    cDiv <= _cDiv_T @[MultiClockSpec.scala 75:8]
    node clock2 = asClock(cDiv) @[MultiClockSpec.scala 76:21]
    cmem mem : UInt<32> [8] @[MultiClockSpec.scala 78:16]
    reg cycle : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Counter.scala 62:40]
    wire done : UInt<1>
    done <= UInt<1>("h0")
    when UInt<1>("h1") : @[Counter.scala 120:16]
      node wrap_wrap = eq(cycle, UInt<5>("h13")) @[Counter.scala 74:24]
      node _wrap_value_T = add(cycle, UInt<1>("h1")) @[Counter.scala 78:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 78:24]
      cycle <= _wrap_value_T_1 @[Counter.scala 78:15]
      when wrap_wrap : @[Counter.scala 88:20]
        cycle <= UInt<1>("h0") @[Counter.scala 88:28]
      done <= wrap_wrap @[Counter.scala 120:23]
    reg waddr : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MultiClockSpec.scala 83:22]
    node _waddr_T = add(waddr, UInt<1>("h1")) @[MultiClockSpec.scala 84:18]
    node _waddr_T_1 = tail(_waddr_T, 1) @[MultiClockSpec.scala 84:18]
    waddr <= _waddr_T_1 @[MultiClockSpec.scala 84:9]
    node _T = lt(cycle, UInt<4>("h8")) @[MultiClockSpec.scala 85:14]
    when _T : @[MultiClockSpec.scala 85:21]
      infer mport MPORT = mem[waddr], clock @[MultiClockSpec.scala 86:8]
      MPORT <= UInt<7>("h7b") @[MultiClockSpec.scala 86:16]
    node _raddr_T = sub(waddr, UInt<1>("h1")) @[MultiClockSpec.scala 89:21]
    node raddr = tail(_raddr_T, 1) @[MultiClockSpec.scala 89:21]
    infer mport rdata = mem[raddr], clock @[MultiClockSpec.scala 90:18]
    node _T_1 = gt(cycle, UInt<1>("h0")) @[MultiClockSpec.scala 93:14]
    node _T_2 = lt(cycle, UInt<4>("h9")) @[MultiClockSpec.scala 93:29]
    node _T_3 = and(_T_1, _T_2) @[MultiClockSpec.scala 93:20]
    when _T_3 : @[MultiClockSpec.scala 93:36]
      node _T_4 = eq(rdata, UInt<7>("h7b")) @[MultiClockSpec.scala 94:18]
      node _T_5 = bits(reset, 0, 0) @[MultiClockSpec.scala 94:11]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[MultiClockSpec.scala 94:11]
      when _T_6 : @[MultiClockSpec.scala 94:11]
        assert(clock, _T_4, UInt<1>("h1"), "") : assert @[MultiClockSpec.scala 94:11]
        node _T_7 = eq(_T_4, UInt<1>("h0")) @[MultiClockSpec.scala 94:11]
        when _T_7 : @[MultiClockSpec.scala 94:11]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MultiClockSpec.scala:94 assert(rdata === 123.U)\n") : printf @[MultiClockSpec.scala 94:11]
    node _T_8 = geq(cycle, UInt<4>("h8")) @[MultiClockSpec.scala 99:16]
    node _T_9 = lt(cycle, UInt<5>("h10")) @[MultiClockSpec.scala 99:32]
    node _T_10 = and(_T_8, _T_9) @[MultiClockSpec.scala 99:23]
    when _T_10 : @[MultiClockSpec.scala 99:40]
      infer mport MPORT_1 = mem[waddr], clock2 @[MultiClockSpec.scala 100:10]
      MPORT_1 <= UInt<9>("h1c8") @[MultiClockSpec.scala 100:18]
    node _T_11 = gt(cycle, UInt<4>("h8")) @[MultiClockSpec.scala 105:14]
    node _T_12 = lt(cycle, UInt<5>("h11")) @[MultiClockSpec.scala 105:29]
    node _T_13 = and(_T_11, _T_12) @[MultiClockSpec.scala 105:20]
    when _T_13 : @[MultiClockSpec.scala 105:37]
      node _T_14 = rem(raddr, UInt<2>("h2")) @[MultiClockSpec.scala 106:16]
      node _T_15 = eq(_T_14, UInt<1>("h0")) @[MultiClockSpec.scala 106:22]
      when _T_15 : @[MultiClockSpec.scala 106:31]
        node _T_16 = eq(rdata, UInt<9>("h1c8")) @[MultiClockSpec.scala 107:20]
        node _T_17 = bits(reset, 0, 0) @[MultiClockSpec.scala 107:13]
        node _T_18 = eq(_T_17, UInt<1>("h0")) @[MultiClockSpec.scala 107:13]
        when _T_18 : @[MultiClockSpec.scala 107:13]
          assert(clock, _T_16, UInt<1>("h1"), "") : assert_1 @[MultiClockSpec.scala 107:13]
          node _T_19 = eq(_T_16, UInt<1>("h0")) @[MultiClockSpec.scala 107:13]
          when _T_19 : @[MultiClockSpec.scala 107:13]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at MultiClockSpec.scala:107 assert(rdata === 456.U)\n") : printf_1 @[MultiClockSpec.scala 107:13]
      else :
        node _T_20 = eq(rdata, UInt<7>("h7b")) @[MultiClockSpec.scala 109:20]
        node _T_21 = bits(reset, 0, 0) @[MultiClockSpec.scala 109:13]
        node _T_22 = eq(_T_21, UInt<1>("h0")) @[MultiClockSpec.scala 109:13]
        when _T_22 : @[MultiClockSpec.scala 109:13]
          assert(clock, _T_20, UInt<1>("h1"), "") : assert_2 @[MultiClockSpec.scala 109:13]
          node _T_23 = eq(_T_20, UInt<1>("h0")) @[MultiClockSpec.scala 109:13]
          when _T_23 : @[MultiClockSpec.scala 109:13]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at MultiClockSpec.scala:109 assert(rdata === 123.U)\n") : printf_2 @[MultiClockSpec.scala 109:13]
    when done : @[MultiClockSpec.scala 113:14]
      node _T_24 = bits(reset, 0, 0) @[MultiClockSpec.scala 113:20]
      node _T_25 = eq(_T_24, UInt<1>("h0")) @[MultiClockSpec.scala 113:20]
      when _T_25 : @[MultiClockSpec.scala 113:20]
        stop(clock, UInt<1>("h1"), 0) : stop @[MultiClockSpec.scala 113:20]
