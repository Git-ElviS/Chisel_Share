circuit MixedVecRegTester :
  module MixedVecRegTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire valuesInit : { 7 : UInt<3>, 6 : UInt<3>, 5 : UInt<3>, 4 : UInt<3>, 3 : UInt<3>, 2 : UInt<3>, 1 : UInt<3>, 0 : UInt<3>} @[MixedVec.scala 28:26]
    valuesInit.0 <= UInt<3>("h6") @[MixedVec.scala 31:9]
    valuesInit.1 <= UInt<3>("h3") @[MixedVec.scala 31:9]
    valuesInit.2 <= UInt<3>("h3") @[MixedVec.scala 31:9]
    valuesInit.3 <= UInt<3>("h2") @[MixedVec.scala 31:9]
    valuesInit.4 <= UInt<3>("h7") @[MixedVec.scala 31:9]
    valuesInit.5 <= UInt<3>("h3") @[MixedVec.scala 31:9]
    valuesInit.6 <= UInt<3>("h1") @[MixedVec.scala 31:9]
    valuesInit.7 <= UInt<3>("h7") @[MixedVec.scala 31:9]
    reg reg : { 7 : UInt<3>, 6 : UInt<3>, 5 : UInt<3>, 4 : UInt<3>, 3 : UInt<3>, 2 : UInt<3>, 1 : UInt<3>, 0 : UInt<3>}, clock with :
      reset => (UInt<1>("h0"), reg) @[MixedVecSpec.scala 21:16]
    reg doneReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MixedVecSpec.scala 23:24]
    doneReg <= UInt<1>("h1") @[MixedVecSpec.scala 24:11]
    node _T = eq(doneReg, UInt<1>("h0")) @[MixedVecSpec.scala 26:8]
    when _T : @[MixedVecSpec.scala 26:18]
      reg.0 <= valuesInit.0 @[MixedVec.scala 117:9]
      reg.1 <= valuesInit.1 @[MixedVec.scala 117:9]
      reg.2 <= valuesInit.2 @[MixedVec.scala 117:9]
      reg.3 <= valuesInit.3 @[MixedVec.scala 117:9]
      reg.4 <= valuesInit.4 @[MixedVec.scala 117:9]
      reg.5 <= valuesInit.5 @[MixedVec.scala 117:9]
      reg.6 <= valuesInit.6 @[MixedVec.scala 117:9]
      reg.7 <= valuesInit.7 @[MixedVec.scala 117:9]
    else :
      node _T_1 = eq(reg.0, UInt<3>("h6")) @[MixedVecSpec.scala 32:16]
      node _T_2 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_3 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_1, UInt<1>("h1"), "") : assert @[MixedVecSpec.scala 32:13]
        node _T_4 = eq(_T_1, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_4 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf @[MixedVecSpec.scala 32:13]
      node _T_5 = eq(reg.1, UInt<2>("h3")) @[MixedVecSpec.scala 32:16]
      node _T_6 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_7 = eq(_T_6, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_7 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_5, UInt<1>("h1"), "") : assert_1 @[MixedVecSpec.scala 32:13]
        node _T_8 = eq(_T_5, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_8 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_1 @[MixedVecSpec.scala 32:13]
      node _T_9 = eq(reg.2, UInt<2>("h3")) @[MixedVecSpec.scala 32:16]
      node _T_10 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_11 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_9, UInt<1>("h1"), "") : assert_2 @[MixedVecSpec.scala 32:13]
        node _T_12 = eq(_T_9, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_12 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_2 @[MixedVecSpec.scala 32:13]
      node _T_13 = eq(reg.3, UInt<2>("h2")) @[MixedVecSpec.scala 32:16]
      node _T_14 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_15 = eq(_T_14, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_15 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_13, UInt<1>("h1"), "") : assert_3 @[MixedVecSpec.scala 32:13]
        node _T_16 = eq(_T_13, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_16 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_3 @[MixedVecSpec.scala 32:13]
      node _T_17 = eq(reg.4, UInt<3>("h7")) @[MixedVecSpec.scala 32:16]
      node _T_18 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_19 = eq(_T_18, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_19 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_17, UInt<1>("h1"), "") : assert_4 @[MixedVecSpec.scala 32:13]
        node _T_20 = eq(_T_17, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_20 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_4 @[MixedVecSpec.scala 32:13]
      node _T_21 = eq(reg.5, UInt<2>("h3")) @[MixedVecSpec.scala 32:16]
      node _T_22 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_23 = eq(_T_22, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_23 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_21, UInt<1>("h1"), "") : assert_5 @[MixedVecSpec.scala 32:13]
        node _T_24 = eq(_T_21, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_24 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_5 @[MixedVecSpec.scala 32:13]
      node _T_25 = eq(reg.6, UInt<1>("h1")) @[MixedVecSpec.scala 32:16]
      node _T_26 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_27 = eq(_T_26, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_27 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_25, UInt<1>("h1"), "") : assert_6 @[MixedVecSpec.scala 32:13]
        node _T_28 = eq(_T_25, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_28 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_6 @[MixedVecSpec.scala 32:13]
      node _T_29 = eq(reg.7, UInt<3>("h7")) @[MixedVecSpec.scala 32:16]
      node _T_30 = bits(reset, 0, 0) @[MixedVecSpec.scala 32:13]
      node _T_31 = eq(_T_30, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
      when _T_31 : @[MixedVecSpec.scala 32:13]
        assert(clock, _T_29, UInt<1>("h1"), "") : assert_7 @[MixedVecSpec.scala 32:13]
        node _T_32 = eq(_T_29, UInt<1>("h0")) @[MixedVecSpec.scala 32:13]
        when _T_32 : @[MixedVecSpec.scala 32:13]
          printf(clock, UInt<1>("h1"), "Assertion failed\n    at MixedVecSpec.scala:32 assert(a === b.asUInt)\n") : printf_7 @[MixedVecSpec.scala 32:13]
      node _T_33 = bits(reset, 0, 0) @[MixedVecSpec.scala 34:9]
      node _T_34 = eq(_T_33, UInt<1>("h0")) @[MixedVecSpec.scala 34:9]
      when _T_34 : @[MixedVecSpec.scala 34:9]
        stop(clock, UInt<1>("h1"), 0) : stop @[MixedVecSpec.scala 34:9]
