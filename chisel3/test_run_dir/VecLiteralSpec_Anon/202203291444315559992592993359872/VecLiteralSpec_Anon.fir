circuit VecLiteralSpec_Anon :
  module VecLiteralSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire vecWire1 : Fixed<8><<4>>[2] @[VecLiteralSpec.scala 347:28]
    wire vecWire2 : Fixed<8><<4>>[2] @[VecLiteralSpec.scala 348:28]
    vecWire1[0] <= asFixedPoint(UInt<8>("h18"), 4) @[VecLiteralSpec.scala 352:18]
    vecWire1[1] is invalid @[VecLiteralSpec.scala 352:18]
    vecWire2[0] is invalid @[VecLiteralSpec.scala 353:18]
    vecWire2[1] <= asFixedPoint(UInt<8>("h34"), 4) @[VecLiteralSpec.scala 353:18]
    vecWire1[1] <= asFixedPoint(UInt<8>("h8"), 4) @[VecLiteralSpec.scala 354:21]
    node _T = asUInt(vecWire1[0]) @[VecLiteralSpec.scala 355:60]
    node _T_1 = asUInt(vecWire1[1]) @[VecLiteralSpec.scala 355:82]
    node _T_2 = bits(reset, 0, 0) @[VecLiteralSpec.scala 355:15]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[VecLiteralSpec.scala 355:15]
    when _T_3 : @[VecLiteralSpec.scala 355:15]
      printf(clock, UInt<1>("h1"), "vw1(0) %x  vw1(1) %x\n", _T, _T_1) : printf @[VecLiteralSpec.scala 355:15]
    node _T_4 = eq(vecWire1[0], asFixedPoint(UInt<8>("h18"), 4)) @[VecLiteralSpec.scala 356:36]
    node _T_5 = bits(reset, 0, 0) @[VecLiteralSpec.scala 356:23]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[VecLiteralSpec.scala 356:23]
    when _T_6 : @[VecLiteralSpec.scala 356:23]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert @[VecLiteralSpec.scala 356:23]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[VecLiteralSpec.scala 356:23]
      when _T_7 : @[VecLiteralSpec.scala 356:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:356 chisel3.assert(vecWire1(0) === (1.5).F(8.W, 4.BP))\n") : printf_1 @[VecLiteralSpec.scala 356:23]
    node _T_8 = eq(vecWire1[1], asFixedPoint(UInt<8>("h8"), 4)) @[VecLiteralSpec.scala 357:36]
    node _T_9 = bits(reset, 0, 0) @[VecLiteralSpec.scala 357:23]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[VecLiteralSpec.scala 357:23]
    when _T_10 : @[VecLiteralSpec.scala 357:23]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[VecLiteralSpec.scala 357:23]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[VecLiteralSpec.scala 357:23]
      when _T_11 : @[VecLiteralSpec.scala 357:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:357 chisel3.assert(vecWire1(1) === (0.5).F(8.W, 4.BP)) // Last connect won\n") : printf_2 @[VecLiteralSpec.scala 357:23]
    node _T_12 = eq(vecWire2[1], asFixedPoint(UInt<8>("h34"), 4)) @[VecLiteralSpec.scala 358:36]
    node _T_13 = bits(reset, 0, 0) @[VecLiteralSpec.scala 358:23]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[VecLiteralSpec.scala 358:23]
    when _T_14 : @[VecLiteralSpec.scala 358:23]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_2 @[VecLiteralSpec.scala 358:23]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[VecLiteralSpec.scala 358:23]
      when _T_15 : @[VecLiteralSpec.scala 358:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:358 chisel3.assert(vecWire2(1) === (3.25).F(8.W, 4.BP))\n") : printf_3 @[VecLiteralSpec.scala 358:23]
    node _T_16 = bits(reset, 0, 0) @[VecLiteralSpec.scala 359:13]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[VecLiteralSpec.scala 359:13]
    when _T_17 : @[VecLiteralSpec.scala 359:13]
      stop(clock, UInt<1>("h1"), 0) : stop @[VecLiteralSpec.scala 359:13]
