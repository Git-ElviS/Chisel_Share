circuit VecLiteralSpec_Anon :
  module VecLiteralSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    node _T = eq(UInt<8>("h2a"), UInt<6>("h2a")) @[VecLiteralSpec.scala 262:34]
    node _T_1 = bits(reset, 0, 0) @[VecLiteralSpec.scala 262:23]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[VecLiteralSpec.scala 262:23]
    when _T_2 : @[VecLiteralSpec.scala 262:23]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[VecLiteralSpec.scala 262:23]
      node _T_3 = eq(_T, UInt<1>("h0")) @[VecLiteralSpec.scala 262:23]
      when _T_3 : @[VecLiteralSpec.scala 262:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:262 chisel3.assert(vecLit(0) === 42.U)\n") : printf @[VecLiteralSpec.scala 262:23]
    node _T_4 = eq(UInt<8>("h5"), UInt<3>("h5")) @[VecLiteralSpec.scala 263:34]
    node _T_5 = bits(reset, 0, 0) @[VecLiteralSpec.scala 263:23]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[VecLiteralSpec.scala 263:23]
    when _T_6 : @[VecLiteralSpec.scala 263:23]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[VecLiteralSpec.scala 263:23]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[VecLiteralSpec.scala 263:23]
      when _T_7 : @[VecLiteralSpec.scala 263:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:263 chisel3.assert(vecLit(2) === 5.U)\n") : printf_1 @[VecLiteralSpec.scala 263:23]
    wire vecWire : UInt<8>[4] @[VecLiteralSpec.scala 265:27]
    vecWire[0] <= UInt<8>("h2a") @[VecLiteralSpec.scala 266:17]
    vecWire[1] is invalid @[VecLiteralSpec.scala 266:17]
    vecWire[2] <= UInt<8>("h5") @[VecLiteralSpec.scala 266:17]
    vecWire[3] is invalid @[VecLiteralSpec.scala 266:17]
    node _T_8 = eq(vecWire[0], UInt<6>("h2a")) @[VecLiteralSpec.scala 268:35]
    node _T_9 = bits(reset, 0, 0) @[VecLiteralSpec.scala 268:23]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[VecLiteralSpec.scala 268:23]
    when _T_10 : @[VecLiteralSpec.scala 268:23]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[VecLiteralSpec.scala 268:23]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[VecLiteralSpec.scala 268:23]
      when _T_11 : @[VecLiteralSpec.scala 268:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:268 chisel3.assert(vecWire(0) === 42.U)\n") : printf_2 @[VecLiteralSpec.scala 268:23]
    node _T_12 = eq(vecWire[2], UInt<3>("h5")) @[VecLiteralSpec.scala 269:35]
    node _T_13 = bits(reset, 0, 0) @[VecLiteralSpec.scala 269:23]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[VecLiteralSpec.scala 269:23]
    when _T_14 : @[VecLiteralSpec.scala 269:23]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[VecLiteralSpec.scala 269:23]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[VecLiteralSpec.scala 269:23]
      when _T_15 : @[VecLiteralSpec.scala 269:23]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VecLiteralSpec.scala:269 chisel3.assert(vecWire(2) === 5.U)\n") : printf_3 @[VecLiteralSpec.scala 269:23]
    node _T_16 = bits(reset, 0, 0) @[VecLiteralSpec.scala 271:13]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[VecLiteralSpec.scala 271:13]
    when _T_17 : @[VecLiteralSpec.scala 271:13]
      stop(clock, UInt<1>("h1"), 0) : stop @[VecLiteralSpec.scala 271:13]
