circuit IntervalChainedAddTester :
  module IntervalChainedAddTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire intervalResult : Interval.0 @[IntervalSpec.scala 372:28]
    wire uintResult : UInt @[IntervalSpec.scala 373:24]
    node _intervalResult_T = add(asInterval(UInt<2>("h1"), 1, 1, 0), asInterval(UInt<2>("h1"), 1, 1, 0)) @[IntervalSpec.scala 375:25]
    node _intervalResult_T_1 = add(_intervalResult_T, asInterval(UInt<2>("h1"), 1, 1, 0)) @[IntervalSpec.scala 375:31]
    node _intervalResult_T_2 = add(_intervalResult_T_1, asInterval(UInt<2>("h1"), 1, 1, 0)) @[IntervalSpec.scala 375:37]
    node _intervalResult_T_3 = add(_intervalResult_T_2, asInterval(UInt<2>("h1"), 1, 1, 0)) @[IntervalSpec.scala 375:43]
    node _intervalResult_T_4 = add(_intervalResult_T_3, asInterval(UInt<2>("h1"), 1, 1, 0)) @[IntervalSpec.scala 375:49]
    node _intervalResult_T_5 = add(_intervalResult_T_4, asInterval(UInt<2>("h1"), 1, 1, 0)) @[IntervalSpec.scala 375:55]
    intervalResult <= _intervalResult_T_5 @[IntervalSpec.scala 375:18]
    node _uintResult_T = add(UInt<1>("h1"), UInt<1>("h1")) @[IntervalSpec.scala 376:21]
    node _uintResult_T_1 = add(_uintResult_T, UInt<1>("h1")) @[IntervalSpec.scala 376:28]
    node _uintResult_T_2 = add(_uintResult_T_1, UInt<1>("h1")) @[IntervalSpec.scala 376:35]
    node _uintResult_T_3 = add(_uintResult_T_2, UInt<1>("h1")) @[IntervalSpec.scala 376:42]
    node _uintResult_T_4 = add(_uintResult_T_3, UInt<1>("h1")) @[IntervalSpec.scala 376:49]
    node _uintResult_T_5 = add(_uintResult_T_4, UInt<1>("h1")) @[IntervalSpec.scala 376:56]
    uintResult <= _uintResult_T_5 @[IntervalSpec.scala 376:14]
    node _T = eq(intervalResult, asInterval(UInt<4>("h7"), 7, 7, 0)) @[IntervalSpec.scala 378:25]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 378:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[IntervalSpec.scala 378:9]
    when _T_2 : @[IntervalSpec.scala 378:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[IntervalSpec.scala 378:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[IntervalSpec.scala 378:9]
      when _T_3 : @[IntervalSpec.scala 378:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:378 assert(intervalResult === 7.I)\n") : printf @[IntervalSpec.scala 378:9]
    node _T_4 = eq(uintResult, UInt<3>("h7")) @[IntervalSpec.scala 379:21]
    node _T_5 = bits(reset, 0, 0) @[IntervalSpec.scala 379:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[IntervalSpec.scala 379:9]
    when _T_6 : @[IntervalSpec.scala 379:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[IntervalSpec.scala 379:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[IntervalSpec.scala 379:9]
      when _T_7 : @[IntervalSpec.scala 379:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:379 assert(uintResult === 7.U)\n") : printf_1 @[IntervalSpec.scala 379:9]
    node _T_8 = bits(reset, 0, 0) @[IntervalSpec.scala 380:7]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[IntervalSpec.scala 380:7]
    when _T_9 : @[IntervalSpec.scala 380:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[IntervalSpec.scala 380:7]
