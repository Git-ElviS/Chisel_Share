circuit PlaSpec_Anon :
  module PlaSpec_Anon :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire plaIn : UInt<3> @[pla.scala 77:22]
    node invInputs = not(plaIn) @[pla.scala 78:21]
    wire plaOut : UInt<3> @[pla.scala 81:23]
    node andMatrixInput_0 = bits(invInputs, 0, 0) @[pla.scala 91:29]
    node andMatrixInput_1 = bits(invInputs, 1, 1) @[pla.scala 91:29]
    node andMatrixInput_2 = bits(invInputs, 2, 2) @[pla.scala 91:29]
    node hi = cat(andMatrixInput_0, andMatrixInput_1) @[Cat.scala 31:58]
    node _T = cat(hi, andMatrixInput_2) @[Cat.scala 31:58]
    node _T_1 = andr(_T) @[pla.scala 98:74]
    node andMatrixInput_0_1 = bits(plaIn, 0, 0) @[pla.scala 90:45]
    node andMatrixInput_1_1 = bits(plaIn, 1, 1) @[pla.scala 90:45]
    node andMatrixInput_2_1 = bits(plaIn, 2, 2) @[pla.scala 90:45]
    node hi_1 = cat(andMatrixInput_0_1, andMatrixInput_1_1) @[Cat.scala 31:58]
    node _T_2 = cat(hi_1, andMatrixInput_2_1) @[Cat.scala 31:58]
    node _T_3 = andr(_T_2) @[pla.scala 98:74]
    node _orMatrixOutputs_T = cat(_T_1, _T_3) @[Cat.scala 31:58]
    node _orMatrixOutputs_T_1 = orr(_orMatrixOutputs_T) @[pla.scala 114:39]
    node orMatrixOutputs_hi = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 31:58]
    node orMatrixOutputs = cat(orMatrixOutputs_hi, _orMatrixOutputs_T_1) @[Cat.scala 31:58]
    node _invMatrixOutputs_T = bits(orMatrixOutputs, 0, 0) @[pla.scala 124:31]
    node _invMatrixOutputs_T_1 = bits(orMatrixOutputs, 1, 1) @[pla.scala 124:31]
    node _invMatrixOutputs_T_2 = bits(orMatrixOutputs, 2, 2) @[pla.scala 124:31]
    node invMatrixOutputs_hi = cat(_invMatrixOutputs_T_2, _invMatrixOutputs_T_1) @[Cat.scala 31:58]
    node invMatrixOutputs = cat(invMatrixOutputs_hi, _invMatrixOutputs_T) @[Cat.scala 31:58]
    plaOut <= invMatrixOutputs @[pla.scala 129:13]
    wire _plaIn_WIRE : UInt<3>
    _plaIn_WIRE <= UInt<3>("h0")
    plaIn <= _plaIn_WIRE @[PlaSpec.scala 71:17]
    node _T_4 = and(plaOut, UInt<2>("h3")) @[PlaSpec.scala 72:28]
    node _T_5 = eq(UInt<1>("h1"), _T_4) @[PlaSpec.scala 72:28]
    node _T_6 = bits(reset, 0, 0) @[PlaSpec.scala 72:25]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[PlaSpec.scala 72:25]
    when _T_7 : @[PlaSpec.scala 72:25]
      assert(clock, _T_5, UInt<1>("h1"), "") : assert @[PlaSpec.scala 72:25]
      node _T_8 = eq(_T_5, UInt<1>("h0")) @[PlaSpec.scala 72:25]
      when _T_8 : @[PlaSpec.scala 72:25]
        printf(clock, UInt<1>("h1"), "Assertion failed: Input BitPat(000) produced incorrect output BitPat(%b)\n    at PlaSpec.scala:72 chisel3.assert(o === plaOut, \"Input \" + i.toString + \" produced incorrect output BitPat(%%b)\", plaOut)\n", plaOut) : printf @[PlaSpec.scala 72:25]
    wire plaIn_1 : UInt<3> @[pla.scala 77:22]
    node invInputs_1 = not(plaIn_1) @[pla.scala 78:21]
    wire plaOut_1 : UInt<3> @[pla.scala 81:23]
    node andMatrixInput_0_2 = bits(invInputs_1, 0, 0) @[pla.scala 91:29]
    node andMatrixInput_1_2 = bits(invInputs_1, 1, 1) @[pla.scala 91:29]
    node andMatrixInput_2_2 = bits(invInputs_1, 2, 2) @[pla.scala 91:29]
    node hi_2 = cat(andMatrixInput_0_2, andMatrixInput_1_2) @[Cat.scala 31:58]
    node _T_9 = cat(hi_2, andMatrixInput_2_2) @[Cat.scala 31:58]
    node _T_10 = andr(_T_9) @[pla.scala 98:74]
    node andMatrixInput_0_3 = bits(plaIn_1, 0, 0) @[pla.scala 90:45]
    node andMatrixInput_1_3 = bits(plaIn_1, 1, 1) @[pla.scala 90:45]
    node andMatrixInput_2_3 = bits(plaIn_1, 2, 2) @[pla.scala 90:45]
    node hi_3 = cat(andMatrixInput_0_3, andMatrixInput_1_3) @[Cat.scala 31:58]
    node _T_11 = cat(hi_3, andMatrixInput_2_3) @[Cat.scala 31:58]
    node _T_12 = andr(_T_11) @[pla.scala 98:74]
    node _orMatrixOutputs_T_2 = cat(_T_10, _T_12) @[Cat.scala 31:58]
    node _orMatrixOutputs_T_3 = orr(_orMatrixOutputs_T_2) @[pla.scala 114:39]
    node orMatrixOutputs_hi_1 = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 31:58]
    node orMatrixOutputs_1 = cat(orMatrixOutputs_hi_1, _orMatrixOutputs_T_3) @[Cat.scala 31:58]
    node _invMatrixOutputs_T_3 = bits(orMatrixOutputs_1, 0, 0) @[pla.scala 124:31]
    node _invMatrixOutputs_T_4 = bits(orMatrixOutputs_1, 1, 1) @[pla.scala 124:31]
    node _invMatrixOutputs_T_5 = bits(orMatrixOutputs_1, 2, 2) @[pla.scala 124:31]
    node invMatrixOutputs_hi_1 = cat(_invMatrixOutputs_T_5, _invMatrixOutputs_T_4) @[Cat.scala 31:58]
    node invMatrixOutputs_1 = cat(invMatrixOutputs_hi_1, _invMatrixOutputs_T_3) @[Cat.scala 31:58]
    plaOut_1 <= invMatrixOutputs_1 @[pla.scala 129:13]
    wire _plaIn_WIRE_1 : UInt<3>
    _plaIn_WIRE_1 <= UInt<3>("h7")
    plaIn_1 <= _plaIn_WIRE_1 @[PlaSpec.scala 71:17]
    node _T_13 = and(plaOut_1, UInt<2>("h3")) @[PlaSpec.scala 72:28]
    node _T_14 = eq(UInt<1>("h1"), _T_13) @[PlaSpec.scala 72:28]
    node _T_15 = bits(reset, 0, 0) @[PlaSpec.scala 72:25]
    node _T_16 = eq(_T_15, UInt<1>("h0")) @[PlaSpec.scala 72:25]
    when _T_16 : @[PlaSpec.scala 72:25]
      assert(clock, _T_14, UInt<1>("h1"), "") : assert_1 @[PlaSpec.scala 72:25]
      node _T_17 = eq(_T_14, UInt<1>("h0")) @[PlaSpec.scala 72:25]
      when _T_17 : @[PlaSpec.scala 72:25]
        printf(clock, UInt<1>("h1"), "Assertion failed: Input BitPat(111) produced incorrect output BitPat(%b)\n    at PlaSpec.scala:72 chisel3.assert(o === plaOut, \"Input \" + i.toString + \" produced incorrect output BitPat(%%b)\", plaOut)\n", plaOut_1) : printf_1 @[PlaSpec.scala 72:25]
    node _T_18 = bits(reset, 0, 0) @[PlaSpec.scala 74:11]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[PlaSpec.scala 74:11]
    when _T_19 : @[PlaSpec.scala 74:11]
      stop(clock, UInt<1>("h1"), 0) : stop @[PlaSpec.scala 74:11]
