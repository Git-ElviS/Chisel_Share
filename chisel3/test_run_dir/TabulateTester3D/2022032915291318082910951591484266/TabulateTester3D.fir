circuit TabulateTester3D :
  module TabulateTester3D :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire vec : UInt<3>[3][4][2] @[Vec.scala 146:41]
    vec[0][0][0] <= UInt<1>("h0") @[Vec.scala 146:41]
    vec[0][0][1] <= UInt<1>("h1") @[Vec.scala 146:41]
    vec[0][0][2] <= UInt<2>("h2") @[Vec.scala 146:41]
    vec[0][1][0] <= UInt<1>("h1") @[Vec.scala 146:41]
    vec[0][1][1] <= UInt<2>("h2") @[Vec.scala 146:41]
    vec[0][1][2] <= UInt<2>("h3") @[Vec.scala 146:41]
    vec[0][2][0] <= UInt<2>("h2") @[Vec.scala 146:41]
    vec[0][2][1] <= UInt<2>("h3") @[Vec.scala 146:41]
    vec[0][2][2] <= UInt<3>("h4") @[Vec.scala 146:41]
    vec[0][3][0] <= UInt<2>("h3") @[Vec.scala 146:41]
    vec[0][3][1] <= UInt<3>("h4") @[Vec.scala 146:41]
    vec[0][3][2] <= UInt<3>("h5") @[Vec.scala 146:41]
    vec[1][0][0] <= UInt<1>("h1") @[Vec.scala 146:41]
    vec[1][0][1] <= UInt<2>("h2") @[Vec.scala 146:41]
    vec[1][0][2] <= UInt<2>("h3") @[Vec.scala 146:41]
    vec[1][1][0] <= UInt<2>("h2") @[Vec.scala 146:41]
    vec[1][1][1] <= UInt<2>("h3") @[Vec.scala 146:41]
    vec[1][1][2] <= UInt<3>("h4") @[Vec.scala 146:41]
    vec[1][2][0] <= UInt<2>("h3") @[Vec.scala 146:41]
    vec[1][2][1] <= UInt<3>("h4") @[Vec.scala 146:41]
    vec[1][2][2] <= UInt<3>("h5") @[Vec.scala 146:41]
    vec[1][3][0] <= UInt<3>("h4") @[Vec.scala 146:41]
    vec[1][3][1] <= UInt<3>("h5") @[Vec.scala 146:41]
    vec[1][3][2] <= UInt<3>("h6") @[Vec.scala 146:41]
    node _T = eq(vec[1][3][0], UInt<3>("h4")) @[Vec.scala 123:41]
    node _T_1 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_2 : @[Vec.scala 123:35]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[Vec.scala 123:35]
      node _T_3 = eq(_T, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_3 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf @[Vec.scala 123:35]
    node _T_4 = eq(vec[1][3][1], UInt<3>("h5")) @[Vec.scala 123:41]
    node _T_5 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_6 : @[Vec.scala 123:35]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[Vec.scala 123:35]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_7 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_1 @[Vec.scala 123:35]
    node _T_8 = eq(vec[1][3][2], UInt<3>("h6")) @[Vec.scala 123:41]
    node _T_9 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_10 : @[Vec.scala 123:35]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[Vec.scala 123:35]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_11 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_2 @[Vec.scala 123:35]
    node _T_12 = eq(vec[1][2][0], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_13 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_14 : @[Vec.scala 123:35]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[Vec.scala 123:35]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_15 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_3 @[Vec.scala 123:35]
    node _T_16 = eq(vec[1][2][1], UInt<3>("h4")) @[Vec.scala 123:41]
    node _T_17 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_18 : @[Vec.scala 123:35]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_4 @[Vec.scala 123:35]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_19 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_4 @[Vec.scala 123:35]
    node _T_20 = eq(vec[1][2][2], UInt<3>("h5")) @[Vec.scala 123:41]
    node _T_21 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_22 : @[Vec.scala 123:35]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_5 @[Vec.scala 123:35]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_23 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_5 @[Vec.scala 123:35]
    node _T_24 = eq(vec[1][1][0], UInt<2>("h2")) @[Vec.scala 123:41]
    node _T_25 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_26 : @[Vec.scala 123:35]
      assert(clock, _T_24, UInt<1>("h1"), "") : assert_6 @[Vec.scala 123:35]
      node _T_27 = eq(_T_24, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_27 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_6 @[Vec.scala 123:35]
    node _T_28 = eq(vec[1][1][1], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_29 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_30 = eq(_T_29, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_30 : @[Vec.scala 123:35]
      assert(clock, _T_28, UInt<1>("h1"), "") : assert_7 @[Vec.scala 123:35]
      node _T_31 = eq(_T_28, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_31 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_7 @[Vec.scala 123:35]
    node _T_32 = eq(vec[1][1][2], UInt<3>("h4")) @[Vec.scala 123:41]
    node _T_33 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_34 = eq(_T_33, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_34 : @[Vec.scala 123:35]
      assert(clock, _T_32, UInt<1>("h1"), "") : assert_8 @[Vec.scala 123:35]
      node _T_35 = eq(_T_32, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_35 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_8 @[Vec.scala 123:35]
    node _T_36 = eq(vec[1][0][0], UInt<1>("h1")) @[Vec.scala 123:41]
    node _T_37 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_38 = eq(_T_37, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_38 : @[Vec.scala 123:35]
      assert(clock, _T_36, UInt<1>("h1"), "") : assert_9 @[Vec.scala 123:35]
      node _T_39 = eq(_T_36, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_39 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_9 @[Vec.scala 123:35]
    node _T_40 = eq(vec[1][0][1], UInt<2>("h2")) @[Vec.scala 123:41]
    node _T_41 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_42 = eq(_T_41, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_42 : @[Vec.scala 123:35]
      assert(clock, _T_40, UInt<1>("h1"), "") : assert_10 @[Vec.scala 123:35]
      node _T_43 = eq(_T_40, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_43 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_10 @[Vec.scala 123:35]
    node _T_44 = eq(vec[1][0][2], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_45 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_46 : @[Vec.scala 123:35]
      assert(clock, _T_44, UInt<1>("h1"), "") : assert_11 @[Vec.scala 123:35]
      node _T_47 = eq(_T_44, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_47 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_11 @[Vec.scala 123:35]
    node _T_48 = eq(vec[0][3][0], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_49 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_50 = eq(_T_49, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_50 : @[Vec.scala 123:35]
      assert(clock, _T_48, UInt<1>("h1"), "") : assert_12 @[Vec.scala 123:35]
      node _T_51 = eq(_T_48, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_51 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_12 @[Vec.scala 123:35]
    node _T_52 = eq(vec[0][3][1], UInt<3>("h4")) @[Vec.scala 123:41]
    node _T_53 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_54 = eq(_T_53, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_54 : @[Vec.scala 123:35]
      assert(clock, _T_52, UInt<1>("h1"), "") : assert_13 @[Vec.scala 123:35]
      node _T_55 = eq(_T_52, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_55 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_13 @[Vec.scala 123:35]
    node _T_56 = eq(vec[0][3][2], UInt<3>("h5")) @[Vec.scala 123:41]
    node _T_57 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_58 : @[Vec.scala 123:35]
      assert(clock, _T_56, UInt<1>("h1"), "") : assert_14 @[Vec.scala 123:35]
      node _T_59 = eq(_T_56, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_59 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_14 @[Vec.scala 123:35]
    node _T_60 = eq(vec[0][2][0], UInt<2>("h2")) @[Vec.scala 123:41]
    node _T_61 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_62 = eq(_T_61, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_62 : @[Vec.scala 123:35]
      assert(clock, _T_60, UInt<1>("h1"), "") : assert_15 @[Vec.scala 123:35]
      node _T_63 = eq(_T_60, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_63 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_15 @[Vec.scala 123:35]
    node _T_64 = eq(vec[0][2][1], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_65 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_66 = eq(_T_65, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_66 : @[Vec.scala 123:35]
      assert(clock, _T_64, UInt<1>("h1"), "") : assert_16 @[Vec.scala 123:35]
      node _T_67 = eq(_T_64, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_67 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_16 @[Vec.scala 123:35]
    node _T_68 = eq(vec[0][2][2], UInt<3>("h4")) @[Vec.scala 123:41]
    node _T_69 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_70 = eq(_T_69, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_70 : @[Vec.scala 123:35]
      assert(clock, _T_68, UInt<1>("h1"), "") : assert_17 @[Vec.scala 123:35]
      node _T_71 = eq(_T_68, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_71 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_17 @[Vec.scala 123:35]
    node _T_72 = eq(vec[0][1][0], UInt<1>("h1")) @[Vec.scala 123:41]
    node _T_73 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_74 = eq(_T_73, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_74 : @[Vec.scala 123:35]
      assert(clock, _T_72, UInt<1>("h1"), "") : assert_18 @[Vec.scala 123:35]
      node _T_75 = eq(_T_72, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_75 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_18 @[Vec.scala 123:35]
    node _T_76 = eq(vec[0][1][1], UInt<2>("h2")) @[Vec.scala 123:41]
    node _T_77 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_78 = eq(_T_77, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_78 : @[Vec.scala 123:35]
      assert(clock, _T_76, UInt<1>("h1"), "") : assert_19 @[Vec.scala 123:35]
      node _T_79 = eq(_T_76, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_79 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_19 @[Vec.scala 123:35]
    node _T_80 = eq(vec[0][1][2], UInt<2>("h3")) @[Vec.scala 123:41]
    node _T_81 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_82 = eq(_T_81, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_82 : @[Vec.scala 123:35]
      assert(clock, _T_80, UInt<1>("h1"), "") : assert_20 @[Vec.scala 123:35]
      node _T_83 = eq(_T_80, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_83 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_20 @[Vec.scala 123:35]
    node _T_84 = eq(vec[0][0][0], UInt<1>("h0")) @[Vec.scala 123:41]
    node _T_85 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_86 = eq(_T_85, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_86 : @[Vec.scala 123:35]
      assert(clock, _T_84, UInt<1>("h1"), "") : assert_21 @[Vec.scala 123:35]
      node _T_87 = eq(_T_84, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_87 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_21 @[Vec.scala 123:35]
    node _T_88 = eq(vec[0][0][1], UInt<1>("h1")) @[Vec.scala 123:41]
    node _T_89 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_90 = eq(_T_89, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_90 : @[Vec.scala 123:35]
      assert(clock, _T_88, UInt<1>("h1"), "") : assert_22 @[Vec.scala 123:35]
      node _T_91 = eq(_T_88, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_91 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_22 @[Vec.scala 123:35]
    node _T_92 = eq(vec[0][0][2], UInt<2>("h2")) @[Vec.scala 123:41]
    node _T_93 = bits(reset, 0, 0) @[Vec.scala 123:35]
    node _T_94 = eq(_T_93, UInt<1>("h0")) @[Vec.scala 123:35]
    when _T_94 : @[Vec.scala 123:35]
      assert(clock, _T_92, UInt<1>("h1"), "") : assert_23 @[Vec.scala 123:35]
      node _T_95 = eq(_T_92, UInt<1>("h0")) @[Vec.scala 123:35]
      when _T_95 : @[Vec.scala 123:35]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Vec.scala:123 compareRow.foreach(x => assert(x._1 === x._2.U))\n") : printf_23 @[Vec.scala 123:35]
    node _T_96 = bits(reset, 0, 0) @[Vec.scala 150:9]
    node _T_97 = eq(_T_96, UInt<1>("h0")) @[Vec.scala 150:9]
    when _T_97 : @[Vec.scala 150:9]
      stop(clock, UInt<1>("h1"), 0) : stop @[Vec.scala 150:9]
