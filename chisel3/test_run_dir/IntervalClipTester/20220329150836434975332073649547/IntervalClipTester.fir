circuit IntervalClipTester :
  module IntervalClipTester :
    input clock : Clock
    input reset : UInt<1>
    output io : { }

    wire base : Interval[-4, 6].0 @[IntervalSpec.scala 333:18]
    wire enclosed : Interval[-2, 5].0 @[IntervalSpec.scala 334:22]
    wire enclosing : Interval[-6, 8].0 @[IntervalSpec.scala 335:23]
    wire overlapLeft : Interval[-10, -2].0 @[IntervalSpec.scala 336:25]
    wire overlapRight : Interval[-1, 10].0 @[IntervalSpec.scala 337:26]
    wire disjointLeft : Interval[-14, -7].0 @[IntervalSpec.scala 338:26]
    wire disjointRight : Interval[7, 11].0 @[IntervalSpec.scala 339:27]
    enclosed is invalid @[IntervalSpec.scala 341:12]
    enclosing is invalid @[IntervalSpec.scala 342:13]
    overlapLeft is invalid @[IntervalSpec.scala 343:15]
    overlapRight is invalid @[IntervalSpec.scala 344:16]
    disjointLeft is invalid @[IntervalSpec.scala 345:16]
    disjointRight is invalid @[IntervalSpec.scala 346:17]
    node enclosedResult = clip(base, enclosed) @[IntervalSpec.scala 348:33]
    node enclosingResult = clip(base, enclosing) @[IntervalSpec.scala 349:34]
    node overlapLeftResult = clip(base, overlapLeft) @[IntervalSpec.scala 350:36]
    node overlapRightResult = clip(base, overlapRight) @[IntervalSpec.scala 351:37]
    node disjointLeftResult = clip(base, disjointLeft) @[IntervalSpec.scala 352:37]
    node disjointRightResult = clip(base, disjointRight) @[IntervalSpec.scala 353:38]
    node _enclosedViaRangeString_T = asInterval(UInt<1>("h0"), -2, 5, 0) @[IntervalSpec.scala 354:41]
    node enclosedViaRangeString = clip(base, _enclosedViaRangeString_T) @[IntervalSpec.scala 354:41]
    base <= asInterval(UInt<4>("h6"), 6, 6, 0) @[IntervalSpec.scala 356:8]
    node _T = eq(enclosedResult, asInterval(UInt<4>("h5"), 5, 5, 0)) @[IntervalSpec.scala 358:25]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 358:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[IntervalSpec.scala 358:9]
    when _T_2 : @[IntervalSpec.scala 358:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[IntervalSpec.scala 358:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[IntervalSpec.scala 358:9]
      when _T_3 : @[IntervalSpec.scala 358:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:358 assert(enclosedResult === 5.I)\n") : printf @[IntervalSpec.scala 358:9]
    node _T_4 = eq(enclosingResult, asInterval(UInt<4>("h6"), 6, 6, 0)) @[IntervalSpec.scala 359:26]
    node _T_5 = bits(reset, 0, 0) @[IntervalSpec.scala 359:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[IntervalSpec.scala 359:9]
    when _T_6 : @[IntervalSpec.scala 359:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[IntervalSpec.scala 359:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[IntervalSpec.scala 359:9]
      when _T_7 : @[IntervalSpec.scala 359:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:359 assert(enclosingResult === 6.I)\n") : printf_1 @[IntervalSpec.scala 359:9]
    node _T_8 = eq(overlapLeftResult, asInterval(UInt<2>("h2"), -2, -2, 0)) @[IntervalSpec.scala 360:28]
    node _T_9 = bits(reset, 0, 0) @[IntervalSpec.scala 360:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[IntervalSpec.scala 360:9]
    when _T_10 : @[IntervalSpec.scala 360:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_2 @[IntervalSpec.scala 360:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[IntervalSpec.scala 360:9]
      when _T_11 : @[IntervalSpec.scala 360:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:360 assert(overlapLeftResult === (-2).I)\n") : printf_2 @[IntervalSpec.scala 360:9]
    node _T_12 = eq(overlapRightResult, asInterval(UInt<4>("h6"), 6, 6, 0)) @[IntervalSpec.scala 361:29]
    node _T_13 = bits(reset, 0, 0) @[IntervalSpec.scala 361:9]
    node _T_14 = eq(_T_13, UInt<1>("h0")) @[IntervalSpec.scala 361:9]
    when _T_14 : @[IntervalSpec.scala 361:9]
      assert(clock, _T_12, UInt<1>("h1"), "") : assert_3 @[IntervalSpec.scala 361:9]
      node _T_15 = eq(_T_12, UInt<1>("h0")) @[IntervalSpec.scala 361:9]
      when _T_15 : @[IntervalSpec.scala 361:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:361 assert(overlapRightResult === 6.I)\n") : printf_3 @[IntervalSpec.scala 361:9]
    node _T_16 = eq(disjointLeftResult, asInterval(UInt<4>("h9"), -7, -7, 0)) @[IntervalSpec.scala 362:29]
    node _T_17 = bits(reset, 0, 0) @[IntervalSpec.scala 362:9]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[IntervalSpec.scala 362:9]
    when _T_18 : @[IntervalSpec.scala 362:9]
      assert(clock, _T_16, UInt<1>("h1"), "") : assert_4 @[IntervalSpec.scala 362:9]
      node _T_19 = eq(_T_16, UInt<1>("h0")) @[IntervalSpec.scala 362:9]
      when _T_19 : @[IntervalSpec.scala 362:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:362 assert(disjointLeftResult === (-7).I)\n") : printf_4 @[IntervalSpec.scala 362:9]
    node _T_20 = eq(disjointRightResult, asInterval(UInt<4>("h7"), 7, 7, 0)) @[IntervalSpec.scala 363:30]
    node _T_21 = bits(reset, 0, 0) @[IntervalSpec.scala 363:9]
    node _T_22 = eq(_T_21, UInt<1>("h0")) @[IntervalSpec.scala 363:9]
    when _T_22 : @[IntervalSpec.scala 363:9]
      assert(clock, _T_20, UInt<1>("h1"), "") : assert_5 @[IntervalSpec.scala 363:9]
      node _T_23 = eq(_T_20, UInt<1>("h0")) @[IntervalSpec.scala 363:9]
      when _T_23 : @[IntervalSpec.scala 363:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:363 assert(disjointRightResult === 7.I)\n") : printf_5 @[IntervalSpec.scala 363:9]
    node _T_24 = eq(enclosedViaRangeString, asInterval(UInt<4>("h5"), 5, 5, 0)) @[IntervalSpec.scala 365:33]
    node _T_25 = bits(reset, 0, 0) @[IntervalSpec.scala 365:9]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[IntervalSpec.scala 365:9]
    when _T_26 : @[IntervalSpec.scala 365:9]
      assert(clock, _T_24, UInt<1>("h1"), "") : assert_6 @[IntervalSpec.scala 365:9]
      node _T_27 = eq(_T_24, UInt<1>("h0")) @[IntervalSpec.scala 365:9]
      when _T_27 : @[IntervalSpec.scala 365:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at IntervalSpec.scala:365 assert(enclosedViaRangeString === 5.I)\n") : printf_6 @[IntervalSpec.scala 365:9]
    node _T_28 = bits(reset, 0, 0) @[IntervalSpec.scala 367:7]
    node _T_29 = eq(_T_28, UInt<1>("h0")) @[IntervalSpec.scala 367:7]
    when _T_29 : @[IntervalSpec.scala 367:7]
      stop(clock, UInt<1>("h1"), 0) : stop @[IntervalSpec.scala 367:7]
